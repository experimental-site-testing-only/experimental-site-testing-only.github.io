import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>The macro capabilities of C3 reaches across several constructs:\nmacros, <a href=\"/generic-programming/generics/\">generic functions, generic modules</a>, and <a href=\"/generic-programming/compiletime/#compile-time-values\">compile time variables</a> (prefixed with <code dir=\"auto\">$</code>), macro compile time execution (using <code dir=\"auto\">$if</code>, <code dir=\"auto\">$for</code>, <code dir=\"auto\">$foreach</code>, <code dir=\"auto\">$switch</code>) and attributes.</p>\n<h2 id=\"a-quick-comparison-of-c-and-c3-macros\">A quick comparison of C and C3 macros</h2>\n<h3 id=\"conditional-compilation\">Conditional compilation</h3>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#82AAFF;--1:#3C63B3\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">) </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">Y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> z;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#endif</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C Macro#if defined(x) &#x26;&#x26; Y > 3int z;#endif\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x) </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Y </span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> z;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$endif</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// or</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> z @</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\">($</span><span style=\"--0:#82AAFF;--1:#3C63B3\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x) </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Y </span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 Macro$if $defined(x) &#x26;&#x26; Y > 3:    int z;$endif// orint z @if($defined(x) &#x26;&#x26; Y > 3);\"><div></div></button></div></figure></div>\n<h3 id=\"macros\">Macros</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">M</span><span style=\"--0:#D9F5DD;--1:#111111\">(</span><span style=\"--0:#D7DBE0;--1:#403F53\">x</span><span style=\"--0:#D9F5DD;--1:#111111\">)</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ((x) </span><span style=\"--0:#7FDBCA;--1:#097174\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">UInt32</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">unsigned</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Use:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> y </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">M</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">() </span><span style=\"--0:#7FDBCA;--1:#097174\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">UInt32</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> y;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C Macro#define M(x) ((x) + 2)#define UInt32 unsigned int// Use:int y = M(foo() + 2);UInt32 b = y;\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#82AAFF;--1:#3C63B3\">m</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">def UInt32 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">uint</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Use:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> y </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">m</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">() </span><span style=\"--0:#C792EA;--1:#8D46B4\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">UInt32 b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> y;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 Macromacro m(x){    return x + 2;}def UInt32 = uint;// Use:int y = m(foo() + 2);UInt32 b = y;\"><div></div></button></div></figure></div>\n<h3 id=\"dynamic-scoping\">Dynamic scoping</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">Z</span><span style=\"--0:#D6DEEB;--1:#403F53\">() </span><span style=\"--0:#C5E478;--1:#3C63B3\">ptr</span><span style=\"--0:#D6DEEB;--1:#403F53\">-></span><span style=\"--0:#C5E478;--1:#3C63B3\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">-></span><span style=\"--0:#C5E478;--1:#3C63B3\">y</span><span style=\"--0:#D6DEEB;--1:#403F53\">-></span><span style=\"--0:#C5E478;--1:#3C63B3\">z</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">Z</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C Macro#define Z() ptr->x->y->zint x = Z();\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">... currently no corresponding functionality ...</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 Macro... currently no corresponding functionality ...\"><div></div></button></div></figure></div>\n<h3 id=\"expression-arguments\">Expression arguments</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">M</span><span style=\"--0:#D9F5DD;--1:#111111\">(</span><span style=\"--1:#403F53\"><span style=\"--0:#D7DBE0\">x</span><span style=\"--0:#D6DEEB\">, </span><span style=\"--0:#D7DBE0\">y</span></span><span style=\"--0:#D9F5DD;--1:#111111\">)</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (y);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">M</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C Macro#define M(x, y) x = 2 * (y);...M(x, 3);\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">m</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">#x</span><span style=\"--0:#D6DEEB;--1:#403F53\">, y)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">#x</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> y;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">m</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 Macromacro @m(#x, y){    #x = 2 * y;}...@m(x, 3);\"><div></div></button></div></figure></div>\n<h3 id=\"first-class-types\">First class types</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">SIZE</span><span style=\"--0:#D9F5DD;--1:#111111\">(</span><span style=\"--0:#D7DBE0;--1:#403F53\">T</span><span style=\"--0:#D9F5DD;--1:#111111\">)</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(T) </span><span style=\"--0:#7FDBCA;--1:#097174\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">))</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C Macro#define SIZE(T) (sizeof(T) + sizeof(int))\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#82AAFF;--1:#3C63B3\">size</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\">($</span><span style=\"--0:#D7DBE0\">Type</span><span style=\"--0:#D6DEEB\">)</span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#C5E478;--1:#3C63B3\">Type</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">.sizeof;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 Macromacro size($Type){    return $Type.sizeof + int.sizeof;}\"><div></div></button></div></figure></div>\n<h3 id=\"trailing-blocks-for-macros\">Trailing blocks for macros</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">// C Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">#define FOR_EACH(x, list) \\</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">for (x = (list); x; x = x->next)</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">// Use:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">Foo *it;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">FOR_EACH(it, list)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">if (!process(it)) return;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C Macro#define FOR_EACH(x, list) \\for (x = (list); x; x = x->next)// Use:Foo *it;FOR_EACH(it, list){    if (!process(it)) return;}\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">for_each</span><span style=\"--0:#D6DEEB;--1:#403F53\">(list; @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">body</span><span style=\"--0:#D6DEEB;--1:#403F53\">(it))</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">for</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ($</span><span style=\"--0:#82AAFF;--1:#3C63B3\">typeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(list) x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> list; x; x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">next</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">body</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Use:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">for_each</span><span style=\"--0:#D6DEEB;--1:#403F53\">(list; Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">!</span><span style=\"--0:#82AAFF;--1:#3C63B3\">process</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x)) </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 Macromacro @for_each(list; @body(it)){    for ($typeof(list) x = list; x; x = x.next)    {        @body(x);    }}// Use:@for_each(list; Foo* x){    if (!process(x)) return;}\"><div></div></button></div></figure></div>\n<h3 id=\"first-class-names\">First class names</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">offsetof</span><span style=\"--0:#D9F5DD;--1:#111111\">(</span><span style=\"--1:#403F53\"><span style=\"--0:#D7DBE0\">T</span><span style=\"--0:#D6DEEB\">, </span><span style=\"--0:#D7DBE0\">field</span></span><span style=\"--0:#D9F5DD;--1:#111111\">)</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">size_t</span><span style=\"--0:#D6DEEB;--1:#403F53\">)(</span><span style=\"--0:#7FDBCA;--1:#097174\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">((T</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">)-></span><span style=\"--0:#C5E478;--1:#3C63B3\">field</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C Macro#define offsetof(T, field) (size_t)(&#x26;((T*)0)->field)\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro usz @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">offset</span><span style=\"--0:#D6DEEB;--1:#403F53\">($Type, </span><span style=\"--0:#C5E478;--1:#3C63B3\">#field</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$Type</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> t </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> null;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (usz)(uptr)</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">t.</span><span style=\"--0:#C5E478;--1:#3C63B3\">#field</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 Macromacro usz @offset($Type, #field){    $Type* t = null;    return (usz)(uptr)&#x26;t.#field;}\"><div></div></button></div></figure></div>\n<h3 id=\"declaration-attributes\">Declaration attributes</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">PURE_INLINE</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">__attribute__</span><span style=\"--0:#D6DEEB;--1:#403F53\">((pure)) </span><span style=\"--0:#82AAFF;--1:#3C63B3\">__attribute__</span><span style=\"--0:#D6DEEB;--1:#403F53\">((always_inline))</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\"> </span><span style=\"--0:#D7DBE0\">x</span><span style=\"--0:#D6DEEB\">) PURE_INLINE { ... }</span></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C Macro#define PURE_INLINE __attribute__((pure)) __attribute__((always_inline))int foo(int x) PURE_INLINE { ... }\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">def @NoDiscardInline </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { @nodiscard @</span><span style=\"--0:#C792EA;--1:#8D46B4\">inline</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">) @NoDiscardInline { ... }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 Macrodef @NoDiscardInline = { @nodiscard @inline };fn int foo(int) @NoDiscardInline { ... }\"><div></div></button></div></figure></div>\n<h3 id=\"declaration-macros\">Declaration macros</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">DECLARE_LIST</span><span style=\"--0:#D9F5DD;--1:#111111\">(</span><span style=\"--0:#D7DBE0;--1:#403F53\">name</span><span style=\"--0:#D9F5DD;--1:#111111\">)</span><span style=\"--0:#D6DEEB;--1:#403F53\"> List name </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { .head </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">NULL</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Use:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">DECLARE_LIST</span><span style=\"--0:#D6DEEB;--1:#403F53\">(hello)</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C Macro#define DECLARE_LIST(name) List name = { .head = NULL };// Use:DECLARE_LIST(hello)\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">... currently no corresponding functionality ...</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 Macro... currently no corresponding functionality ...\"><div></div></button></div></figure></div>\n<h3 id=\"stringification\">Stringification</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">CHECK</span><span style=\"--0:#D9F5DD;--1:#111111\">(</span><span style=\"--0:#D7DBE0;--1:#403F53\">x</span><span style=\"--0:#D9F5DD;--1:#111111\">)</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">do</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">!</span><span style=\"--0:#D6DEEB;--1:#403F53\">x) </span><span style=\"--0:#82AAFF;--1:#3C63B3\">abort</span><span style=\"--0:#D6DEEB;--1:#403F53\">(#x); } </span><span style=\"--0:#C792EA;--1:#8D46B4\">while</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C Macro#define CHECK(x) do { if (!x) abort(#x); } while(0)\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 Macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">check</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">#expr</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">!</span><span style=\"--0:#C5E478;--1:#3C63B3\">#expr</span><span style=\"--0:#D6DEEB;--1:#403F53\">) </span><span style=\"--0:#82AAFF;--1:#3C63B3\">abort</span><span style=\"--0:#D6DEEB;--1:#403F53\">($</span><span style=\"--0:#82AAFF;--1:#3C63B3\">stringify</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">#expr</span><span style=\"--0:#D6DEEB;--1:#403F53\">));</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 Macromacro @check(#expr){    if (!#expr) abort($stringify(#expr));}\"><div></div></button></div></figure></div>\n<h2 id=\"top-level-evaluation\">Top level evaluation</h2>\n<p>Script languages, and also upcoming languages like <em>Jai</em>,\nusually have unbounded top level evaluation.\nThe flexibility of this style of meta programming has a trade-off in making the code more challenging to understand.</p>\n<p>In C3, top level compile time evaluation is limited to <code dir=\"auto\">@if</code> attributes to conditionally enable or\ndisable declarations. This makes the code easier to read, but at the cost of expressive power.</p>\n<h2 id=\"macro-declarations\">Macro declarations</h2>\n<p>A macro is defined using <code dir=\"auto\">macro &#x3C;name>(&#x3C;parameters>)</code>. All user defined macros use the @ symbol if they use the <code dir=\"auto\">$</code> or <code dir=\"auto\">#</code> parameters.</p>\n<p>The parameters have different sigils:\n<code dir=\"auto\">$</code> means compile time evaluated (constant expression or type). <code dir=\"auto\">#</code> indicates an expression that is not yet evaluated,\nbut is bound to where it was defined. <code dir=\"auto\">@</code> is required on macros that use <code dir=\"auto\">#</code> parameters or trailing macro bodies.</p>\n<p>A basic swap:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\"> </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">@checked $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">#a</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">#b</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#C5E478;--1:#3C63B3\">#b</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">#a</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">*></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">swap</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">#a</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#C5E478;--1:#3C63B3\">#b</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">var temp </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">#a</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">#a</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">#b</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">#b</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> temp;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<* @checked $defined(#a = #b, #b = #a)*>macro void @swap(#a, #b){    var temp = #a;    #a = #b;    #b = temp;}\"><div></div></button></div></figure></div>\n<p>This expands on usage like this:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">10</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">20</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">swap</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a, b);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Equivalent to:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">10</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">20</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __temp </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __temp;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void test(){    int a = 10;    int b = 20;    @swap(a, b);}// Equivalent to:fn void test(){    int a = 10;    int b = 20;    {        int __temp = a;        a = b;        b = __temp;    }}\"><div></div></button></div></figure></div>\n<p>Note the necessary <code dir=\"auto\">#</code>. Here is an incorrect swap and what it would expand to:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">badswap</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a, b)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">var temp </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> temp;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">10</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">20</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">badswap</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a, b);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Equivalent to:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">10</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">20</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __temp </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">__a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __b;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">__b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __temp;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro void badswap(a, b){    var temp = a;    a = b;    b = temp;}fn void test(){    int a = 10;    int b = 20;    badswap(a, b);}// Equivalent to:fn void test(){    int a = 10;    int b = 20;    {        int __a = a;        int __b = b;        int __temp = __a;        __a = __b;        __b = __temp;    }}\"><div></div></button></div></figure></div>\n<h2 id=\"macro-methods\">Macro methods</h2>\n<p>Similar to regular <em>methods</em> a macro may also be associated with a particular type:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">generate</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">self) { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo f;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">f</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">generate</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"struct Foo { ... }macro Foo.generate(&#x26;self) { ... }Foo f;f.generate();\"><div></div></button></div></figure></div>\n<p>See the chapter on <a href=\"/language-fundamentals/functions/\">functions</a> for more details.</p>\n<h2 id=\"capturing-a-trailing-block\">Capturing a trailing block</h2>\n<p>It is often useful for a macro to take a trailing compound statement as an argument. In C++ this pattern is usually expressed with a lambda, but in C3 this is completely inlined.</p>\n<p>To accept a trailing block, <code dir=\"auto\">; @name(param1, ...)</code> is placed after declaring the regular macro parameters.</p>\n<p>Here’s an example to illustrate its use:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\"> </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">A macro looping through a list of values, executing the body once</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\"> </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">every pass.</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\"> </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">@require $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">len</span><span style=\"--0:#D6DEEB;--1:#403F53\">) </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">])</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">*></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foreach</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a; @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">body</span><span style=\"--0:#D6DEEB;--1:#403F53\">(index, value))</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">for</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> i </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">; i </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">len</span><span style=\"--0:#D6DEEB;--1:#403F53\">; i</span><span style=\"--0:#C792EA;--1:#8D46B4\">++</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">body</span><span style=\"--0:#D6DEEB;--1:#403F53\">(i, </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[i]);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1.0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2.0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3.0</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foreach</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a; </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> index, </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> value)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">a[</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#ECC48D;--1:#9B504E\">] = </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%f</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, index, value);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">};</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Expands to code similar to:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1.0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2.0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3.0</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] __a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">for</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __i </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">; __i </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">__a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">len</span><span style=\"--0:#D6DEEB;--1:#403F53\">; __i</span><span style=\"--0:#C792EA;--1:#8D46B4\">++</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __index </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __i;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> __value </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">__a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[__i];</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">            </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">a[</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#ECC48D;--1:#9B504E\">] = </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%f</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, __index, __value);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<* A macro looping through a list of values, executing the body once every pass. @require $defined(a.len) &#x26;&#x26; $defined(a[0])*>macro @foreach(a; @body(index, value)){    for (int i = 0; i < a.len; i++)    {        @body(i, a[i]);    }}fn void test(){    double[] a = { 1.0, 2.0, 3.0 };    @foreach(a; int index, double value)    {        io::printfn(&#x22;a[%d] = %f&#x22;, index, value);    };}// Expands to code similar to:fn void test(){    double[] a = { 1.0, 2.0, 3.0 };    {        double[] __a = a;        for (int __i = 0; __i < __a.len; __i++)        {            int __index = __i;            double __value = __a[__i];            io::printfn(&#x22;a[%d] = %f&#x22;, __index, __value);        }    }}\"><div></div></button></div></figure></div>\n<h2 id=\"macros-returning-values\">Macros returning values</h2>\n<p>A macro may return a value, it is then considered an expression rather than a statement:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#82AAFF;--1:#3C63B3\">square</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">getTheSquare</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">square</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">getTheSquare2</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">square</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro square(x){    return x * x;}fn int getTheSquare(int x){    return square(x);}fn double getTheSquare2(double x){    return square(x);}\"><div></div></button></div></figure></div>\n<h2 id=\"calling-macros\">Calling macros</h2>\n<p>It’s perfectly fine for a macro to invoke another macro or itself.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#82AAFF;--1:#3C63B3\">square</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x) { </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x; }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#82AAFF;--1:#3C63B3\">squarePlusOne</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">square</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x) </span><span style=\"--0:#C792EA;--1:#8D46B4\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Expands to \"return x * x + 1;\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro square(x) { return x * x; }macro squarePlusOne(x){    return square(x) + 1; // Expands to &#x22;return x * x + 1;&#x22;}\"><div></div></button></div></figure></div>\n<p>The maximum recursion depth is limited to the <code dir=\"auto\">macro-recursion-depth</code> build setting.</p>\n<h2 id=\"macro-vaargs\">Macro vaargs</h2>\n<p>Macros support the typed vaargs used by C3 functions: <code dir=\"auto\">macro void foo(int... args)</code> and <code dir=\"auto\">macro void bar(args...)</code>\nbut it also supports a unique set of macro vaargs that look like C style vaargs: <code dir=\"auto\">macro void baz(...)</code></p>\n<p>To access the arguments there is a family of $va-* built-in functions to retrieve\nthe arguments:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#82AAFF;--1:#3C63B3\">compile_time_sum</span><span style=\"--0:#D6DEEB;--1:#403F53\">(...)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">var $x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">for</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (var $i </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">; $i </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $vacount; $i</span><span style=\"--0:#C792EA;--1:#8D46B4\">++</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$x </span><span style=\"--0:#C792EA;--1:#8D46B4\">+=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#C5E478;--1:#3C63B3\">vaconst</span><span style=\"--0:#D6DEEB;--1:#403F53\">[$i];</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$endfor</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">compile_time_sum</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">) </span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span><span style=\"--0:#809191;--1:#5E6578\"> // Will compile to $if 4 > 2</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$endif</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro compile_time_sum(...){    var $x = 0;    $for (var $i = 0; $i < $vacount; $i++)        $x += $vaconst[$i];    $endfor    return $x;}$if compile_time_sum(1, 3) > 2: // Will compile to $if 4 > 2    ...$endif\"><div></div></button></div></figure></div>\n<h3 id=\"vacount\"><code dir=\"auto\">$vacount</code></h3>\n<p>Returns the number of arguments.</p>\n<h3 id=\"vaarg\"><code dir=\"auto\">$vaarg</code></h3>\n<p>Returns the argument as a regular parameter. The argument is\nguaranteed to be evaluated once, even if the argument is used multiple times.</p>\n<h3 id=\"vaconst\"><code dir=\"auto\">$vaconst</code></h3>\n<p>Returns the argument as a compile time constant, this is suitable for\nplacing in a compile time variable or use for compile time evaluation,\ne.g. <code dir=\"auto\">$foo = $vaconst(1)</code>. This corresponds to <code dir=\"auto\">$</code> parameters.</p>\n<h3 id=\"vaexpr\"><code dir=\"auto\">$vaexpr</code></h3>\n<p>Returns the argument as an unevaluated expression. Multiple uses will\nevaluate the expression multiple times, this corresponds to <code dir=\"auto\">#</code> parameters.</p>\n<h3 id=\"vatype\"><code dir=\"auto\">$vatype</code></h3>\n<p>Returns the argument as a type. This corresponds to <code dir=\"auto\">$Type</code> style parameters,\ne.g. <code dir=\"auto\">$vatype(2) a = 2</code></p>\n<h3 id=\"vasplat\"><code dir=\"auto\">$vasplat</code></h3>\n<p><code dir=\"auto\">$vasplat</code> allows you to paste the varargs in the call into another call. For example,\nif the macro was called with values <code dir=\"auto\">\"foo\"</code> and <code dir=\"auto\">1</code>, the code <code dir=\"auto\">foo($vasplat)</code>, would become <code dir=\"auto\">foo(\"foo\", 1)</code>.\nYou can even extract provide a range as the argument: <code dir=\"auto\">$vasplat[2..4]</code> (in this case, this would paste in\narguments 2, 3 and 4).</p>\n<p>Nor is it limited to function arguments, you can also use it with initializers:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">] a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">5</span><span style=\"--0:#D6DEEB;--1:#403F53\">, $</span><span style=\"--0:#C5E478;--1:#3C63B3\">vasplat</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#FFFFFF;--1:#9B504E\">2..</span><span style=\"--0:#D6DEEB;--1:#403F53\">], </span><span style=\"--0:#F78C6C;--1:#AA0982\">77</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[*] a = { 5, $vasplat[2..], 77 };\"><div></div></button></div></figure></div>\n<h2 id=\"untyped-lists\">Untyped lists</h2>\n<p>Compile time variables may hold untyped lists. Such lists may be iterated over or\nimplicitly converted to initializer lists:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">var $a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foreach</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ($x : $a)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, $x);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$endforeach</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">] x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, x);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, $</span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">]);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Will print</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// 1</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// 2</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// [1, 2]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// 2</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"var $a = { 1, 2 };$foreach ($x : $a)    io::printfn(&#x22;%d&#x22;, $x);$endforeachint[2] x = $a;io::printfn(&#x22;%s&#x22;, x);io::printfn(&#x22;%s&#x22;, $a[1]);// Will print// 1// 2// [1, 2]// 2\"><div></div></button></div></figure></div>";

				const frontmatter = {"title":"Macros","description":"Macros","sidebar":{"order":83}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Generic Programming/macros.md";
				const url = undefined;
				function rawContent() {
					return "The macro capabilities of C3 reaches across several constructs: \nmacros, [generic functions, generic modules](/generic-programming/generics/), and [compile time variables](/generic-programming/compiletime/#compile-time-values) (prefixed with `$`), macro compile time execution (using `$if`, `$for`, `$foreach`, `$switch`) and attributes.\n\n## A quick comparison of C and C3 macros\n\n### Conditional compilation\n\n```c\n// C Macro\n#if defined(x) && Y > 3\nint z;\n#endif\n``` \n\n```c3\n// C3 Macro\n$if $defined(x) && Y > 3:\n    int z;\n$endif\n\n// or\nint z @if($defined(x) && Y > 3);\n```\n    \n\n### Macros\n```c\n// C Macro\n#define M(x) ((x) + 2)\n#define UInt32 unsigned int\n\n// Use:\nint y = M(foo() + 2);\nUInt32 b = y;\n```\n\n```c3\n// C3 Macro\nmacro m(x)\n{\n    return x + 2;\n}\ndef UInt32 = uint;\n\n// Use:\nint y = m(foo() + 2);\nUInt32 b = y;\n```\n\n### Dynamic scoping\n```c\n// C Macro\n#define Z() ptr->x->y->z\nint x = Z();\n```\n\n```c3\n// C3 Macro\n... currently no corresponding functionality ...\n```\n\n### Expression arguments\n\n\n```c\n// C Macro\n#define M(x, y) x = 2 * (y);\n...\nM(x, 3);\n```\n\n```c3\n// C3 Macro\nmacro @m(#x, y)\n{\n    #x = 2 * y;\n}\n...\n@m(x, 3);\n```\n\n### First class types\n\n```c\n// C Macro\n#define SIZE(T) (sizeof(T) + sizeof(int))\n```\n\n```c3\n// C3 Macro\nmacro size($Type)\n{\n    return $Type.sizeof + int.sizeof;\n}\n```\n\n### Trailing blocks for macros\n\n```\n// C Macro\n#define FOR_EACH(x, list) \\\nfor (x = (list); x; x = x->next)\n\n// Use:\nFoo *it;\nFOR_EACH(it, list) \n{\n    if (!process(it)) return;\n}\n```\n    \n```c3 \n// C3 Macro\nmacro @for_each(list; @body(it))\n{\n    for ($typeof(list) x = list; x; x = x.next)\n    {\n        @body(x);\n    }    \n}\n\n// Use:\n@for_each(list; Foo* x)\n{\n    if (!process(x)) return;\n}\n```\n\n### First class names\n\n```c\n// C Macro\n#define offsetof(T, field) (size_t)(&((T*)0)->field)\n```  \n\n```c3\n// C3 Macro\nmacro usz @offset($Type, #field)\n{\n    $Type* t = null;\n    return (usz)(uptr)&t.#field;\n}\n```\n\n### Declaration attributes\n\n```c\n// C Macro\n#define PURE_INLINE __attribute__((pure)) __attribute__((always_inline))\nint foo(int x) PURE_INLINE { ... }\n```\n\n```c3\n// C3 Macro\ndef @NoDiscardInline = { @nodiscard @inline };\nfn int foo(int) @NoDiscardInline { ... }\n```\n\n### Declaration macros\n```c\n// C Macro\n#define DECLARE_LIST(name) List name = { .head = NULL };\n// Use:\nDECLARE_LIST(hello)\n```  \n\n```c3\n// C3 Macro\n... currently no corresponding functionality ...\n```\n### Stringification\n\n```c\n// C Macro\n#define CHECK(x) do { if (!x) abort(#x); } while(0)\n``` \n\n```c3\n// C3 Macro\nmacro @check(#expr)\n{\n    if (!#expr) abort($stringify(#expr));\n}\n```\n\n## Top level evaluation\n\nScript languages, and also upcoming languages like *Jai*, \nusually have unbounded top level evaluation. \nThe flexibility of this style of meta programming has a trade-off in making the code more challenging to understand. \n\nIn C3, top level compile time evaluation is limited to `@if` attributes to conditionally enable or \ndisable declarations. This makes the code easier to read, but at the cost of expressive power.\n\n## Macro declarations\n\nA macro is defined using `macro <name>(<parameters>)`. All user defined macros use the @ symbol if they use the `$` or `#` parameters.\n\nThe parameters have different sigils:\n`$` means compile time evaluated (constant expression or type). `#` indicates an expression that is not yet evaluated, \nbut is bound to where it was defined. `@` is required on macros that use `#` parameters or trailing macro bodies.\n\nA basic swap:\n\n```c3\n<*\n @checked $defined(#a = #b, #b = #a)\n*>\nmacro void @swap(#a, #b)\n{\n    var temp = #a;\n    #a = #b;\n    #b = temp;\n}\n```\n\nThis expands on usage like this:\n\n```c3\nfn void test()\n{\n    int a = 10;\n    int b = 20;\n    @swap(a, b);\n}\n// Equivalent to:\nfn void test()\n{\n    int a = 10;\n    int b = 20;\n    {\n        int __temp = a;\n        a = b;\n        b = __temp;\n    }\n}\n```\n\nNote the necessary `#`. Here is an incorrect swap and what it would expand to:\n\n```c3\nmacro void badswap(a, b)\n{\n    var temp = a;\n    a = b;\n    b = temp;\n}\n\nfn void test()\n{\n    int a = 10;\n    int b = 20;\n    badswap(a, b);\n}\n// Equivalent to:\nfn void test()\n{\n    int a = 10;\n    int b = 20;\n    {\n        int __a = a;\n        int __b = b;\n        int __temp = __a;\n        __a = __b;\n        __b = __temp;\n    }\n}\n```\n\n## Macro methods\n\nSimilar to regular *methods* a macro may also be associated with a particular type:\n\n```c3\nstruct Foo { ... }\n\nmacro Foo.generate(&self) { ... }\nFoo f;\nf.generate();\n```\n\nSee the chapter on [functions](/language-fundamentals/functions/) for more details.\n\n## Capturing a trailing block\n\nIt is often useful for a macro to take a trailing compound statement as an argument. In C++ this pattern is usually expressed with a lambda, but in C3 this is completely inlined.\n\nTo accept a trailing block, `; @name(param1, ...)` is placed after declaring the regular macro parameters.\n\nHere's an example to illustrate its use:\n\n```c3\n<*\n A macro looping through a list of values, executing the body once\n every pass.\n\n @require $defined(a.len) && $defined(a[0])\n*>\nmacro @foreach(a; @body(index, value))\n{\n    for (int i = 0; i < a.len; i++)\n    {\n        @body(i, a[i]);\n    }\n}\n\nfn void test()\n{\n    double[] a = { 1.0, 2.0, 3.0 };\n    @foreach(a; int index, double value)\n    {\n        io::printfn(\"a[%d] = %f\", index, value);\n    };\n}\n\n// Expands to code similar to:\nfn void test()\n{\n    double[] a = { 1.0, 2.0, 3.0 };\n    {\n        double[] __a = a;\n        for (int __i = 0; __i < __a.len; __i++)\n        {\n            int __index = __i;\n            double __value = __a[__i];\n            io::printfn(\"a[%d] = %f\", __index, __value);\n        }\n    }\n}\n```\n\n## Macros returning values\n\nA macro may return a value, it is then considered an expression rather than a statement:\n\n```c3\nmacro square(x)\n{\n    return x * x;\n}\n\nfn int getTheSquare(int x)\n{\n    return square(x);\n}\n\nfn double getTheSquare2(double x)\n{\n    return square(x);\n}\n```\n\n## Calling macros\n\nIt's perfectly fine for a macro to invoke another macro or itself.\n\n```c3\nmacro square(x) { return x * x; }\n\nmacro squarePlusOne(x)\n{\n    return square(x) + 1; // Expands to \"return x * x + 1;\"\n}\n```\n\nThe maximum recursion depth is limited to the `macro-recursion-depth` build setting.\n\n## Macro vaargs\n\nMacros support the typed vaargs used by C3 functions: `macro void foo(int... args)` and `macro void bar(args...)` \nbut it also supports a unique set of macro vaargs that look like C style vaargs: `macro void baz(...)`\n\nTo access the arguments there is a family of $va-* built-in functions to retrieve\nthe arguments:\n\n```c3\nmacro compile_time_sum(...)\n{\n    var $x = 0;\n    $for (var $i = 0; $i < $vacount; $i++)\n        $x += $vaconst[$i];\n    $endfor\n    return $x;\n}\n$if compile_time_sum(1, 3) > 2: // Will compile to $if 4 > 2\n    ...\n$endif\n```\n\n### `$vacount`\n\nReturns the number of arguments.\n\n### `$vaarg`\n\nReturns the argument as a regular parameter. The argument is\nguaranteed to be evaluated once, even if the argument is used multiple times.\n\n### `$vaconst`\n\nReturns the argument as a compile time constant, this is suitable for\nplacing in a compile time variable or use for compile time evaluation,\ne.g. `$foo = $vaconst(1)`. This corresponds to `$` parameters.\n\n### `$vaexpr`\n\nReturns the argument as an unevaluated expression. Multiple uses will\nevaluate the expression multiple times, this corresponds to `#` parameters.\n\n### `$vatype`\n\nReturns the argument as a type. This corresponds to `$Type` style parameters, \ne.g. `$vatype(2) a = 2`\n\n### `$vasplat`\n\n`$vasplat` allows you to paste the varargs in the call into another call. For example,\nif the macro was called with values `\"foo\"` and `1`, the code `foo($vasplat)`, would become `foo(\"foo\", 1)`.\nYou can even extract provide a range as the argument: `$vasplat[2..4]` (in this case, this would paste in \narguments 2, 3 and 4).\n\nNor is it limited to function arguments, you can also use it with initializers:\n\n```c3\nint[*] a = { 5, $vasplat[2..], 77 };\n```\n\n## Untyped lists\n\nCompile time variables may hold untyped lists. Such lists may be iterated over or \nimplicitly converted to initializer lists:\n\n```c3\nvar $a = { 1, 2 };\n$foreach ($x : $a)\n    io::printfn(\"%d\", $x);\n$endforeach\nint[2] x = $a;\nio::printfn(\"%s\", x);\nio::printfn(\"%s\", $a[1]);\n// Will print\n// 1\n// 2\n// [1, 2]\n// 2\n```\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"a-quick-comparison-of-c-and-c3-macros","text":"A quick comparison of C and C3 macros"},{"depth":3,"slug":"conditional-compilation","text":"Conditional compilation"},{"depth":3,"slug":"macros","text":"Macros"},{"depth":3,"slug":"dynamic-scoping","text":"Dynamic scoping"},{"depth":3,"slug":"expression-arguments","text":"Expression arguments"},{"depth":3,"slug":"first-class-types","text":"First class types"},{"depth":3,"slug":"trailing-blocks-for-macros","text":"Trailing blocks for macros"},{"depth":3,"slug":"first-class-names","text":"First class names"},{"depth":3,"slug":"declaration-attributes","text":"Declaration attributes"},{"depth":3,"slug":"declaration-macros","text":"Declaration macros"},{"depth":3,"slug":"stringification","text":"Stringification"},{"depth":2,"slug":"top-level-evaluation","text":"Top level evaluation"},{"depth":2,"slug":"macro-declarations","text":"Macro declarations"},{"depth":2,"slug":"macro-methods","text":"Macro methods"},{"depth":2,"slug":"capturing-a-trailing-block","text":"Capturing a trailing block"},{"depth":2,"slug":"macros-returning-values","text":"Macros returning values"},{"depth":2,"slug":"calling-macros","text":"Calling macros"},{"depth":2,"slug":"macro-vaargs","text":"Macro vaargs"},{"depth":3,"slug":"vacount","text":"$vacount"},{"depth":3,"slug":"vaarg","text":"$vaarg"},{"depth":3,"slug":"vaconst","text":"$vaconst"},{"depth":3,"slug":"vaexpr","text":"$vaexpr"},{"depth":3,"slug":"vatype","text":"$vatype"},{"depth":3,"slug":"vasplat","text":"$vasplat"},{"depth":2,"slug":"untyped-lists","text":"Untyped lists"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
