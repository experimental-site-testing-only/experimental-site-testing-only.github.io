const id = "Previous Versions/v0_6_8/Language Fundamentals/modules.md";
						const collection = "docs";
						const slug = "previous-versions/v0_6_8/language-fundamentals/modules";
						const body = "\n\nC3 groups functions, types, variables and macros into namespaces called modules. When doing builds, any C3 file must start with the `module` keyword, specifying the module. When compiling single files, the module is not needed and the module name is assumed to be the file name, converted to lower case, with any invalid characters replaced by underscore (`_`).\n\nA module can consist of multiple files, e.g.\n\n`file_a.c3`\n\n```c3\nmodule foo;\n\n/* ... */\n```\n\n`file_b.c3`\n\n```c3\nmodule foo;\n\n/* ... */\n```\n\n`file_c.c3`\n\n```c3\nmodule bar;\n\n/* ... */\n```\n\nHere `file_a.c3` and `file_b.c3` belong to the same module, **foo** while `file_c.c3` belongs to to **bar**.\n\n## Details\n\nSome details about the C3 module system:\n\n- Modules can be arbitrarily nested, e.g. `module foo::bar::baz;` to create the sub module baz in the sub module `bar` of the module `foo`.\n- Module names must be alphanumeric lower case letters plus the underscore character: `_`.\n- Module names are limited to 31 characters.\n- Modules may be spread across multiple files.\n- A single file may have multiple module declarations.\n- Each declaration of a distinct module is called a *module section*.\n\n## Importing Modules\n\nModules are imported using the `import` statement. Imports always *recursively import* sub-modules. Any module\nwill automatically import all other modules with the same parent module.\n\n`foo.c3`\n\n```c3\nmodule some::foo;\nfn void test() {}\n```\n\n`bar.c3`\n\n```c3\nmodule bar;\nimport some;\n// import some::foo; <- not needed, as it is a sub module to \"some\"\nfn void test()\n{\n    foo::test();\n    // some::foo::test() also works.\n}\n```\n\nIn some cases there may be ambiguities, in which case the full path can be used to resolve the ambiguity:\n\n`abc.c3`\n\n```c3\nmodule abc;\nstruct Context\n{\n    int a;\n}\n```\n\n`de.c3`\n\n```c3\nmodule de;\nstruct Context\n{\n    void* ptr;\n}\n```\n\n`test.c3`\n\n```c3\nmodule test1;\nimport de, abc;\n// Context c = {} <- ambiguous\nabc::Context c = {};\n```\n\n## Implicit Imports\n\nThe module system will also implicitly import:\n\n1. The `std::core` module (and sub modules).\n2. Any other module sharing the same top module. E.g. the module `foo::abc` will implicitly also import modules `foo` and `foo::cde` if they exist.\n\n## Visibility\n\nAll files in the same module share the same global declaration namespace. By default a symbol is visible to all other modules.\nTo make a symbol only visible inside the module, use the `@private` attribute.\n\n```c3\nmodule foo;\n\nfn void init() { .. }\n\nfn void open() @private { .. }\n```\n\nIn this example, the other modules can use the init() function after importing foo, but only files in the foo module can use open(), as it is specified as `private`.\n\nIt's possible to further restrict visibility: `@local` works like `@private` except it's only visible in the\nlocal context.\n\n```c3\n// File foo.c3\nmodule foo;\nfn void abc() @private { }\nfn void de() @local { }\n\n// File foo2.c3\nmodule foo;\nfn void test()\n{\n    abc(); // Access of private in the same module is ok\n    // de(); <- Error: function is local to foo.c3\n}\n```\n\n## Overriding Symbol Visibility Rules\n\nBy using `import <module> @public`, it's possible to access another moduleÂ´s private symbols.\nMany other module systems have hierarchal visibility rules, but the `import @public` feature allows\nvisibility to be manipulated in a more ad-hoc manner without imposing hard rules.\n\nFor example, you may provide a library with two modules: \"mylib::net\" and \"mylib::file\" - which both use functions\nand types from a common \"mylib::internals\" module. The two libraries use `import mylib::internals @public`\nto access this module's private functions and type. To an external user of the library, the \"mylib::internals\"\ndoes not seem to exist, but inside of your library you use it as a shared dependency.\n\nA simple example:\n\n```c3\n// File a.c3\nmodule a;\n\nfn void a_function() @private { ... }\n\n// File b.c3\nmodule b;\n\nfn void b_function() @private { ... }\n\n// File c.c3\nmodule c;\nimport a;\nimport b @public;\n\nfn void test()\n{\n    // Error! a_function() is private\n    a::a_function(); \n\n    // Allowed since `import b @public` allowed `b`\n    // to \"public\" in this context.\n    b::b_function(); \n}\n```\n\n*Note: `@local` visibility cannot be overridden using a \"@public\" import.*\n\n## Changing The Default Visibility\n\nIn a normal module, global declarations will be public by default. If some other\nvisibility is desired, it's possible to declare `@private` or `@local` after the module name.\nIt will affect all declaration in the same section.\n\n```c3\nmodule foo @private;\n\nfn void ab_private() { ... } // Private\n\nmodule foo;\n\nfn void ab_public() { ... } // Public\n\nmodule bar;\nimport foo;\n\nfn void test()\n{\n    foo::ab_public(); // Works\n    // foo::ab_private(); <- Error, private method\n}\n```\n\nIf the default visibility is `@private` or `@local`, using `@public` sets the visibility to public:\n\n```c3\nmodule foo @private;\n\nfn void ab_private() { ... }        // Private\nfn void ab_public() @public { ... } // Public\n```\n\n## Linker Visibility and Exports\n\nA function or global prefixed `extern` will be assumed to be linked in later.\nAn \"extern\" function may not have a body, and global variables are prohibited\nfrom having an init expression.\n\nThe attribute `@export` explicitly marks a function as being exported when\ncreating a (static or dynamic) library. It can also change the linker name of\nthe function.\n\n## Using Functions and Types From Other Modules\n\nAs a rule, functions, macros, constants, variables and types in the same module do not need any namespace prefix. For imported modules the following rules hold:\n\n1. Functions, macros, constants and variables require *at least* the (sub-) module name.\n2. Types do not require the module name unless the name is ambiguous.\n3. In case of ambiguity, only so many levels of module names are needed as to make the symbol unambiguous.\n\n\n```c3\n// File a.c3\n\nmodule a;\n\nstruct Foo { ... }\nstruct Bar { ... }\nstruct TheAStruct { ... }\n\nfn void anAFunction() { ... }\n\n// File b.c3\n\nmodule b;\n\nstruct Foo { ... }\nstruct Bar { ... }\nstruct TheBStruct { ... }\n\nfn void aBFunction() { ... }\n\n// File c.c3\nmodule c;\nimport a, b;\n\nstruct TheCStruct { ... }\nstruct Bar { ... }\n\nfn void aCFunction() { ... }\n\nfn void test()\n{\n    TheAStruct stA;\n    TheBStruct stB;\n    TheCStruct stC;\n    // Name required to avoid ambiguity;\n    b::Foo stBFoo;\n    // Will always pick the current module's\n    // name.\n    Bar bar;\n    // Namespace required:\n    a::aAFunction();\n    b::aBFunction();\n    // A local symbol does not require it:\n    aCFunction();\n}\n```\n\nThis means that the rule for the common case can be summarized as\n\n> Types are used without prefix; functions, variables, macros and constants are prefixed with the sub module name.\n\n\n## Module Sections\n\nA single file may have multiple module declarations, even for the same module. This allows us to write\nfor example:\n\n```c3\n// File foo.c3\nmodule foo;\nfn int hello_world()\n{\n    return my_hello_world();\n}\n\nmodule foo @private;\nimport std::io;         // The import is only visible in this section.\nfn int my_hello_world() // @private by default\n{\n    io::printn(\"Hello, world\\n\");\n    return 0;\n}\n\nmodule foo @test;\nfn void test_hello() // @test by default\n{\n    assert(hello_world() == 0);\n}\n```\n\n## Versioning and Dynamic Inclusion\n\n_NOTE: This feature may significantly change._\n\nWhen including *dynamic* libraries, it is possible to use optional functions and globals. This is done using the\n`@dynamic` attribute.\n\nAn example library could have this:\n\n`dynlib.c3i`\n\n```c3\nmodule dynlib;\nfn void do_something() @dynamic(4.0)\nfn void do_something_else() @dynamic(0, 5.0)\nfn void do_another_thing() @dynamic(0, 2.5)\n```\n\nImporting the dynamic library and setting the base version to 4.5 and minimum version to 3.0, we get the following:\n\n`test.c3`\n\n```c3\nimport dynlib;\nfn void test()\n{\n    if (@available(dynlib::do_something))\n    {\n        dynlib::do_something();\n    }\n    else\n    {\n        dynlib::do_someting_else();\n    }\n}\n```\n\nIn this example the code would run `do_something` if available \n(that is, when the dynamic library is 4.0 or higher), or\nfallback to `do_something_else` otherwise.\n\nIf we tried to conditionally add something not available in the \ncompilation itself, that is a compile time error:\n\n```c3\nif (@available(dynlib::do_another_thing))\n{\n    // Error: This function is not available with 3.0\n    dynlib::do_another_thing(); \n}\n```\n\nVersionless dynamic loading is also possible:\n\n`maybe_dynlib.c3i`\n\n```c3\nmodule maybe_dynlib;\nfn void testme() @dynamic;\n```\n\n`test2.c3`\n\n```c3\nimport maybe_dynlib;\nfn void testme2()\n{\n    if (@available(maybe_dynlib::testme))\n    {\n        dynlib::testme();\n    }\n}\n```\n\nThis allows things like optionally loading dynamic libraries on the \nplatforms where this is available.\n\n## Textual Includes\n\n### `$include`\n\nIt's sometimes useful to include an entire file, doing so employs the `$include` function.\nIncludes are only valid at the top level.\n\n\nFile `Foo.c3`\n```c3\nmodule foo;\n\n$include(\"Foo.x\");\n\nfn void test()\n{\n    io::printf(\"%d\", testX(2));\n}\n```\n\nFile `Foo.x`\n```c3\nfn testX(int i)\n{\n    return i + 1;\n}\n```\n\nThe result is as if `Foo.c3` contained the following:\n\n```c3\nmodule foo;\n\nfn testX(int i)\n{\n    return i + 1;\n}\n\nfn void test()\n{\n    io::printf(\"%d\", testX(2));\n}\n```\n\nThe include may use an absolute or relative path, the relative path is always relative to the source file in which the include appears.\n\nNote that to use it, the **trust level** of the compiler must be set to at least 2 with\nthe `--trust` option (i.e. use `--trust=include` or `--trust=full` from the command line).\n\n### `$exec`\n\nAn alternative to `$include` is `$exec` which is similar to include, but instead includes the output of an external\nprogram as the included text.\n\nAn example:\n```c3\nimport std::io;\n\n// On Linux or MacOS this will insert 'String a = \"Hello world!\";'\n$exec(\"echo\", { \"String a = \\\\\\\"Hello world!\\\\\\\"\\\\;\" });\n\nfn void main()\n{\n\tio::printn(a);\n}\n```\n\nUsing `$exec` requires **full trust level**, which is enabled with `--trust=full` from the command line.\n\n`$exec` will by default run from the `/scripts` directory for projects, for non-project builds,\nthe current directory is used as well.\n\n#### `$exec` Scripting\n\n`$exec` allows a special scripting mode, where one or more C3 files are compiled on the fly and\nrun by `$exec`.\n\n```c\nimport std::io;\n\n// Compile foo.c3 and bar.c3 in the /scripts directory, invoke the resulting binary\n// with the argument 'test'\n$exec(\"foo.c3;bar.c3\", { \"test\" });\n\nfn void main()\n{\n\t...\n}\n```\n\n## Non-Recursive Imports\n\nIn specific circumstances you only wish to import a module *without* its submodules.\nThis can be helpful in certain situations where otherwise unnecessary name-collisions\nwould occur, but should not be used in the general case.\n\nThe syntax for non-recursive imports is `import <module_name> @norecurse;` for example:\n```c3\n// Non-recursive import\nimport mylib @norecurse; \n\n// Normal import\nimport mylib; \n```\n\nFor example only importing \"mylib\" into \"my_code\" and not wishing to import \"submod\".\n\n```text\nmy_code\nâââ mylib\n    âââ submod\n```\n\n```c3\nmodule mylib;\nimport std::io;\nfn void only_want_this()\n{\n    io::printn(\"only_want_this\");\n}\n\nmodule mylib::submod;\nimport std::io;\nfn void undesired_fn()\n{\n    io::printn(\"undesired_fn\");\n}\n\nmodule my_code;\n// Using Non-recursive import undesired_fn not found\nimport mylib @norecurse; \n\n// Using Recursive import undesired_fn is found\n// import mylib;\n\nfn void main()\n{\n    mylib::only_want_this();\n    submod::undesired_fn(); // This should error\n}\n```\n\n:::note \nYou can import multiple modules in one line:\n```c3\nimport lib1, lib2;\n```\n`@norecurse` can be applied to one of those imports individually:\n\n```c3\nimport lib1 @norecurse, lib2;\n```\nHere only `lib1` is imported non-recursively and `lib2` is imported normally, recursively.\n:::\n";
						const data = {title:"Modules",description:"Modules",editUrl:true,head:[],template:"doc",sidebar:{order:46,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Language Fundamentals/modules.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
