import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<h2 id=\"working-with-the-type-of-any-at-runtime\">Working with the type of <code dir=\"auto\">any</code> at runtime.</h2>\n<p>The <code dir=\"auto\">any</code> type is recommended for writing code that is polymorphic at runtime where macros are not appropriate.\nIt can be thought of as a typed <code dir=\"auto\">void*</code>.</p>\n<p>An <code dir=\"auto\">any</code> can be created by assigning any pointer to it. You can then query the <code dir=\"auto\">any</code> type for the typeid of\nthe enclosed type (the type the pointer points to) using the <code dir=\"auto\">type</code> field.</p>\n<p>This allows switching over the typeid, using a normal switch:</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C5E478;--1:#3C63B3\">my_any</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">type</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">typeid</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Bar:</span><span style=\"--0:#809191;--1:#5E6578\"> // .typeid can be elided</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"switch (my_any.type){    case Foo.typeid:        ...    case Bar: // .typeid can be elided        ...}\"><div></div></button></div></figure></div>\n<p>Sometimes one needs to manually construct an any-pointer, which\nis typically done using the <code dir=\"auto\">any_make</code> function: <code dir=\"auto\">any_make(ptr, type)</code>\nwill create an <code dir=\"auto\">any</code> pointing to <code dir=\"auto\">ptr</code> and with typeid <code dir=\"auto\">type</code>.</p>\n<p>Since the runtime <code dir=\"auto\">typeid</code> is available, we can query for any runtime <code dir=\"auto\">typeid</code> property available\nat runtime, for example the size, e.g. <code dir=\"auto\">my_any.type.sizeof</code>. This allows us to do a lot of work\non with the enclosed data without knowing the details of its type.</p>\n<p>For example, this would make a copy of the data and place it in the variable <code dir=\"auto\">any_copy</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">void*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> data </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">malloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#FAF39F;--1:#111111\">type</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">mem::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">copy</span><span style=\"--0:#D6DEEB;--1:#403F53\">(data, </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">ptr</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#FAF39F;--1:#111111\">type</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">any any_copy </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">any_make</span><span style=\"--0:#D6DEEB;--1:#403F53\">(data, </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">type</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"void* data = malloc(a.type.sizeof);mem::copy(data, a.ptr, a.type.sizeof);any any_copy = any_make(data, a.type);\"><div></div></button></div></figure></div>\n<h2 id=\"variable-argument-functions-with-implicit-any\">Variable argument functions with implicit <code dir=\"auto\">any</code></h2>\n<p>Regular typed varargs are of a single type, e.g. <code dir=\"auto\">fn void abc(int x, double... args)</code>.\nIn order to take variable functions that are of multiple types, <code dir=\"auto\">any</code> may be used.\nThere are two variants:</p>\n<h3 id=\"explicit-any-vararg-functions\">Explicit <code dir=\"auto\">any</code> vararg functions</h3>\n<p>This type of function has a format like <code dir=\"auto\">fn void vaargfn(int x, any... args)</code>. Because only\npointers may be passed to an <code dir=\"auto\">any</code>, the arguments must explicitly be pointers (e.g. <code dir=\"auto\">vaargfn(2, &#x26;b, &#x26;&#x26;3.0)</code>).</p>\n<p>While explicit, this may be somewhat less user-friendly than implicit vararg functions:</p>\n<h3 id=\"implicit-any-vararg-functions\">Implicit <code dir=\"auto\">any</code> vararg functions</h3>\n<p>The implicit <code dir=\"auto\">any</code> vararg function has instead a format like <code dir=\"auto\">fn void vaanyfn(int x, args...)</code>.\nCalling this function will implicitly cause taking the pointer of the values (so for\nexample in the call <code dir=\"auto\">vaanyfn(2, b, 3.0)</code>, what is actually passed are <code dir=\"auto\">&#x26;b</code> and <code dir=\"auto\">&#x26;&#x26;3.0</code>).</p>\n<p>Because this passes values implicitly by reference, care must be taken <em>not</em> to mutate any\nvalues passed in this manner. Doing so would very likely break user expectations.</p>\n<h2 id=\"interfaces\">Interfaces</h2>\n<p>Most statically typed object-oriented languages implements extensibility using vtables. In C, and by extension\nC3, this is possible to emulate by passing around structs containing list of function pointers in addition to the data.</p>\n<p>While this is efficient and often the best solution, it puts certain assumptions on the code and makes interfaces\nmore challenging to evolve over time.</p>\n<p>As an alternative there are languages (such as Objective-C) which instead use message passing to dynamically typed\nobjects, where the availability of a certain functionality may be queried at runtime.</p>\n<p>C3 provides this latter functionality over the <code dir=\"auto\">any</code> type using <em>interfaces</em>.</p>\n<h3 id=\"defining-an-interface\">Defining an interface</h3>\n<p>The first step is to define an interface:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">interface MyName</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">fn String </span><span style=\"--0:#82AAFF;--1:#3C63B3\">myname</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"interface MyName{    fn String myname();}\"><div></div></button></div></figure></div>\n<p>While <code dir=\"auto\">myname</code> will behave as a method, we declare it without type. Note here that unlike normal methods we leave\nout the first “self”, argument.</p>\n<h3 id=\"implementing-the-interface\">Implementing the interface</h3>\n<p>To declare that a type implements an interface, add it after the type name:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">Baz</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (MyName)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Note how the first argument differs from the interface.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn String </span><span style=\"--0:#C5E478;--1:#3C63B3\">Baz</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">myname</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Baz</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> self) @dynamic</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">I am Baz!</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"struct Baz (MyName){    int x;}// Note how the first argument differs from the interface.fn String Baz.myname(Baz* self) @dynamic{    return &#x22;I am Baz!&#x22;;}\"><div></div></button></div></figure></div>\n<p>If a type declares an interface but does not implement its methods, then that is compile time error.\nA type may implement multiple interfaces, by placing them all inside of <code dir=\"auto\">()</code> e.g. <code dir=\"auto\">struct Foo (VeryOptional, MyName) { ... }</code></p>\n<p>A limitation is that only user-defined types may declare they are implementing interfaces. To make existing types\nimplement interfaces is possible but does not provide compile time checks.</p>\n<p>One of the interfaces available in the standard library is Printable, which contains <code dir=\"auto\">to_format</code> and <code dir=\"auto\">to_new_string</code>.\nIf we implemented it for our struct above it might look like this:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn String </span><span style=\"--0:#C5E478;--1:#3C63B3\">Baz</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">to_new_string</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Baz baz, Allocator allocator) @dynamic</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> string::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printf</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Baz(</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#ECC48D;--1:#9B504E\">)</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#C5E478;--1:#3C63B3\">baz</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">, allocator: allocator);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn String Baz.to_new_string(Baz baz, Allocator allocator) @dynamic{    return string::printf(&#x22;Baz(%d)&#x22;, baz.x, allocator: allocator);}\"><div></div></button></div></figure></div>\n<h3 id=\"dynamic-methods\"><code dir=\"auto\">@dynamic</code> methods</h3>\n<p>A method must be declared <code dir=\"auto\">@dynamic</code> to implement an interface, but a method may also be declared <code dir=\"auto\">@dynamic</code> <em>without</em>\nthe type declaring it implements a particular interface. For example, this allows us to write:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// This will make \"int\" satisfy the MyName interface</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn String </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">myname</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int*</span><span style=\"--0:#D6DEEB;--1:#403F53\">) @dynamic</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">I am int!</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// This will make &#x22;int&#x22; satisfy the MyName interfacefn String int.myname(int*) @dynamic{    return &#x22;I am int!&#x22;;}\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">@dynamic</code> methods have their reference retained in the runtime code and can also be searched for at runtime and invoked\nfrom the <code dir=\"auto\">any</code> type.</p>\n<h3 id=\"referring-to-an-interface-by-pointer\">Referring to an interface by pointer</h3>\n<p>An interface e.g. <code dir=\"auto\">MyName</code>, can be cast back and forth to <code dir=\"auto\">any</code>, but only types which\nimplement the interface completely may implicitly be cast to the interface.</p>\n<p>So for example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Bob b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0.5</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> i </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">MyName a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">b;</span><span style=\"--0:#809191;--1:#5E6578\">          // Valid, Bob implements MyName.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// MyName c = &#x26;d;       // Error, double does not implement MyName.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">MyName c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (MyName)</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">d;</span><span style=\"--0:#809191;--1:#5E6578\">  // Would break at runtime as double doesn't implement MyName</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// MyName z = &#x26;i;       // Error, implicit conversion because int doesn't explicitly implement it.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">MyName</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> z </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (MyName)</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">i;</span><span style=\"--0:#809191;--1:#5E6578\"> // Explicit conversion works and is safe at runtime if int implements \"myname\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Bob b = { 1 };double d = 0.5;int i = 3;MyName a = &#x26;b;          // Valid, Bob implements MyName.// MyName c = &#x26;d;       // Error, double does not implement MyName.MyName c = (MyName)&#x26;d;  // Would break at runtime as double doesn&#x27;t implement MyName// MyName z = &#x26;i;       // Error, implicit conversion because int doesn&#x27;t explicitly implement it.MyName* z = (MyName)&#x26;i; // Explicit conversion works and is safe at runtime if int implements &#x22;myname&#x22;\"><div></div></button></div></figure></div>\n<h3 id=\"calling-dynamic-methods\">Calling dynamic methods</h3>\n<p>Methods implementing interfaces are like normal methods, and if called directly, they are just normal function calls. The\ndifference is that they may be invoked through the interface:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">whoareyou</span><span style=\"--0:#D6DEEB;--1:#403F53\">(MyName a)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">myname</span><span style=\"--0:#D6DEEB;--1:#403F53\">());</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void whoareyou(MyName a){    io::printn(a.myname());}\"><div></div></button></div></figure></div>\n<p>If we have an optional method we should first check that it is implemented:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">do_something</span><span style=\"--0:#D6DEEB;--1:#403F53\">(VeryOptional z)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#C5E478;--1:#3C63B3\">z</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">do_something</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C5E478;--1:#3C63B3\">z</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">do_something</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, null);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void do_something(VeryOptional z){    if (&#x26;z.do_something)    {        z.do_something(1, null);    }}\"><div></div></button></div></figure></div>\n<p>We first query if the method exists on the value. If it does we actually run it.</p>\n<p>Here is another example, showing how the correct function will be called depending on type, checking\nfor methods on an <code dir=\"auto\">any</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">whoareyou2</span><span style=\"--0:#D6DEEB;--1:#403F53\">(any a)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Query if the function exists</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">!&#x26;</span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">myname</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">I don't know who I am.</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Dynamically call the function</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(((MyName)a).</span><span style=\"--0:#82AAFF;--1:#3C63B3\">myname</span><span style=\"--0:#D6DEEB;--1:#403F53\">());</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> i;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Bob bob;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">any a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">i;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">whoareyou2</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a);</span><span style=\"--0:#809191;--1:#5E6578\"> // Prints \"I am int!\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">d;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">whoareyou2</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a);</span><span style=\"--0:#809191;--1:#5E6578\"> // Prints \"I don't know who I am.\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">bob;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">whoareyou2</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a);</span><span style=\"--0:#809191;--1:#5E6578\"> // Prints \"I am Bob!\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void whoareyou2(any a){    // Query if the function exists    if (!&#x26;a.myname)    {        io::printn(&#x22;I don&#x27;t know who I am.&#x22;);        return;    }    // Dynamically call the function    io::printn(((MyName)a).myname());}fn void main(){    int i;    double d;    Bob bob;    any a = &#x26;i;    whoareyou2(a); // Prints &#x22;I am int!&#x22;    a = &#x26;d;    whoareyou2(a); // Prints &#x22;I don&#x27;t know who I am.&#x22;    a = &#x26;bob;    whoareyou2(a); // Prints &#x22;I am Bob!&#x22;}\"><div></div></button></div></figure></div>\n<h3 id=\"reflection-invocation\">Reflection invocation</h3>\n<p><em>This functionality is not yet implemented and may see syntax changes</em></p>\n<p>It is possible to retrieve any <code dir=\"auto\">@dynamic</code> function by name and invoke it:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">alias VoidMethodFn </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">void*</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test_something</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">self) @dynamic</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Testing: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">self);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> z </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">321</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">any a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">z;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">VoidMethodFn test_func </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">reflect</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">test_something</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test_func</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a);</span><span style=\"--0:#809191;--1:#5E6578\"> // Will print \"Testing: 321\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"alias VoidMethodFn = fn void(void*);fn void* int.test_something(&#x26;self) @dynamic{    io::printfn(&#x22;Testing: %d&#x22;, *self);}fn void main(){    int z = 321;    any a = &#x26;z;    VoidMethodFn test_func = a.reflect(&#x22;test_something&#x22;);    test_func(a); // Will print &#x22;Testing: 321&#x22;}\"><div></div></button></div></figure></div>\n<p>This feature allows methods to be linked up at runtime.</p>";

				const frontmatter = {"title":"Interfaces and Any Type","description":"Interfaces and Any Type","sidebar":{"order":80}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Generic Programming/anyinterfaces.md";
				const url = undefined;
				function rawContent() {
					return "\n## Working with the type of `any` at runtime.\n\nThe `any` type is recommended for writing code that is polymorphic at runtime where macros are not appropriate.\nIt can be thought of as a typed `void*`.\n\nAn `any` can be created by assigning any pointer to it. You can then query the `any` type for the typeid of\nthe enclosed type (the type the pointer points to) using the `type` field.\n\nThis allows switching over the typeid, using a normal switch:\n\n```c3\nswitch (my_any.type)\n{\n    case Foo.typeid:\n        ...\n    case Bar: // .typeid can be elided\n        ...\n}\n```\n\nSometimes one needs to manually construct an any-pointer, which\nis typically done using the `any_make` function: `any_make(ptr, type)`\nwill create an `any` pointing to `ptr` and with typeid `type`.\n\nSince the runtime `typeid` is available, we can query for any runtime `typeid` property available\nat runtime, for example the size, e.g. `my_any.type.sizeof`. This allows us to do a lot of work\non with the enclosed data without knowing the details of its type.\n\nFor example, this would make a copy of the data and place it in the variable `any_copy`:\n```c3\nvoid* data = malloc(a.type.sizeof);\nmem::copy(data, a.ptr, a.type.sizeof);\nany any_copy = any_make(data, a.type);\n```\n\n## Variable argument functions with implicit `any`\n\nRegular typed varargs are of a single type, e.g. `fn void abc(int x, double... args)`.\nIn order to take variable functions that are of multiple types, `any` may be used.\nThere are two variants:\n\n### Explicit `any` vararg functions\n\nThis type of function has a format like `fn void vaargfn(int x, any... args)`. Because only\npointers may be passed to an `any`, the arguments must explicitly be pointers (e.g. `vaargfn(2, &b, &&3.0)`).\n\nWhile explicit, this may be somewhat less user-friendly than implicit vararg functions:\n\n### Implicit `any` vararg functions\n\nThe implicit `any` vararg function has instead a format like `fn void vaanyfn(int x, args...)`.\nCalling this function will implicitly cause taking the pointer of the values (so for\nexample in the call `vaanyfn(2, b, 3.0)`, what is actually passed are `&b` and `&&3.0`).\n\nBecause this passes values implicitly by reference, care must be taken *not* to mutate any\nvalues passed in this manner. Doing so would very likely break user expectations.\n\n## Interfaces\n\nMost statically typed object-oriented languages implements extensibility using vtables. In C, and by extension\nC3, this is possible to emulate by passing around structs containing list of function pointers in addition to the data.\n\nWhile this is efficient and often the best solution, it puts certain assumptions on the code and makes interfaces\nmore challenging to evolve over time.\n\nAs an alternative there are languages (such as Objective-C) which instead use message passing to dynamically typed\nobjects, where the availability of a certain functionality may be queried at runtime.\n\nC3 provides this latter functionality over the `any` type using *interfaces*.\n\n### Defining an interface\n\nThe first step is to define an interface:\n\n```c3\ninterface MyName\n{\n    fn String myname();\n}\n```\n\nWhile `myname` will behave as a method, we declare it without type. Note here that unlike normal methods we leave\nout the first \"self\", argument.\n\n### Implementing the interface\n\nTo declare that a type implements an interface, add it after the type name:\n\n```c3\nstruct Baz (MyName)\n{\n    int x;\n}\n\n// Note how the first argument differs from the interface.\nfn String Baz.myname(Baz* self) @dynamic\n{\n    return \"I am Baz!\";\n}\n```\n\nIf a type declares an interface but does not implement its methods, then that is compile time error.\nA type may implement multiple interfaces, by placing them all inside of `()` e.g. `struct Foo (VeryOptional, MyName) { ... }`\n\nA limitation is that only user-defined types may declare they are implementing interfaces. To make existing types\nimplement interfaces is possible but does not provide compile time checks.\n\nOne of the interfaces available in the standard library is Printable, which contains `to_format` and `to_new_string`.\nIf we implemented it for our struct above it might look like this:\n\n```c3\nfn String Baz.to_new_string(Baz baz, Allocator allocator) @dynamic\n{\n    return string::printf(\"Baz(%d)\", baz.x, allocator: allocator);\n}\n```\n\n### `@dynamic` methods\n\nA method must be declared `@dynamic` to implement an interface, but a method may also be declared `@dynamic` *without*\nthe type declaring it implements a particular interface. For example, this allows us to write:\n\n```c3\n// This will make \"int\" satisfy the MyName interface\nfn String int.myname(int*) @dynamic\n{\n    return \"I am int!\";\n}\n```\n\n`@dynamic` methods have their reference retained in the runtime code and can also be searched for at runtime and invoked\nfrom the `any` type.\n\n### Referring to an interface by pointer\n\nAn interface e.g. `MyName`, can be cast back and forth to `any`, but only types which\nimplement the interface completely may implicitly be cast to the interface.\n\nSo for example:\n\n```c3\nBob b = { 1 };\ndouble d = 0.5;\nint i = 3;\nMyName a = &b;          // Valid, Bob implements MyName.\n// MyName c = &d;       // Error, double does not implement MyName.\nMyName c = (MyName)&d;  // Would break at runtime as double doesn't implement MyName\n// MyName z = &i;       // Error, implicit conversion because int doesn't explicitly implement it.\nMyName* z = (MyName)&i; // Explicit conversion works and is safe at runtime if int implements \"myname\"\n```\n\n### Calling dynamic methods\n\nMethods implementing interfaces are like normal methods, and if called directly, they are just normal function calls. The\ndifference is that they may be invoked through the interface:\n\n```c3\nfn void whoareyou(MyName a)\n{\n    io::printn(a.myname());\n}\n```\n\nIf we have an optional method we should first check that it is implemented:\n\n```c3\nfn void do_something(VeryOptional z)\n{\n    if (&z.do_something)\n    {\n        z.do_something(1, null);\n    }\n}\n```\n\nWe first query if the method exists on the value. If it does we actually run it.\n\nHere is another example, showing how the correct function will be called depending on type, checking\nfor methods on an `any`:\n\n```c3\nfn void whoareyou2(any a)\n{\n    // Query if the function exists\n    if (!&a.myname)\n    {\n        io::printn(\"I don't know who I am.\");\n        return;\n    }\n    // Dynamically call the function\n    io::printn(((MyName)a).myname());\n}\n\nfn void main()\n{\n    int i;\n    double d;\n    Bob bob;\n\n    any a = &i;\n    whoareyou2(a); // Prints \"I am int!\"\n    a = &d;\n    whoareyou2(a); // Prints \"I don't know who I am.\"\n    a = &bob;\n    whoareyou2(a); // Prints \"I am Bob!\"\n}\n```\n\n### Reflection invocation\n*This functionality is not yet implemented and may see syntax changes*\n\nIt is possible to retrieve any `@dynamic` function by name and invoke it:\n\n```c3\nalias VoidMethodFn = fn void(void*);\n\nfn void* int.test_something(&self) @dynamic\n{\n    io::printfn(\"Testing: %d\", *self);\n}\n\nfn void main()\n{\n    int z = 321;\n    any a = &z;\n    VoidMethodFn test_func = a.reflect(\"test_something\");\n    test_func(a); // Will print \"Testing: 321\"\n}\n```\n\nThis feature allows methods to be linked up at runtime.\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"working-with-the-type-of-any-at-runtime","text":"Working with the type of any at runtime."},{"depth":2,"slug":"variable-argument-functions-with-implicit-any","text":"Variable argument functions with implicit any"},{"depth":3,"slug":"explicit-any-vararg-functions","text":"Explicit any vararg functions"},{"depth":3,"slug":"implicit-any-vararg-functions","text":"Implicit any vararg functions"},{"depth":2,"slug":"interfaces","text":"Interfaces"},{"depth":3,"slug":"defining-an-interface","text":"Defining an interface"},{"depth":3,"slug":"implementing-the-interface","text":"Implementing the interface"},{"depth":3,"slug":"dynamic-methods","text":"@dynamic methods"},{"depth":3,"slug":"referring-to-an-interface-by-pointer","text":"Referring to an interface by pointer"},{"depth":3,"slug":"calling-dynamic-methods","text":"Calling dynamic methods"},{"depth":3,"slug":"reflection-invocation","text":"Reflection invocation"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
