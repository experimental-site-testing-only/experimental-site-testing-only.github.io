const id = "Previous Versions/v0_6_8/Getting Started/prebuilt-binaries.md";
						const collection = "docs";
						const slug = "previous-versions/v0_6_8/getting-started/prebuilt-binaries";
						const body = "\n\n# Prebuilt binaries\n- [Installing on Windows](#installing-on-windows)\n- [Installing on Mac Arm64](#installing-on-mac-arm64)\n- [Installing on Ubuntu](#installing-on-ubuntu)\n- [Installing on Debian](#installing-on-debian) \n- [Installing on Arch](#installing-on-arch-linux) \n\n## Installing on Windows\n1.  [Download the C3 compiler](https://github.com/c3lang/c3c/releases/download/latest/c3-windows.zip). Or the [debug build](https://github.com/c3lang/c3c/releases/download/latest/c3-windows-debug.zip)\n2. Unzip it into a folder\n3. Either Visual Studio 17 or follow the next two steps.\n4. Run the `msvc_build_libraries.py` Python script which will download the necessary files to compile on Windows.\n\n:::note[Running the Python script]\n\nIf you don't have Python installed, you can download it from [the Python Website](https://www.python.org/downloads/).\nor get it from the [the Microsoft Store](https://www.microsoft.com/en-us/p/python-39/9p7qfqmjrfp7)\n\nAfterwards you can double click the `msvc_build_libraries.py` file and pick \"python\" from the list of programs in the \"Select an app to open this .py file\" window.\n![Python](./windows_setup.png)\n\n:::\n\n### Optional: set c3c as a global environment variable\n\n5. copy the folder\n6. navigate to `C:\\Program Files`\n7. paste the folder here\n8. navigate inside the folder you've pasted\n9. copy the path of the folder\n10. search for \"edit the system environment variables\" on your computer\n11. click on the \"environment variables\" button on the bottom right\n12. under \"user variables\" double click on \"path\"\n13. click on \"new\" and paste the path to the folder\n14. run `c3c` on anywhere in your computer!\n```bash\nc3c compile ./hello.c3\n```\n\n## Installing on Mac Arm64\n1. Make sure you have XCode with command line tools installed.\n2. [Download the zip file](https://github.com/c3lang/c3c/releases/download/latest/c3-macos.zip)\n   (debug version [here](https://github.com/c3lang/c3c/releases/download/latest/c3-macos-debug.zip))\n3. Unzip executable and standard lib.\n4. Run `./c3c`.\n\n## Installing on Ubuntu\n1. [Download tar file](https://github.com/c3lang/c3c/releases/download/latest/c3-ubuntu-20.tar.gz)\n   (debug version [here](https://github.com/c3lang/c3c/releases/download/latest/c3-ubuntu-20-debug.tar.gz))\n2. Unpack executable and standard lib.\n3. Run `./c3c`.\n\n## Installing on Debian\n1. [Download tar file](https://github.com/c3lang/c3c/releases/download/latest/c3-linux.tar.gz)\n   (debug version [here](https://github.com/c3lang/c3c/releases/download/latest/c3-linux-debug.tar.gz))\n2. Unpack executable and standard lib.\n3. Run `./c3c`.\n\n## Installing on Arch Linux\nThere is an AUR package for the c3c compiler : [c3c-git](https://aur.archlinux.org/packages/c3c-git).\n\nDue to some issues with the LLVM packaged for Arch Linux, the AUR package will download and use LLVM 16 from Ubuntu-23.04 to compile the c3c compiler.\n\nYou can use your AUR package manager:\n```bash\nparu -S c3c-git\n# or yay -S c3c-git\n# or aura -A c3c-git\n```\n\nOr clone it manually:\n```bash\ngit clone https://aur.archlinux.org/c3c-git.git\ncd c3c-git\nmakepkg -si\n```\n";
						const data = {title:"Install C3 Compiler Binary",description:"Installing C3 Compiler Binary",editUrl:true,head:[],template:"doc",sidebar:{order:20,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Getting Started/prebuilt-binaries.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
