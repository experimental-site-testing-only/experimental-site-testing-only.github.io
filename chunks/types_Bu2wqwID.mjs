const id = "Language Overview/types.md";
						const collection = "docs";
						const slug = "language-overview/types";
						const body = "## Overview\n\nAs usual, types are divided into basic types and user defined types (`enum`, `union`, `struct`, `fault`, `alias`). All types are defined on a global level.\n\n##### Naming\n\nAll user defined types in C3 starts with upper case. So `MyStruct` or `Mystruct` would be fine, `mystruct_t` or `mystruct` would not.\nThis naming requirement ensures that the language is easy to parse for tools.\nIt is possible to use attributes to change the external name of a type:\n\n```c3\nstruct Stat @extern(\"stat\")\n{\n    // ...\n}\n\nfn CInt stat(char* pathname, Stat* buf);\n```\n\nThis would affect things like generated C headers.\n\n##### Differences from C\n\nUnlike C, C3 does not use type qualifiers. `const` exists,\nbut is a storage class modifier, not a type qualifier.\nInstead of `volatile`, volatile loads and stores are used.\nRestrictions on function parameter usage are instead described by parameter [preconditions](/language-common/contracts/#pre-conditions).\n\n`typedef` has a slightly different syntax and renamed `alias`.\n\nC3 also requires all function pointers to be used with a `alias` for example:\n\n```c3\nalias Callback = fn void();\nCallback a = null; // Ok!\nfn Callback getCallback() { /* ... */ } // Ok!\n\n// fn fn void() getCallback() { /* ... */ } - ERROR!\n// fn void() a = null; - ERROR!\n```\n\n## Basic types\n\nBasic types are divided into floating point types, and integer types. Integer types being either signed or unsigned.\n\n##### Integer types\n\n| Name        | bit size | signed |\n|:------------| --------:|:------:|\n| `bool`\\*    | 1        | no     |\n| `ichar`     | 8        | yes    |\n| `char`      | 8        | no     |\n| `short`     | 16       | yes    |\n| `ushort`    | 16       | no     |\n| `int`       | 32       | yes    |\n| `uint`      | 32       | no     |\n| `long`      | 64       | yes    |\n| `ulong`     | 64       | no     |\n| `int128`    | 128      | yes    |\n| `uint128`   | 128      | no     |\n| `iptr`\\*\\*  | varies   | yes    |\n| `uptr`\\*\\*  | varies   | no     |\n| `isz`\\*\\*   | varies   | yes    |\n| `usz`\\*\\*   | varies   | no     |\n\n\\* `bool` will be stored as a byte.\n\\*\\* size, pointer and pointer sized types depend on platform.\n\n##### Integer arithmetics\n\nAll signed integer arithmetics uses 2's complement.\n\n##### Integer constants\n\nInteger constants are 1293832 or -918212. Without a suffix, suffix type is assumed to the signed integer of *arithmetic promotion width*. Adding the `u` suffix gives a unsigned integer of the same width. Use `ixx` and `uxx` – where `xx` is the bit width for typed integers, e.g. `1234u16`\n\nIntegers may be written in decimal, but also\n\n- in binary with the prefix 0b e.g. `0b0101000111011`, `0b011`\n- in octal with the prefix 0o e.g. `0o0770`, `0o12345670`\n- in hexadecimal with the prefix 0x e.g. `0xdeadbeef` `0x7f7f7f`\n\nIn the case of binary, octal and hexadecimal, the type is assumed to be *unsigned*.\n\nFurthermore, underscore `_` may be used to add space between digits to improve readability e.g. `0xFFFF_1234_4511_0000`, `123_000_101_100`\n\n\n##### TwoCC, FourCC and EightCC\n\n[FourCC](https://en.wikipedia.org/wiki/FourCC) codes are often used to identify binary format types. C3 adds direct support for 4 character codes, but also 2 and 8 characters:\n\n- 2 character strings, e.g. `'C3'`, would convert to an ushort or short.\n- 4 character strings, e.g. `'TEST'`, converts to an uint or int.\n- 8 character strings, e.g. `'FOOBAR11'` converts to an ulong or long.\n\nConversion is always done so that the character string has the correct ordering in memory. This means that the same characters may have different integer values on different architectures due to endianness.\n\n##### Base64 and hex data literals\n\nBase64 encoded values work like TwoCC/FourCC/EightCC, in that is it laid out in byte order in memory. It uses the format `b64'<base64>'`. Hex encoded values work as base64 but with the format `x'<hex>'`. In data literals any whitespace is ignored, so `'00 00 11'x` encodes to the same value as `x'000011'`.\n\nIn our case we could encode `b64'Rk9PQkFSMTE='` as `'FOOBAR11'`.\n\nBase64 and hex data literals initializes to arrays of the char type:\n\n```c3\nchar[*] hello_world_base64 = b64\"SGVsbG8gV29ybGQh\";\nchar[*] hello_world_hex = x\"4865 6c6c 6f20 776f 726c 6421\";\n```\n\n##### String literals, and raw strings\n\nRegular string literals is text enclosed in `\" ... \"` just like in C. C3 also offers two other types of literals: *multi-line strings* and *raw strings*.\n\nRaw strings uses text between \\` \\`. Inside of a raw string, no escapes are available. To write a \\` double the character:\n\n```c3\nchar* foo = `C:\\foo\\bar.dll`;\nchar* bar = `\"Say ``hello``\"`;\n// Same as\nchar* foo = \"C:\\\\foo\\\\bar.dll\";\nchar* bar = \"\\\"Say `hello`\\\"\";\n```\n\n##### Floating point types\n\n| Name        | bit size |\n|-------------| --------:|\n| `bfloat16`* | 16       |\n| `float16`*  | 16       |\n| `float`     | 32       |\n| `double`    | 64       |\n| `float128`* | 128      |\n\n*support is still incomplete.\n\n##### Floating point constants\n\nFloating point constants will *at least* use 64 bit precision. Just like for integer constants, it is allowed to use underscore, but it may not occur immediately before or after a dot or an exponential.\n\nFloating point values may be written in decimal or hexadecimal. For decimal, the exponential symbol is e (or E, both are acceptable), for hexadecimal p (or P) is used: `-2.22e-21` `-0x21.93p-10`\n\nIt is possible to type a floating point by adding a suffix:\n\n| Suffix         |       type |\n|----------------|-----------:|\n| `bf16`         | `bfloat16` |\n| `f16`          |  `float16` |\n| `f32` *or* `f` |    `float` |\n| `f64`          |   `double` |\n| `f128`         | `float128` |\n\n### C compatibility\n\nFor C compatibility the following types are also defined in std::core::cinterop\n\n| Name          | C type               |\n|---------------| --------------------:|\n| `CChar`       | `char`               |\n| `CShort`      | `short int`          |\n| `CUShort`     | `unsigned short int` |\n| `CInt`        | `int`                |\n| `CUInt`       | `unsigned int`       |\n| `CLong`       | `long int`           |\n| `CULong`      | `unsigned long int`  |\n| `CLongLong`   | `long long`          |\n| `CULongLong`  | `unsigned long long` |\n| `CLongDouble` | `long double`        |\n\n`float` and `double` will always match their C counterparts.\n\nNote that signed C char and unsigned char will correspond to `ichar` and `char`. `CChar` is only available to match the default signedness of `char` on the platform.\n\n## Other built-in types\n\n### Pointer types\n\nPointers mirror C: `Foo*` is a pointer to a `Foo`, while `Foo**` is a pointer to a pointer of Foo.\n\n### The `typeid` type\n\nThe `typeid` can hold a runtime identifier for a type. Using `<typename>.typeid` a type may be converted to its unique runtime id,\ne.g. `typeid a = Foo.typeid;`. This value is pointer-sized.\n\n### The `any` type\n\nC3 contains a built-in variant type, which is essentially struct containing a `typeid` plus a `void*` pointer to a value.\nWhile it is possible to cast the `any` pointer to any pointer type,\nit is recommended to use the `anycast` macro or checking the type explicitly first.\n\n```c3\nfn void main()\n{\n    int x;\n    any y = &x;\n    int* w = (int*)y;                // Returns the pointer to x\n    double* z_bad = (double*)y;      // Don't do this!\n    double! z = anycast(y, double);  // The safe way to get a value\n    if (y.type == int.typeid)\n    {\n        // Do something if y contains an int*\n    }\n}\n```\n\nSwitching over the `any` type is another method to unwrap the pointer inside:\n\n```c3\nfn void test(any z)\n{\n    // Unwrapping switch\n    switch (z)\n    {\n        case int:\n            // z is unwrapped to int* here\n        case double:\n            // z is unwrapped to double* here\n    }\n    // Assignment switch\n    switch (y = z)\n    {\n        case int:\n            // y is int* here\n    }\n    // Direct unwrapping to a value is also possible:\n    switch (w = *z)\n    {\n        case int:\n            // w is int here\n    }\n    // Finally, if we just want to deal with the case\n    // where it is a single specific type:\n    if (z.type == int.typeid)\n    {\n        // This is safe here:\n        int* a = (int*)z;\n    }\n    if (try b = *anycast(z, int))\n    {\n        // b is an int:\n        foo(b * 3);\n    }\n}\n```\n\n`any.type` returns the underlying pointee typeid of the contained value. `any.ptr` returns\nthe raw `void*` pointer.\n\n### Array types\n\nArrays are indicated by `[size]` after the type, e.g. `int[4]`. Slices use the `type[]`. For initialization the wildcard `type[*]` can be used to infer the size\nfrom the initializer. See the chapter on [arrays](/language-common/arrays/).\n\n### Vector types\n\nVectors use `[<size>]` after the type, e.g. `float[<3>]`, with the restriction that vectors may only form out\nof integers, floats and booleans. Similar to arrays, wildcard can be used to infer the size of a vector: `int[<*>] a = { 1, 2 }`.\n\n## Types created using `alias`\n\n### \"typedef\"\n\nLike in C, C3 has a \"typedef\" construct, `alias <typename> = <type>`\n\n```c3\nalias Int32 = int;\nalias Vector2 = float[<2>];\n\n/* ... */\n\nInt32 a = 1;\nint b = a;\n```\n\n### Function pointer types\n\nFunction pointers are always used through a `alias`:\n\n```c3\nalias Callback = fn void(int value);\nCallback callback = &test;\n\nfn void test(int a) { /* ... */ }\n```\n\nTo form a function pointer, write a normal function declaration but skipping the function name. `fn int foo(double x)` ->\n`fn int(double x)`.\n\nFunction pointers can have default arguments, e.g. `alias Callback = fn void(int value = 0)` but default arguments\nand parameter names are not taken into account when determining function pointer assignability:\n\n```c3\nalias Callback = fn void(int value = 1);\nfn void test(int a = 0) { /* ... */ }\n\nCallback callback = &test; // Ok\n\nfn void main()\n{\n    callback(); // Works, same as test(0);\n    test(); // Works, same as test(1);\n    callback(value: 3); // Works, same as test(3)\n    test(a: 4); // Works, same as test(4)\n    // callback(a: 3); // ERROR!\n}\n```\n\n### Typedef - Type definitions\n\n`typedef` creates a new type, that has the same properties as the original type\nbut is distinct from it. It cannot implicitly convert into the other type using the syntax\n`typedef <name> = <type>`\n\n```c3\ntypedef MyId = int;\nfn void* get_by_id(MyId id) { ... }\n\nfn void test(MyId id)\n{\n    void* val = get_by_id(id); // Ok\n    void* val2 = get_by_id(1); // Literals convert implicitly\n    int a = 1;\n    // void* val3 = get_by_id(a); // ERROR expected a MyId\n    void* val4 = get_by_id((MyId)a); // Works\n    // a = id; // ERROR can't assign 'MyId' to 'int'\n}\n```\n\n#### Inline typedef\n\nUsing `inline` in the `typedef` declaration allows a newly created `typedef` type to\nimplicitly convert to its underlying type:\n\n```c3\ntypedef Abc = int;\ntypedef Bcd = inline int;\n\nfn void test()\n{\n    Abc a = 1;\n    Bcd b = 1;\n\n    // int i = a; Error: Abc cannot be implicitly converted to 'int'\n    int i = b; // This is valid\n\n    // However, 'inline' does not allow implicit conversion from\n    // the inline type to the typedef type:\n    // a = i; Error: Can't implicitly convert 'int' to 'Abc'\n    // b = i; Error: Can't implicitly convert 'int' to 'Bcd'\n}\n```\n\n### Generic types\n```c3\nimport generic_list; // Contains the generic MyList\n\nstruct Foo {\n    int x;\n}\n\n// ✅ alias for each type used with a generic module.\nalias IntMyList = MyList{ Foo };\nMyListFoo working_example;\n\n// ❌ An inline type definition will give an error.\n// Only allowed in a type definition or macro\nMyList{ Foo } failing_example = MyList{ Foo };\n```\nFind out more about [generic types](/generic-programming/generics).\n\n## Enum\n\nEnum or enumerated types use the following syntax:\n```c3\nenum State : int\n{\n    WAITING,\n    RUNNING,\n    TERMINATED\n}\n\n// Access enum values via:\nState current_state = State.WAITING;\n```\nThe access requires referencing the `enum`'s name as `State.WAITING` because\nan enum like `State` is a separate namespace by default, just like C++'s class `enum`.\n\n\n### Enum associated values\n\nIt is possible to associate each enum value with one or more a static values.\n```c3\nenum State : int (String description)\n{\n    WAITING = \"waiting\",\n    RUNNING = \"running\",\n    TERMINATED = \"ended\",\n}\n\nfn void main()\n{\n    State process = State.RUNNING;\n    io::printfn(\"%s\", process.description);\n}\n```\nMultiple static values can be associated with an enum value, for example:\n```c3\nstruct Position\n{\n    int x;\n    int y;\n}\n\nenum State : int (String desc, bool active, Position pos)\n{\n    WAITING    = { \"waiting\", false, { 1, 2} },\n    RUNNING    = { \"running\", true,  {12,22} },\n    TERMINATED = { \"ended\",   false, { 0, 0} },\n}\n\nfn void main()\n{\n    State process = State.RUNNING;\n    if (process.active)\n    {\n        io::printfn(\"Process is: %s\", process.desc);\n        io::printfn(\"Position x: %d\", process.pos.x);\n    }\n}\n```\n\n### Enum type inference\n\nWhen an `enum` is used where the type can be inferred, like in switch case-clauses or in variable assignment, the enum name is not required:\n```c3\nState process = WAITING; // State.WAITING is inferred.\nswitch (process)\n{\n    case RUNNING: // State.RUNNING is inferred\n        io::printfn(\"Position x: %d\", process.pos.x);\n    default:\n        io::printfn(\"Process is: %s\", process.desc);\n}\n\nfn void test(State s) { ... }\n\ntest(RUNNING); // State.RUNNING is inferred\n```\n\nIf the `enum` without its name matches with a global in the same scope, it needs the enum name to be added as a qualifier, for example:\n```c3\nmodule test;\n\n// Global variable\n// ❌ Don't do this!\nconst State RUNNING = State.TERMINATED;\n\ntest(RUNNING);       // Ambiguous\ntest(test::RUNNING); // Uses global variable.\ntest(State.RUNNING); // Uses enum constant.\n```\n\n### Enum to and from ordinal\n\nYou can convert an enum to its ordinal with `.ordinal`, and convert it\nback with `EnumName.from_ordinal(...)`:\n\n```c3\nfn void store_enum(State s)\n{\n    write_int_to_file(s.ordinal);\n}\n\nfn State read_enum()\n{\n    return State.from_ordinal(read_int_from_file());\n}\n```\n\n### Enum conversions using \"inline\"\n\nIt is possible to make an enum implicitly convert to its ordinal\nvalue or one of its associated values using `inline`:\n\n```c3\nenum MyEnum : char (inline String s)\n{\n    FOO = \"Hello\",\n    BAR = \"C3\"\n}\n\nenum OtherEnum : inline int\n{\n    ABC,\n    DEF,\n    GHI\n}\n\nfn void main()\n{\n    String a = MyEnum.FOO; // Same as MyEnum.FOO.s due to inline\n    String b = MyEnum.BAR;\n    io::printfn(\"%s %s!\", a, b); // Print \"Hello C3!\"\n    int x = OtherEnum.GHI; // Assigns the value 2 to x.\n}\n```\n\nAn enum may only declare *one* `inline` parameter.\n\n## Optional Type\n\nAn [Optional type](/language-common/optionals-essential/#what-is-an-optional) is created by taking a type and appending `?`.\nAn Optional type behaves like a tagged union, containing either the\nresult or an Excuse that is of a [fault](#optional-excuses-are-of-type-fault) type.\n\nOnce extracted, a `fault` can be converted to another `fault`.\n\n```c3\nfaultdef MISSING; // define a fault\n\nint? i;\ni = 5;              // Assigning a real value to i.\ni = io::EOF?;       // Assigning an optional result to i.\nfault b = MISSING;  // Assign a fault to b\nb = @catch(i);      // Assign the Excuse in i to b (EOF)\n```\n\nOnly variables, expressions and function returns may be Optionals.\nFunction and macro parameters in their definitions may not be optionals.\n\n```c3\nfn Foo*? getFoo() { /* ... */ } // ✅ Ok!\nint? x = 0; // ✅ Ok!\nfn void processFoo(Foo*! f) { /* ... */ } // ❌ fn paramater\n```\n\nRead more about the Optional types on the page about [Optionals and error handling](/language-common/optionals-essential/).\n\n\n### Optional Excuses are of type Fault\n\nWhen an [Optional](/language-common/optionals-essential/#what-is-an-optional) does not contain a result, it is empty, and has an Excuse, which is a`fault`.\n\n```c3\nfaultdef IO_ERROR, PARSE_ERROR, NOT_FOUND;\n```\n\nLike the [typeid type](#the-typeid-type), the constants are pointer sized\nand each value is globally unique. For example the underlying value of\n`NOT_FOUND` is guaranteed to be different from `IO_ERROR`.\nThis is true even if they are separately compiled.\n\n:::note\nThe underlying values assigned to a fault may vary each time a program is compiled.\n:::\n\nA fault may be stored as a normal value, but is also unique so that it may be passed\nin an Optional as a function return value using the\n[rethrow `!` operator](/language-common/optionals-essential/#using-the-rethrow-operator--to-unwrap-an-optional-value).\n\n\n## Struct types\n\nStructs are always named:\n\n```c3\nstruct Person\n{\n    char age;\n    String name;\n}\n```\n\nA struct's members may be accessed using dot notation, even for pointers to structs.\n\n```c3\nfn void test()\n{\n    Person p;\n    p.age = 21;\n    p.name = \"John Doe\";\n\n    io::printfn(\"%s is %d years old.\", p.name, p.age);\n\n    Person* p_ptr_ = &p;\n    p_ptr.age = 20; // Ok!\n\n    io::printfn(\"%s is %d years old.\", p_ptr.name, p_ptr.age);\n}\n```\n(One might wonder whether it's possible to take a `Person**` and use dot access. – It's not allowed, only one level of dereference is done.)\n\nTo change alignment and packing, [attributes](/language-common/attributes/) such as `@packed` may be used.\n\n## Struct subtyping\n\nC3 allows creating struct subtypes using `inline`:\n\n```c3\nstruct ImportantPerson\n{\n    inline Person person;\n    String title;\n}\n\nfn void print_person(Person p)\n{\n    io::printfn(\"%s is %d years old.\", p.name, p.age);\n}\n\n\nfn void test()\n{\n    ImportantPerson important_person;\n    important_person.age = 25;\n    important_person.name = \"Jane Doe\";\n    important_person.title = \"Rockstar\";\n\n    // Only the first part of the struct is copied.\n    print_person(important_person);\n}\n```\n\n## Union types\n\nUnion types are defined just like structs and are fully compatible with C.\n\n```c3\nunion Integral\n{\n    char as_byte;\n    short as_short;\n    int as_int;\n    long as_long;\n}\n```\n\nAs usual unions are used to hold one of many possible values:\n\n```c3\nfn void test()\n{\n    Integral i;\n    i.as_byte = 40; // Setting the active member to as_byte\n\n    i.as_int = 500; // Changing the active member to as_int\n\n    // Undefined behaviour: as_byte is not the active member,\n    // so this will probably print garbage.\n    io::printfn(\"%d\\n\", i.as_byte);\n}\n```\n\nNote that unions only take up as much space as their largest member, so `Integral.sizeof` is equivalent to `long.sizeof`.\n\n\n## Nested sub-structs / unions\n\nJust like in C99 and later, nested anonymous sub-structs / unions are allowed. Note that\nthe placement of struct / union names is different to match the difference in declaration.\n\n```c3\nstruct Person\n{\n    char age;\n    String name;\n    union\n    {\n        int employee_nr;\n        uint other_nr;\n    }\n    union subname\n    {\n        bool b;\n        Callback cb;\n    }\n}\n```\n\n## Bitstructs\n\nBitstructs allows storing fields in a specific bit layout. A bitstruct may only contain\ninteger types and booleans, in most other respects it works like a struct.\n\nThe main differences is that the bitstruct has a *backing type* and each field\nhas a specific bit range. In addition, it's not possible *to take the address* of a\nbitstruct field.\n\n```c3\nbitstruct Foo : char\n{\n    int a : 0..2;\n    int b : 4..6;\n    bool c : 7;\n}\n\nfn void test()\n{\n    Foo f;\n    f.a = 2;\n    char x = (char)f;\n    io::printfn(\"%d\", (char)f); // prints 2\n    f.b = 1;\n    io::printfn(\"%d\", (char)f); // prints 18\n    f.c = true;\n    io::printfn(\"%d\", (char)f); // prints 146\n}\n```\n\nThe bitstruct will follow the endianness of the underlying type:\n\n```c3\nbitstruct Test : uint\n{\n    ushort a : 0..15;\n    ushort b : 16..31;\n}\n\nfn void test()\n{\n    Test t;\n    t.a = 0xABCD;\n    t.b = 0x789A;\n    char* c = (char*)&t;\n\n    // Prints 789AABCD\n    io::printfn(\"%X\", (uint)t);\n\n    for (int i = 0; i < 4; i++)\n    {\n        // Prints CDAB9A78\n        io::printf(\"%X\", c[i]);\n    }\n    io::printn();\n}\n```\n\nIt is however possible to pick a different endianness, in which case the entire representation\nwill internally assume big endian layout:\n\n```c3\nbitstruct Test : uint @bigendian\n{\n    ushort a : 0..15;\n    ushort b : 16..31;\n}\n```\n\nIn this case the same example yields `CDAB9A78` and `789AABCD` respectively.\n\nBitstruct backing types may be integers or char arrays. The difference in layout is somewhat subtle:\n\n```c3\nbitstruct Test1 : char[4]\n{\n    ushort a : 0..15;\n    ushort b : 16..31;\n}\nbitstruct Test2 : char[4] @bigendian\n{\n    ushort a : 0..15;\n    ushort b : 16..31;\n}\n\nfn void test()\n{\n    Test1 t1;\n    Test2 t2;\n    t1.a = t2.a = 0xABCD;\n    t1.b = t2.b = 0x789A;\n\n    char* c = (char*)&t1;\n    for (int i = 0; i < 4; i++)\n    {\n        // Prints CDAB9A78 on x86\n        io::printf(\"%X\", c[i]);\n    }\n    io::printn();\n\n    c = (char*)&t2;\n    for (int i = 0; i < 4; i++)\n    {\n        // Prints ABCD789A\n        io::printf(\"%X\", c[i]);\n    }\n    io::printn();\n}\n```\n\nBitstructs can be made to have overlapping bit fields. This is useful when modelling\na layout which has multiple different layouts depending on flag bits:\n\n```c3\nbitstruct Foo : char @overlap\n{\n    int a : 2..5;\n    // \"b\" is valid due to the @overlap attribute\n    int b : 1..3;\n}\n```\n";
						const data = {title:"Types",description:"Types",editUrl:true,head:[],template:"doc",sidebar:{order:38,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Language Overview/types.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
