const id = "Previous Versions/v0_6_8/Language Fundamentals/naming.md";
						const collection = "docs";
						const slug = "previous-versions/v0_6_8/language-fundamentals/naming";
						const body = "\nC3 introduces fairly rigid naming rules to reduce ambiguity and make the language easy to parse for tools. \n\nAs a basic rule, all identifiers are limited to a-z, A-Z, 0-9 and `_`. The initial character can not be a number. Furthermore, all identifiers are limited to 31 character.\n\n### Structs, unions, enums and faults\n\nAll user defined types must start with A-Z after any optional initial `_` and include at least 1 lower case letter. `Bar`, `_T_i12` and `TTi` are all valid names. `_1`, `bAR` and `BAR` are not. For C-compatibility it's possible to alias the type to a external name using the attribute \"extern\".\n\n```c3\nstruct Foo @extern(\"foo\")\n{\n    int x;\n    Bar bar;\n}\n\nunion Bar \n{\n    int i;\n    double d;\n}\n\nenum Baz \n{\n    VALUE_1,\n    VALUE_2\n}\n\nfault Err \n{\n    OOPS,\n    LOTS_OF_OOPS\n}\n```\n\n### Variables and parameters\n\nAll variables and parameters *except for* global constant variables must start with a-z after any optional initial `_`. `___a` `fooBar` and `_test_` are all valid variable / parameter names. `_`, `_Bar`, `X` are not.\n\n```c3\nint theGlobal = 1;\n\nfn void foo(int x)\n{\n    Foo foo = getFoo(x);    \n    theGlobal++;\n}\n```\n\n### Global constants\n\nGlobal constants must start with A-Z after any optional initial `_`. `_FOO2`, `BAR_FOO`, `X` are all valid global constants, `_`, `_bar`, `x` are not. \n\n```c3\nconst int A_VALUE = 12;\n```\n\n### Enum / Fault values\n\nEnum and fault values follow the same naming standard as global constants.\n\n```c3\nenum Baz \n{\n    VALUE_1,\n    VALUE_2\n}\n\nfault Err \n{\n    OOPS,\n    LOTS_OF_OOPS\n}\n```\n\n### Struct / union members\n\nStruct and union members follow the same naming rules as variables.\n\n### Modules\n\nModule names may contain a-z, 0-9 and `_`, no upper case characters are allowed.\n\n```\nmodule foo;\n```\n\n### Functions and macros\n\nFunctions and macros must start with a-z after any optional initial `_`.\n\n```c3\nfn void theMostAmazingFunction() \n{ \n    return;\n}\n\nmacro justDoIt(x) \n{\n    justDo(x);\n}\n```";
						const data = {title:"Naming Rules",description:"Naming Rules",editUrl:true,head:[],template:"doc",sidebar:{order:41,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Language Fundamentals/naming.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
