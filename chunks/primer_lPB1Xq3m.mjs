import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<h2 id=\"overview\">Overview</h2>\n<p>This is intended for existing C programmers.</p>\n<p>This primer is intended as a guide to how the C syntax –\nand in some cases C semantics – is different in C3. It is intended to help you take a piece of C code and understand\nhow it can be converted manually to C3.</p>\n<h2 id=\"struct-enum-and-union-declarations\">Struct, Enum And Union Declarations</h2>\n<p>Don’t add a <code dir=\"auto\">;</code> after enum, struct and union declarations, and note the slightly\ndifferent syntax for declaring a named struct inside of a struct.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">typedef</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">} bar;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">} Foo;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> bar</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Ctypedef struct{    int a;    struct    {        double x;    } bar;} Foo;// C3struct Foo{    int a;    struct bar    {        double x;    }}\"><div></div></button></div></figure></div>\n<p>Also, user defined types are used without a <code dir=\"auto\">struct</code>, <code dir=\"auto\">union</code> or <code dir=\"auto\">enum</code> keyword, as\nif the name was a C typedef.</p>\n<h2 id=\"arrays\">Arrays</h2>\n<p>Array sizes are written next to the type and arrays do not decay to pointers,\nyou need to do it manually:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">] </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">y </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">] x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> y </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">x;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Cint x[2] = { 1, 2 };int *y = x;// C3int[2] x = { 1, 2 };int* y = &#x26;x;\"><div></div></button></div></figure></div>\n<p>You will probably prefer slices to pointers when passing data around:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">100</span><span style=\"--0:#D6DEEB;--1:#403F53\">] </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ...;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">y</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">30</span><span style=\"--0:#D6DEEB;--1:#403F53\">] </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ...;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">z</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">15</span><span style=\"--0:#D6DEEB;--1:#403F53\">] </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ...;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">sort_my_array</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x, </span><span style=\"--0:#F78C6C;--1:#AA0982\">100</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">sort_my_array</span><span style=\"--0:#D6DEEB;--1:#403F53\">(y, </span><span style=\"--0:#F78C6C;--1:#AA0982\">30</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Sort part of the array!</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">sort_my_array</span><span style=\"--0:#D6DEEB;--1:#403F53\">(z </span><span style=\"--0:#7FDBCA;--1:#097174\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">10</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">100</span><span style=\"--0:#D6DEEB;--1:#403F53\">] x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ...;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">30</span><span style=\"--0:#D6DEEB;--1:#403F53\">] y </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ...;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">sort_my_array</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#7FDBCA;--1:#097174\">&#x26;</span><span style=\"--1:#403F53\"><span style=\"--0:#D7DBE0\">x</span><span style=\"--0:#D6DEEB\">);</span></span><span style=\"--0:#809191;--1:#5E6578\"> // Implicit conversion from int[100]* -> int[]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">sort_my_array</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#7FDBCA;--1:#097174\">&#x26;</span><span style=\"--1:#403F53\"><span style=\"--0:#D7DBE0\">y</span><span style=\"--0:#D6DEEB\">);</span></span><span style=\"--0:#809191;--1:#5E6578\"> // Implicit conversion from int[30]* -> int[]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">sort_my_array</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">z</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#FFFFFF;--1:#9B504E\">1..10</span><span style=\"--0:#D6DEEB;--1:#403F53\">]);</span><span style=\"--0:#809191;--1:#5E6578\"> // Inclusive ranges!</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Cint x[100] = ...;int y[30] = ...;int z[15] = ...;sort_my_array(x, 100);sort_my_array(y, 30);// Sort part of the array!sort_my_array(z + 1, 10);// C3int[100] x = ...;int[30] y = ...;sort_my_array(&#x26;x); // Implicit conversion from int[100]* -> int[]sort_my_array(&#x26;y); // Implicit conversion from int[30]* -> int[]sort_my_array(z[1..10]); // Inclusive ranges!\"><div></div></button></div></figure></div>\n<p>Note that declaring an array of inferred size will look different in C3:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x</span><span style=\"--0:#C792EA;--1:#8D46B4\">[]</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span><span style=\"--0:#809191;--1:#5E6578\"> // x is int[3]</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">] x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span><span style=\"--0:#809191;--1:#5E6578\"> // x is int[3]</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Cint x[] = { 1, 2, 3 }; // x is int[3]// C3int[*] x = { 1, 2, 3 }; // x is int[3]\"><div></div></button></div></figure></div>\n<p>Arrays are trivially copyable:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">] </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ...;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">y</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">];</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">for</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> i </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">; i </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">; i</span><span style=\"--0:#C792EA;--1:#8D46B4\">++</span><span style=\"--0:#D6DEEB;--1:#403F53\">) </span><span style=\"--0:#C5E478;--1:#3C63B3\">y</span><span style=\"--0:#D6DEEB;--1:#403F53\">[i] </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">[i];</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">] x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ...;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">] y </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Cint x[3] = ...;int y[3];for (int i = 0; i < 3; i++) y[i] = x[i];// C3int[3] x = ...;int[3] y = x;\"><div></div></button></div></figure></div>\n<p>Find out more about <a href=\"/language-common/arrays/\">arrays</a>.</p>\n<h2 id=\"undefined-behaviour\">Undefined Behaviour</h2>\n<p>C3 has less undefined behaviour, in particular integers are defined as using 2s\ncomplement and signed overflow is wrapping. Find out more about <a href=\"/language-rules/undefined-behaviour/\">undefined behaviour</a>.</p>\n<h2 id=\"functions\">Functions</h2>\n<p>Functions are declared like C, but you need to put <code dir=\"auto\">fn</code> in front:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--1:#403F53\"><span style=\"--0:#D7DBE0\">b</span><span style=\"--0:#D6DEEB\">, </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\"> </span><span style=\"--0:#D7DBE0\">x</span><span style=\"--0:#D6DEEB\">, </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--1:#403F53\"><span style=\"--0:#D7DBE0\">z</span><span style=\"--0:#D6DEEB\">) { ... }</span></span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\"> </span><span style=\"--0:#D7DBE0\">b</span><span style=\"--0:#D6DEEB\">, </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\"> </span><span style=\"--0:#D7DBE0\">x</span><span style=\"--0:#D6DEEB\">, </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\"> </span><span style=\"--0:#D7DBE0\">z</span><span style=\"--0:#D6DEEB\">) { ... }</span></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C:int foo(Foo *b, int x, void *z) { ... }// C3fn int foo(Foo* b, int x, void* z) { ... }\"><div></div></button></div></figure></div>\n<p>Find out more more about <a href=\"/language-fundamentals/functions/\">functions</a>, including named arguments and default arguments.</p>\n<h2 id=\"calling-c-functions\">Calling C Functions</h2>\n<p>Declare a function (or variable) with <code dir=\"auto\">extern</code> and it will be possible to\naccess it from C3:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// To access puts:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">extern</span><span style=\"--0:#D6DEEB;--1:#403F53\"> fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">puts</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">char*</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">puts</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Hello world</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// To access puts:extern fn int puts(char*);...puts(&#x22;Hello world&#x22;);\"><div></div></button></div></figure></div>\n<p>Note that currently only the C standard library is automatically passed to the linker.\nIn order to link with other libraries, you need to explicitly tell\nthe compiler to link them.</p>\n<p>If you want to use a different identifier inside of your C3 code compared to\nthe function or variable’s external name, use the <code dir=\"auto\">@extern</code> attribute:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">extern</span><span style=\"--0:#D6DEEB;--1:#403F53\"> fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">_puts</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">char*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> message) @</span><span style=\"--0:#C792EA;--1:#8D46B4\">extern</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">puts</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">_puts</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Hello world</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\"> // &#x3C;- calls the puts function in libc</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"extern fn int _puts(char* message) @extern(&#x22;puts&#x22;);..._puts(&#x22;Hello world&#x22;); // <- calls the puts function in libc\"><div></div></button></div></figure></div>\n<h2 id=\"identifiers\">Identifiers</h2>\n<p>Name standards are enforced:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Starting with uppercase and followed somewhere by at least</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// one lower case is a user defined type:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">M____y y;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Starting with lowercase is a variable or a function or a member name:</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">myval</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> z </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">123</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">fooBar</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x) { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Only upper case is a constant or an enum value:</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">const</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FOOBAR </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">123</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Test</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">STATE_A</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">STATE_B</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Starting with uppercase and followed somewhere by at least// one lower case is a user defined type:Foo x;M____y y;// Starting with lowercase is a variable or a function or a member name:x.myval = 1;int z = 123;fn void fooBar(int x) { ... }// Only upper case is a constant or an enum value:const int FOOBAR = 123;enum Test{    STATE_A,    STATE_B}\"><div></div></button></div></figure></div>\n<h2 id=\"variable-declaration\">Variable Declaration</h2>\n<p>Multiple declarations together with initialization isn’t allowed in C3:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a, b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Not allowed in C3</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Cint a, b = 4; // Not allowed in C3// C3int a;int b = 4;\"><div></div></button></div></figure></div>\n<p>In C3, variables are always zero initialized, unless you explicitly opt out using <code dir=\"auto\">@noinit</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b @noinit;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Cint a = 0;int b;// C3int a;int b @noinit;\"><div></div></button></div></figure></div>\n<h2 id=\"typedef-and-define-becomes-alias\"><code dir=\"auto\">typedef</code> and <code dir=\"auto\">#define</code> becomes <code dir=\"auto\">alias</code></h2>\n<p><code dir=\"auto\">typedef</code> is replaced by <code dir=\"auto\">alias</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">typedef</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FooPtr;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">alias FooPtr </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Ctypedef Foo* FooPtr;// C3alias FooPtr = Foo*;\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">alias</code> also allows you to do things that C uses <code dir=\"auto\">#define</code> for:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">println</span><span style=\"--0:#D6DEEB;--1:#403F53\"> puts</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">#define</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">my_excellent_string</span><span style=\"--0:#D6DEEB;--1:#403F53\"> my_string</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">my_string </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Party on</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">println</span><span style=\"--0:#D6DEEB;--1:#403F53\">(my_excellent_string);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">alias println </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> puts;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">alias my_excellent_string </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> my_string;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> my_string </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Party on</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">println</span><span style=\"--0:#D6DEEB;--1:#403F53\">(my_excellent_string);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C#define println puts#define my_excellent_string my_stringchar *my_string = &#x22;Party on&#x22;;...println(my_excellent_string);// C3alias println = puts;alias my_excellent_string = my_string;char* my_string = &#x22;Party on&#x22;;...println(my_excellent_string);\"><div></div></button></div></figure></div>\n<p>Find out more about <a href=\"/language-common/alias/\"><code dir=\"auto\">alias</code></a>.</p>\n<h2 id=\"basic-types\">Basic Types</h2>\n<p>Several C types that would be variable sized are fixed size, and others changed names:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int16_t</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int32_t</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int64_t</span><span style=\"--0:#D6DEEB;--1:#403F53\"> c;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">uint64_t</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">size_t</span><span style=\"--0:#D6DEEB;--1:#403F53\"> e;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">ssize_t</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">ptrdiff_t</span><span style=\"--0:#D6DEEB;--1:#403F53\"> g;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">intptr_t</span><span style=\"--0:#D6DEEB;--1:#403F53\"> h;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">short</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span><span style=\"--0:#809191;--1:#5E6578\">    // Guaranteed 16 bits</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span><span style=\"--0:#809191;--1:#5E6578\">      // Guaranteed 32 bits</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">long</span><span style=\"--0:#D6DEEB;--1:#403F53\"> c;</span><span style=\"--0:#809191;--1:#5E6578\">     // Guaranteed 64 bits</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">ulong d;</span><span style=\"--0:#809191;--1:#5E6578\">    // Guaranteed 64 bits</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">int128 e;</span><span style=\"--0:#809191;--1:#5E6578\">   // Guaranteed 128 bits</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">uint128 f;</span><span style=\"--0:#809191;--1:#5E6578\">  // Guaranteed 128 bits</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">usz g;</span><span style=\"--0:#809191;--1:#5E6578\">      // Same as C size_t, depends on target</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">isz h;</span><span style=\"--0:#809191;--1:#5E6578\">      // Same as C ptrdiff_t</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">iptr i;</span><span style=\"--0:#809191;--1:#5E6578\">     // Same as intptr_t depends on target</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">uptr j;</span><span style=\"--0:#809191;--1:#5E6578\">     // Same as uintptr_t depends on target</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Cint16_t a;int32_t b;int64_t c;uint64_t d;size_t e;ssize_t f;ptrdiff_t g;intptr_t h;// C3short a;    // Guaranteed 16 bitsint b;      // Guaranteed 32 bitslong c;     // Guaranteed 64 bitsulong d;    // Guaranteed 64 bitsint128 e;   // Guaranteed 128 bitsuint128 f;  // Guaranteed 128 bitsusz g;      // Same as C size_t, depends on targetisz h;      // Same as C ptrdiff_tiptr i;     // Same as intptr_t depends on targetuptr j;     // Same as uintptr_t depends on target\"><div></div></button></div></figure></div>\n<p>Find out more about <a href=\"/language-overview/types/\">types</a>.</p>\n<h2 id=\"modules-and-import-instead-of-include\">Modules And Import Instead Of <code dir=\"auto\">#include</code></h2>\n<p>Declaring the module name is not mandatory, but if you leave it out the file name will be used\nas the module name. Imports are recursive.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> otherlib::foo;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FooStruct { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mylib::bar;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import otherlib;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">myCheck</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">foo::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span><span style=\"--0:#809191;--1:#5E6578\"> // foo prefix is mandatory.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">mylib::foo::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span><span style=\"--0:#809191;--1:#5E6578\"> // This also works;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">FooStruct x;</span><span style=\"--0:#809191;--1:#5E6578\"> // But user defined types don't need the prefix.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">otherlib::foo::FooStruct y;</span><span style=\"--0:#809191;--1:#5E6578\"> // But it is allowed.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module otherlib::foo;fn void test() { ... }struct FooStruct { ... }module mylib::bar;import otherlib;fn void myCheck(){    foo::test(); // foo prefix is mandatory.    mylib::foo::test(); // This also works;    FooStruct x; // But user defined types don&#x27;t need the prefix.    otherlib::foo::FooStruct y; // But it is allowed.}\"><div></div></button></div></figure></div>\n<h2 id=\"comments\">Comments</h2>\n<p>The <code dir=\"auto\">/* */</code> comments are nesting</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"text\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">/* This /* will all */ be commented out */</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"/* This /* will all */ be commented out */\"><div></div></button></div></figure></div>\n<p>Note that doc contracts starting with <code dir=\"auto\">&#x3C;*</code> and ending with <code dir=\"auto\">*></code>, have special rules for parsing them, and are\n<em>not</em> considered a regular comment. Find out more about <a href=\"/language-common/contracts/\">contracts</a>.</p>\n<h2 id=\"type-qualifiers\">Type Qualifiers</h2>\n<p>Qualifiers like <code dir=\"auto\">const</code> and <code dir=\"auto\">volatile</code> are removed, but <code dir=\"auto\">const</code> before a constant\nwill make it treated as a compile time constant. The constant does not need to be typed.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">const</span><span style=\"--0:#D6DEEB;--1:#403F53\"> A </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">false</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Compile time</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> A:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">  </span></span><span style=\"--0:#809191;--1:#5E6578\">// This will not be compiled</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">else</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">  </span></span><span style=\"--0:#809191;--1:#5E6578\">// This will be compiled</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$endif</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"const A = false;// Compile time$if A:  // This will not be compiled$else  // This will be compiled$endif\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">volatile</code> is replaced by macros for volatile load and store.</p>\n<h2 id=\"goto-removed\"><code dir=\"auto\">goto</code> Removed</h2>\n<p><code dir=\"auto\">goto</code> is removed, but there is labelled <code dir=\"auto\">break</code> and <code dir=\"auto\">continue</code> as well as <code dir=\"auto\">defer</code>\nto handle the cases when it is commonly used in C.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">foo </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">malloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo));</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#82AAFF;--1:#3C63B3\">tryFoo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo)) </span><span style=\"--0:#C792EA;--1:#8D46B4\">goto</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FAIL;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#82AAFF;--1:#3C63B3\">modifyFoo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo)) </span><span style=\"--0:#C792EA;--1:#8D46B4\">goto</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FAIL;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">free</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">true</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">FAIL:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">free</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">false</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// CFoo *foo = malloc(sizeof(Foo));if (tryFoo(foo)) goto FAIL;if (modifyFoo(foo)) goto FAIL;free(foo);return true;FAIL:free(foo);return false;\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3, direct translation:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">do</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FAIL:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">malloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo));</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#82AAFF;--1:#3C63B3\">tryFoo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo)) </span><span style=\"--0:#C792EA;--1:#8D46B4\">break</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FAIL;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#82AAFF;--1:#3C63B3\">modifyFoo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo)) </span><span style=\"--0:#C792EA;--1:#8D46B4\">break</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FAIL;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">free</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">true</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">free</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">false</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3, using defer:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">malloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">defer </span><span style=\"--0:#82AAFF;--1:#3C63B3\">free</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#82AAFF;--1:#3C63B3\">tryFoo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo)) </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">false</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#82AAFF;--1:#3C63B3\">modifyFoo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(foo)) </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">false</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">true</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3, direct translation:do FAIL:{    Foo* foo = malloc(sizeof(Foo));    if (tryFoo(foo)) break FAIL;    if (modifyFoo(foo)) break FAIL;    free(foo);    return true;}free(foo);return false;// C3, using defer:Foo* foo = malloc(Foo);defer free(foo);if (tryFoo(foo)) return false;if (modifyFoo(foo)) return false;return true;\"><div></div></button></div></figure></div>\n<h2 id=\"changes-to-switch\">Changes To <code dir=\"auto\">switch</code></h2>\n<ul>\n<li><code dir=\"auto\">case</code> statements automatically break.</li>\n<li>Use <code dir=\"auto\">nextcase</code> to fallthrough to the next statement.</li>\n<li>Empty <code dir=\"auto\">case</code> statements have implicit fallthrough.</li>\n</ul>\n<p>For example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (a)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span><span style=\"--0:#809191;--1:#5E6578\">       // Implicit fall-through</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doOne</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">break</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">    // Explicit break</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">i </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">    // Implicit fall-through</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doFour</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">break</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">    // Explicit break</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">5</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doFive</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span><span style=\"--0:#809191;--1:#5E6578\"> // Implicit fall-through</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">false</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (a)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span><span style=\"--0:#809191;--1:#5E6578\">       // Empty case implicit fall-through</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doOne</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span><span style=\"--0:#809191;--1:#5E6578\">  // Automatic break</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">i </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">nextcase;</span><span style=\"--0:#809191;--1:#5E6578\"> // Explicit fall-through</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doFour</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span><span style=\"--0:#809191;--1:#5E6578\"> // Automatic break</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">5</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doFive</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">nextcase;</span><span style=\"--0:#809191;--1:#5E6578\"> // Explicit fall-through</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">false</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Cswitch (a){    case 1:       // Implicit fall-through    case 2:        doOne();        break;    // Explicit break    case 3:        i = 0;    // Implicit fall-through    case 4:        doFour();        break;    // Explicit break    case 5:        doFive(); // Implicit fall-through    default:        return false;}// C3switch (a){    case 1:       // Empty case implicit fall-through    case 2:        doOne();  // Automatic break    case 3:        i = 0;        nextcase; // Explicit fall-through    case 4:        doFour(); // Automatic break    case 5:        doFive();        nextcase; // Explicit fall-through    default:        return false;}\"><div></div></button></div></figure></div>\n<p>We can jump to an arbitrary switch-case label in C3:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (a)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doOne</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">goto</span><span style=\"--0:#D6DEEB;--1:#403F53\"> LABEL3;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doTwo</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">break</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">LABEL3:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doThree</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">false</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (a)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doOne</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">nextcase </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doTwo</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">doThree</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">nextcase;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">false</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Cswitch (a){    case 1:        doOne();        goto LABEL3;    case 2:        doTwo();        break;    case 3:    LABEL3:        doThree();    default:        return false;}// C3switch (a){    case 1:        doOne();        nextcase 3;    case 2:        doTwo();    case 3:        doThree();        nextcase;    default:        return false;}\"><div></div></button></div></figure></div>\n<h2 id=\"bitfields-are-replaced-by-explicit-bitstructs\">Bitfields Are Replaced By Explicit Bitstructs</h2>\n<p>A bitstruct has an explicit container type, and each field has an exact bit range.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">bitstruct Foo : </span><span style=\"--0:#C792EA;--1:#8D46B4\">short</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a : </span><span style=\"--0:#FFFFFF;--1:#9B504E\">0..2</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Exact bit ranges, bits 0-2</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">uint</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b : </span><span style=\"--0:#FFFFFF;--1:#9B504E\">3..6</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">MyEnum c : </span><span style=\"--0:#FFFFFF;--1:#9B504E\">7..13</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"bitstruct Foo : short{    int a : 0..2; // Exact bit ranges, bits 0-2    uint b : 3..6;    MyEnum c : 7..13;}\"><div></div></button></div></figure></div>\n<p>There exists a simplified form for a bitstruct containing only booleans,\nit is the same except the ranges are left out:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Flags : char</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> has_hyperdrive;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> has_tractorbeam;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> has_plasmatorpedoes;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"struct Flags : char{    bool has_hyperdrive;    bool has_tractorbeam;    bool has_plasmatorpedoes;}\"><div></div></button></div></figure></div>\n<p>For more information see <a href=\"/language-overview/types//#bitstructs\">the section on bitstructs</a>.</p>\n<h2 id=\"other-changes\">Other Changes</h2>\n<p>The following things are enhancements to C, that don’t have an equivalent in C.</p>\n<ul>\n<li><a href=\"/language-common/defer/\">Defer</a></li>\n<li><a href=\"/language-fundamentals/functions/#methods\">Methods</a></li>\n<li><a href=\"/language-common/optionals-essential/#what-is-an-optional\">Optionals</a></li>\n<li><a href=\"/generic-programming/macros/\">Semantic macros</a></li>\n<li><a href=\"/generic-programming/generics/\">Generic modules</a></li>\n<li><a href=\"/language-common/contracts/\">Contracts</a></li>\n<li><a href=\"/generic-programming/compiletime/\">Compile time evaluation</a></li>\n<li><a href=\"/generic-programming/reflection/\">Reflection</a></li>\n<li><a href=\"/generic-programming/operator-overloading/\">Operator overloading</a></li>\n<li><a href=\"/generic-programming/macros/#macro-methods\">Macro methods</a></li>\n<li><a href=\"/language-fundamentals/functions/#static-initializer-and-finalizers\">Static initialize and finalize functions</a></li>\n<li><a href=\"/generic-programming/anyinterfaces/\">Dynamic interfaces</a></li>\n</ul>\n<p><strong>For the full list of all new features</strong> see the <a href=\"/faq/allfeatures/\">feature list</a>.</p>\n<p>Finally, the <a href=\"/faq/\">FAQ</a> answers many questions you might have as you start out.</p>";

				const frontmatter = {"title":"C3 For C Programmers","description":"A quick primer on C3 for C programmers","sidebar":{"order":36}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Language Overview/primer.md";
				const url = undefined;
				function rawContent() {
					return "\n## Overview\nThis is intended for existing C programmers.\n\nThis primer is intended as a guide to how the C syntax –\nand in some cases C semantics – is different in C3. It is intended to help you take a piece of C code and understand\nhow it can be converted manually to C3.\n\n## Struct, Enum And Union Declarations\n\nDon't add a `;` after enum, struct and union declarations, and note the slightly\ndifferent syntax for declaring a named struct inside of a struct.\n\n```c\n// C\ntypedef struct\n{\n    int a;\n    struct\n    {\n        double x;\n    } bar;\n} Foo;\n\n// C3\nstruct Foo\n{\n    int a;\n    struct bar\n    {\n        double x;\n    }\n}\n```\n\nAlso, user defined types are used without a `struct`, `union` or `enum` keyword, as\nif the name was a C typedef.\n\n## Arrays\n\nArray sizes are written next to the type and arrays do not decay to pointers,\nyou need to do it manually:\n\n```c\n// C\nint x[2] = { 1, 2 };\nint *y = x;\n\n// C3\nint[2] x = { 1, 2 };\nint* y = &x;\n```\n\nYou will probably prefer slices to pointers when passing data around:\n\n```c\n// C\nint x[100] = ...;\nint y[30] = ...;\nint z[15] = ...;\nsort_my_array(x, 100);\nsort_my_array(y, 30);\n// Sort part of the array!\nsort_my_array(z + 1, 10);\n\n// C3\nint[100] x = ...;\nint[30] y = ...;\nsort_my_array(&x); // Implicit conversion from int[100]* -> int[]\nsort_my_array(&y); // Implicit conversion from int[30]* -> int[]\nsort_my_array(z[1..10]); // Inclusive ranges!\n```\n\nNote that declaring an array of inferred size will look different in C3:\n\n```c\n// C\nint x[] = { 1, 2, 3 }; // x is int[3]\n\n// C3\nint[*] x = { 1, 2, 3 }; // x is int[3]\n```\n\nArrays are trivially copyable:\n\n```c\n// C\nint x[3] = ...;\nint y[3];\nfor (int i = 0; i < 3; i++) y[i] = x[i];\n\n// C3\nint[3] x = ...;\nint[3] y = x;\n```\n\nFind out more about [arrays](/language-common/arrays/).\n\n## Undefined Behaviour\n\nC3 has less undefined behaviour, in particular integers are defined as using 2s\ncomplement and signed overflow is wrapping. Find out more about [undefined behaviour](/language-rules/undefined-behaviour/).\n\n## Functions\n\nFunctions are declared like C, but you need to put `fn` in front:\n\n```c\n// C:\nint foo(Foo *b, int x, void *z) { ... }\n\n// C3\nfn int foo(Foo* b, int x, void* z) { ... }\n```\n\nFind out more more about [functions](/language-fundamentals/functions/), including named arguments and default arguments.\n\n## Calling C Functions\n\nDeclare a function (or variable) with `extern` and it will be possible to\naccess it from C3:\n\n```c3\n// To access puts:\nextern fn int puts(char*);\n...\nputs(\"Hello world\");\n```\n\nNote that currently only the C standard library is automatically passed to the linker.\nIn order to link with other libraries, you need to explicitly tell\nthe compiler to link them.\n\nIf you want to use a different identifier inside of your C3 code compared to\nthe function or variable's external name, use the `@extern` attribute:\n\n```c3\nextern fn int _puts(char* message) @extern(\"puts\");\n...\n_puts(\"Hello world\"); // <- calls the puts function in libc\n```\n\n## Identifiers\n\nName standards are enforced:\n\n```c3\n// Starting with uppercase and followed somewhere by at least\n// one lower case is a user defined type:\nFoo x;\nM____y y;\n\n// Starting with lowercase is a variable or a function or a member name:\n\nx.myval = 1;\nint z = 123;\nfn void fooBar(int x) { ... }\n\n// Only upper case is a constant or an enum value:\n\nconst int FOOBAR = 123;\nenum Test\n{\n    STATE_A,\n    STATE_B\n}\n```\n\n## Variable Declaration\n\nMultiple declarations together with initialization isn't allowed in C3:\n\n```c\n// C\nint a, b = 4; // Not allowed in C3\n\n// C3\nint a;\nint b = 4;\n```\n\nIn C3, variables are always zero initialized, unless you explicitly opt out using `@noinit`:\n\n```c\n// C\nint a = 0;\nint b;\n\n// C3\nint a;\nint b @noinit;\n```\n\n## `typedef` and `#define` becomes `alias`\n\n`typedef` is replaced by `alias`:\n\n```c\n// C\ntypedef Foo* FooPtr;\n\n// C3\nalias FooPtr = Foo*;\n```\n\n`alias` also allows you to do things that C uses `#define` for:\n\n```c\n// C\n#define println puts\n#define my_excellent_string my_string\n\nchar *my_string = \"Party on\";\n...\nprintln(my_excellent_string);\n\n// C3\nalias println = puts;\nalias my_excellent_string = my_string;\n\nchar* my_string = \"Party on\";\n...\nprintln(my_excellent_string);\n```\n\nFind out more about [`alias`](/language-common/alias/).\n\n## Basic Types\n\nSeveral C types that would be variable sized are fixed size, and others changed names:\n\n```c\n// C\nint16_t a;\nint32_t b;\nint64_t c;\nuint64_t d;\nsize_t e;\nssize_t f;\nptrdiff_t g;\nintptr_t h;\n\n// C3\nshort a;    // Guaranteed 16 bits\nint b;      // Guaranteed 32 bits\nlong c;     // Guaranteed 64 bits\nulong d;    // Guaranteed 64 bits\nint128 e;   // Guaranteed 128 bits\nuint128 f;  // Guaranteed 128 bits\nusz g;      // Same as C size_t, depends on target\nisz h;      // Same as C ptrdiff_t\niptr i;     // Same as intptr_t depends on target\nuptr j;     // Same as uintptr_t depends on target\n```\n\nFind out more about [types](/language-overview/types/).\n\n## Modules And Import Instead Of `#include`\n\nDeclaring the module name is not mandatory, but if you leave it out the file name will be used\nas the module name. Imports are recursive.\n\n```c3\nmodule otherlib::foo;\n\nfn void test() { ... }\nstruct FooStruct { ... }\n\nmodule mylib::bar;\nimport otherlib;\nfn void myCheck()\n{\n    foo::test(); // foo prefix is mandatory.\n    mylib::foo::test(); // This also works;\n    FooStruct x; // But user defined types don't need the prefix.\n    otherlib::foo::FooStruct y; // But it is allowed.\n}\n```\n\n## Comments\n\nThe `/* */` comments are nesting\n\n```text\n/* This /* will all */ be commented out */\n```\n\nNote that doc contracts starting with `<*` and ending with `*>`, have special rules for parsing them, and are\n_not_ considered a regular comment. Find out more about [contracts](/language-common/contracts/).\n\n## Type Qualifiers\n\nQualifiers like `const` and `volatile` are removed, but `const` before a constant\nwill make it treated as a compile time constant. The constant does not need to be typed.\n\n```c3\nconst A = false;\n// Compile time\n$if A:\n  // This will not be compiled\n$else\n  // This will be compiled\n$endif\n```\n\n`volatile` is replaced by macros for volatile load and store.\n\n## `goto` Removed\n\n`goto` is removed, but there is labelled `break` and `continue` as well as `defer`\nto handle the cases when it is commonly used in C.\n\n```c\n// C\nFoo *foo = malloc(sizeof(Foo));\n\nif (tryFoo(foo)) goto FAIL;\nif (modifyFoo(foo)) goto FAIL;\n\nfree(foo);\nreturn true;\n\nFAIL:\nfree(foo);\nreturn false;\n```\n\n```c3\n// C3, direct translation:\ndo FAIL:\n{\n    Foo* foo = malloc(sizeof(Foo));\n\n    if (tryFoo(foo)) break FAIL;\n    if (modifyFoo(foo)) break FAIL;\n\n    free(foo);\n    return true;\n}\nfree(foo);\nreturn false;\n\n// C3, using defer:\nFoo* foo = malloc(Foo);\ndefer free(foo);\n\nif (tryFoo(foo)) return false;\nif (modifyFoo(foo)) return false;\n\nreturn true;\n```\n\n## Changes To `switch`\n\n- `case` statements automatically break.\n- Use `nextcase` to fallthrough to the next statement.\n- Empty `case` statements have implicit fallthrough.\n\nFor example:\n\n```c\n// C\nswitch (a)\n{\n    case 1:       // Implicit fall-through\n    case 2:\n        doOne();\n        break;    // Explicit break\n    case 3:\n        i = 0;    // Implicit fall-through\n    case 4:\n        doFour();\n        break;    // Explicit break\n    case 5:\n        doFive(); // Implicit fall-through\n    default:\n        return false;\n}\n\n// C3\nswitch (a)\n{\n    case 1:       // Empty case implicit fall-through\n    case 2:\n        doOne();  // Automatic break\n    case 3:\n        i = 0;\n        nextcase; // Explicit fall-through\n    case 4:\n        doFour(); // Automatic break\n    case 5:\n        doFive();\n        nextcase; // Explicit fall-through\n    default:\n        return false;\n}\n```\n\nWe can jump to an arbitrary switch-case label in C3:\n\n```c3\n// C\nswitch (a)\n{\n    case 1:\n        doOne();\n        goto LABEL3;\n    case 2:\n        doTwo();\n        break;\n    case 3:\n    LABEL3:\n        doThree();\n    default:\n        return false;\n}\n\n// C3\nswitch (a)\n{\n    case 1:\n        doOne();\n        nextcase 3;\n    case 2:\n        doTwo();\n    case 3:\n        doThree();\n        nextcase;\n    default:\n        return false;\n}\n```\n\n## Bitfields Are Replaced By Explicit Bitstructs\n\nA bitstruct has an explicit container type, and each field has an exact bit range.\n\n```c3\nbitstruct Foo : short\n{\n    int a : 0..2; // Exact bit ranges, bits 0-2\n    uint b : 3..6;\n    MyEnum c : 7..13;\n}\n```\n\nThere exists a simplified form for a bitstruct containing only booleans,\nit is the same except the ranges are left out:\n\n```c3\nstruct Flags : char\n{\n    bool has_hyperdrive;\n    bool has_tractorbeam;\n    bool has_plasmatorpedoes;\n}\n```\n\nFor more information see [the section on bitstructs](/language-overview/types//#bitstructs).\n\n## Other Changes\n\nThe following things are enhancements to C, that don't have an equivalent in C.\n\n- [Defer](/language-common/defer/)\n- [Methods](/language-fundamentals/functions/#methods)\n- [Optionals](/language-common/optionals-essential/#what-is-an-optional)\n- [Semantic macros](/generic-programming/macros/)\n- [Generic modules](/generic-programming/generics/)\n- [Contracts](/language-common/contracts/)\n- [Compile time evaluation](/generic-programming/compiletime/)\n- [Reflection](/generic-programming/reflection/)\n- [Operator overloading](/generic-programming/operator-overloading/)\n- [Macro methods](/generic-programming/macros/#macro-methods)\n- [Static initialize and finalize functions](/language-fundamentals/functions/#static-initializer-and-finalizers)\n- [Dynamic interfaces](/generic-programming/anyinterfaces/)\n\n**For the full list of all new features** see the [feature list](/faq/allfeatures/).\n\nFinally, the [FAQ](/faq/) answers many questions you might have as you start out.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"overview","text":"Overview"},{"depth":2,"slug":"struct-enum-and-union-declarations","text":"Struct, Enum And Union Declarations"},{"depth":2,"slug":"arrays","text":"Arrays"},{"depth":2,"slug":"undefined-behaviour","text":"Undefined Behaviour"},{"depth":2,"slug":"functions","text":"Functions"},{"depth":2,"slug":"calling-c-functions","text":"Calling C Functions"},{"depth":2,"slug":"identifiers","text":"Identifiers"},{"depth":2,"slug":"variable-declaration","text":"Variable Declaration"},{"depth":2,"slug":"typedef-and-define-becomes-alias","text":"typedef and #define becomes alias"},{"depth":2,"slug":"basic-types","text":"Basic Types"},{"depth":2,"slug":"modules-and-import-instead-of-include","text":"Modules And Import Instead Of #include"},{"depth":2,"slug":"comments","text":"Comments"},{"depth":2,"slug":"type-qualifiers","text":"Type Qualifiers"},{"depth":2,"slug":"goto-removed","text":"goto Removed"},{"depth":2,"slug":"changes-to-switch","text":"Changes To switch"},{"depth":2,"slug":"bitfields-are-replaced-by-explicit-bitstructs","text":"Bitfields Are Replaced By Explicit Bitstructs"},{"depth":2,"slug":"other-changes","text":"Other Changes"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
