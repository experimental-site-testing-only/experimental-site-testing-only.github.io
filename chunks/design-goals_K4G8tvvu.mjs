const id = "Previous Versions/v0_6_8/Getting Started/design-goals.md";
						const collection = "docs";
						const slug = "previous-versions/v0_6_8/getting-started/design-goals";
						const body = "\n:::note[Want To Download C3?]\n[Download C3](/getting-started/prebuilt-binaries/), available on Mac, Windows and Linux.\n:::\n\n## Design goals\n\n- Procedural language, with a pragmatic ethos to get work done.\n- Minimalistic, no feature should be unnecessary or redundant.\n- Stay close to C - only change where there is a significant need.\n- Learning C3 should be easy for a C programmer.\n- Seamless C integration.\n- Ergonomic common patterns.\n- Data is inert.\n- Zero Is Initialization (ZII).<sup>*</sup>\n- Avoid \"big ideas\".\n\n<sup>*</sup> *\"Zero Is Initialization\" is an idiom where types and code\nare written so that the zero value is a meaningful, initialized\nstate.*\n\n## Features\n\n- [Full C ABI compatibility](/language-common/cinterop/)\n- [Module system](/language-fundamentals/modules/) \n- [Generic modules](/generic-programming/generics/)\n- [Design by contract](/language-common/contracts/)\n- [Zero overhead errors](/language-common/optionals-essential/#what-is-an-optional)\n- [Semantic macro system](/generic-programming/macros/)\n- [First-class SIMD vector types](/language-common/vectors/)\n- [Struct subtyping](/language-overview/types/#struct-subtyping)\n- [Safe array access using slices](/language-common/arrays/#slice)\n- [Safe array iteration using foreach](/language-common/arrays/#iteration-over-arrays)\n- [Easy to use inline assembly](/misc-advanced/asm/)\n- [Cross-platform standard library which includes dynamic containers and strings](/standard-library/)\n- LLVM backend\n\n## C3 Background\n\nC3 is an evolution of C, a minimalistic language designed for systems \nprogramming, enabling the same paradigms and retaining the same syntax \nas far as possible.\n\nC3 started as an experimental fork of the [C2 language](http://www.c2lang.org/) \nby [Bas van den Berg](https://github.com/bvdberg). \nIt has evolved significantly, not just in syntax but also \nin regard to error handling, macros, generics and strings.\n\n";
						const data = {title:"Design Goals & Background",description:"Design Goals & Background",editUrl:true,head:[],template:"doc",sidebar:{order:2,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Getting Started/design-goals.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
