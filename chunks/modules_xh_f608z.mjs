import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>C3 groups functions, types, variables and macros into namespaces called modules. When doing builds, any C3 file must start with the <code dir=\"auto\">module</code> keyword, specifying the module. When compiling single files, the module is not needed and the module name is assumed to be the file name, converted to lower case, with any invalid characters replaced by underscore (<code dir=\"auto\">_</code>).</p>\n<p>A module can consist of multiple files, e.g.</p>\n<p><code dir=\"auto\">file_a.c3</code></p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#616671\">/* ... */</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module foo;/* ... */\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">file_b.c3</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#616671\">/* ... */</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module foo;/* ... */\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">file_c.c3</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> bar;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#616671\">/* ... */</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module bar;/* ... */\"><div></div></button></div></figure></div>\n<p>Here <code dir=\"auto\">file_a.c3</code> and <code dir=\"auto\">file_b.c3</code> belong to the same module, <strong>foo</strong> while <code dir=\"auto\">file_c.c3</code> belongs to to <strong>bar</strong>.</p>\n<h2 id=\"details\">Details</h2>\n<p>Some details about the C3 module system:</p>\n<ul>\n<li>Modules can be arbitrarily nested, e.g. <code dir=\"auto\">module foo::bar::baz;</code> to create the sub module baz in the sub module <code dir=\"auto\">bar</code> of the module <code dir=\"auto\">foo</code>.</li>\n<li>Module names must be alphanumeric lower case letters plus the underscore character: <code dir=\"auto\">_</code>.</li>\n<li>Module names are limited to 31 characters.</li>\n<li>Modules may be spread across multiple files.</li>\n<li>A single file may have multiple module declarations.</li>\n<li>Each declaration of a distinct module is called a <em>module section</em>.</li>\n</ul>\n<h2 id=\"importing-modules\">Importing Modules</h2>\n<p>Modules are imported using the <code dir=\"auto\">import</code> statement. Imports always <em>recursively import</em> sub-modules. Any module\nwill automatically import all other modules with the same parent module.</p>\n<p><code dir=\"auto\">foo.c3</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> some::foo;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() {}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module some::foo;fn void test() {}\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">bar.c3</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> bar;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import some;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// import some::foo; &#x3C;- not needed, as it is a sub module to \"some\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">foo::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// some::foo::test() also works.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module bar;import some;// import some::foo; <- not needed, as it is a sub module to &#x22;some&#x22;fn void test(){    foo::test();    // some::foo::test() also works.}\"><div></div></button></div></figure></div>\n<p>In some cases there may be ambiguities, in which case the full path can be used to resolve the ambiguity:</p>\n<p><code dir=\"auto\">abc.c3</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> abc;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Context</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module abc;struct Context{    int a;}\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">de.c3</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> de;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Context</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">void*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ptr;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module de;struct Context{    void* ptr;}\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">test.c3</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> test1;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import de, abc;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Context c = {} &#x3C;- ambiguous</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">abc::Context c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> {};</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module test1;import de, abc;// Context c = {} <- ambiguousabc::Context c = {};\"><div></div></button></div></figure></div>\n<h2 id=\"implicit-imports\">Implicit Imports</h2>\n<p>The module system will also implicitly import:</p>\n<ol>\n<li>The <code dir=\"auto\">std::core</code> module (and sub modules).</li>\n<li>Any other module sharing the same top module. E.g. the module <code dir=\"auto\">foo::abc</code> will implicitly also import modules <code dir=\"auto\">foo</code> and <code dir=\"auto\">foo::cde</code> if they exist.</li>\n</ol>\n<h2 id=\"visibility\">Visibility</h2>\n<p>All files in the same module share the same global declaration namespace. By default a symbol is visible to all other modules.\nTo make a symbol only visible inside the module, use the <code dir=\"auto\">@private</code> attribute.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">init</span><span style=\"--0:#D6DEEB;--1:#403F53\">() { .. }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">open</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @private { .. }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module foo;fn void init() { .. }fn void open() @private { .. }\"><div></div></button></div></figure></div>\n<p>In this example, the other modules can use the init() function after importing foo, but only files in the foo module can use open(), as it is specified as <code dir=\"auto\">private</code>.</p>\n<p>It’s possible to further restrict visibility: <code dir=\"auto\">@local</code> works like <code dir=\"auto\">@private</code> except it’s only visible in the\nlocal context.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// File foo.c3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">abc</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @private { }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">de</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @local { }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// File foo2.c3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">abc</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span><span style=\"--0:#809191;--1:#5E6578\"> // Access of private in the same module is ok</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// de(); &#x3C;- Error: function is local to foo.c3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// File foo.c3module foo;fn void abc() @private { }fn void de() @local { }// File foo2.c3module foo;fn void test(){    abc(); // Access of private in the same module is ok    // de(); <- Error: function is local to foo.c3}\"><div></div></button></div></figure></div>\n<h2 id=\"overriding-symbol-visibility-rules\">Overriding Symbol Visibility Rules</h2>\n<p>By using <code dir=\"auto\">import &#x3C;module> @public</code>, it’s possible to access another module´s private symbols.\nMany other module systems have hierarchal visibility rules, but the <code dir=\"auto\">import @public</code> feature allows\nvisibility to be manipulated in a more ad-hoc manner without imposing hard rules.</p>\n<p>For example, you may provide a library with two modules: “mylib::net” and “mylib::file” - which both use functions\nand types from a common “mylib::internals” module. The two libraries use <code dir=\"auto\">import mylib::internals @public</code>\nto access this module’s private functions and type. To an external user of the library, the “mylib::internals”\ndoes not seem to exist, but inside of your library you use it as a shared dependency.</p>\n<p>A simple example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// File a.c3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">a_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @private { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// File b.c3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">b_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @private { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// File c.c3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> c;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import b @public;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Error! a_function() is private</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">a::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">a_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Allowed since `import b @public` allowed `b`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// to \"public\" in this context.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">b::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">b_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// File a.c3module a;fn void a_function() @private { ... }// File b.c3module b;fn void b_function() @private { ... }// File c.c3module c;import a;import b @public;fn void test(){    // Error! a_function() is private    a::a_function();    // Allowed since &#x60;import b @public&#x60; allowed &#x60;b&#x60;    // to &#x22;public&#x22; in this context.    b::b_function();}\"><div></div></button></div></figure></div>\n<p><em>Note: <code dir=\"auto\">@local</code> visibility cannot be overridden using a “@public” import.</em></p>\n<h2 id=\"changing-the-default-visibility\">Changing The Default Visibility</h2>\n<p>In a normal module, global declarations will be public by default. If some other\nvisibility is desired, it’s possible to declare <code dir=\"auto\">@private</code> or <code dir=\"auto\">@local</code> after the module name.\nIt will affect all declaration in the same section.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo @private;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">ab_private</span><span style=\"--0:#D6DEEB;--1:#403F53\">() { ... }</span><span style=\"--0:#809191;--1:#5E6578\"> // Private</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">ab_public</span><span style=\"--0:#D6DEEB;--1:#403F53\">() { ... }</span><span style=\"--0:#809191;--1:#5E6578\"> // Public</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> bar;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import foo;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">foo::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">ab_public</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span><span style=\"--0:#809191;--1:#5E6578\"> // Works</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// foo::ab_private(); &#x3C;- Error, private method</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module foo @private;fn void ab_private() { ... } // Privatemodule foo;fn void ab_public() { ... } // Publicmodule bar;import foo;fn void test(){    foo::ab_public(); // Works    // foo::ab_private(); <- Error, private method}\"><div></div></button></div></figure></div>\n<p>If the default visibility is <code dir=\"auto\">@private</code> or <code dir=\"auto\">@local</code>, using <code dir=\"auto\">@public</code> sets the visibility to public:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo @private;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">ab_private</span><span style=\"--0:#D6DEEB;--1:#403F53\">() { ... }</span><span style=\"--0:#809191;--1:#5E6578\">        // Private</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">ab_public</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @public { ... }</span><span style=\"--0:#809191;--1:#5E6578\"> // Public</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module foo @private;fn void ab_private() { ... }        // Privatefn void ab_public() @public { ... } // Public\"><div></div></button></div></figure></div>\n<h2 id=\"linker-visibility-and-exports\">Linker Visibility and Exports</h2>\n<p>A function or global prefixed <code dir=\"auto\">extern</code> will be assumed to be linked in later.\nAn “extern” function may not have a body, and global variables are prohibited\nfrom having an init expression.</p>\n<p>The attribute <code dir=\"auto\">@export</code> explicitly marks a function as being exported when\ncreating a (static or dynamic) library. It can also change the linker name of\nthe function.</p>\n<h2 id=\"using-functions-and-types-from-other-modules\">Using Functions and Types From Other Modules</h2>\n<p>As a rule, functions, macros, constants, variables and types in the same module do not need any namespace prefix. For imported modules the following rules hold:</p>\n<ol>\n<li>Functions, macros, constants and variables require <em>at least</em> the (sub-) module name.</li>\n<li>Types do not require the module name unless the name is ambiguous.</li>\n<li>In case of ambiguity, only so many levels of module names are needed as to make the symbol unambiguous.</li>\n</ol>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// File a.c3</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Bar { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> TheAStruct { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">anAFunction</span><span style=\"--0:#D6DEEB;--1:#403F53\">() { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// File b.c3</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Bar { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> TheBStruct { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">aBFunction</span><span style=\"--0:#D6DEEB;--1:#403F53\">() { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// File c.c3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> c;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import a, b;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> TheCStruct { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Bar { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">aCFunction</span><span style=\"--0:#D6DEEB;--1:#403F53\">() { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">TheAStruct stA;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">TheBStruct stB;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">TheCStruct stC;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Name required to avoid ambiguity;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">b::Foo stBFoo;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Will always pick the current module's</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// name.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Bar bar;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Namespace required:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">a::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">aAFunction</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">b::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">aBFunction</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// A local symbol does not require it:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">aCFunction</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// File a.c3module a;struct Foo { ... }struct Bar { ... }struct TheAStruct { ... }fn void anAFunction() { ... }// File b.c3module b;struct Foo { ... }struct Bar { ... }struct TheBStruct { ... }fn void aBFunction() { ... }// File c.c3module c;import a, b;struct TheCStruct { ... }struct Bar { ... }fn void aCFunction() { ... }fn void test(){    TheAStruct stA;    TheBStruct stB;    TheCStruct stC;    // Name required to avoid ambiguity;    b::Foo stBFoo;    // Will always pick the current module&#x27;s    // name.    Bar bar;    // Namespace required:    a::aAFunction();    b::aBFunction();    // A local symbol does not require it:    aCFunction();}\"><div></div></button></div></figure></div>\n<p>This means that the rule for the common case can be summarized as</p>\n<blockquote>\n<p>Types are used without prefix; functions, variables, macros and constants are prefixed with the sub module name.</p>\n</blockquote>\n<h2 id=\"module-sections\">Module Sections</h2>\n<p>A single file may have multiple module declarations, even for the same module. This allows us to write\nfor example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// File foo.c3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">hello_world</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">my_hello_world</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo @private;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span><span style=\"--0:#809191;--1:#5E6578\">         // The import is only visible in this section.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">my_hello_world</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span><span style=\"--0:#809191;--1:#5E6578\"> // @private by default</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Hello, world</span><span style=\"--0:#F78C6C;--1:#AA0982\">\\n</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo @test;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test_hello</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span><span style=\"--0:#809191;--1:#5E6578\"> // @test by default</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">assert</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#82AAFF;--1:#3C63B3\">hello_world</span><span style=\"--0:#D6DEEB;--1:#403F53\">() </span><span style=\"--0:#C792EA;--1:#8D46B4\">==</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// File foo.c3module foo;fn int hello_world(){    return my_hello_world();}module foo @private;import std::io;         // The import is only visible in this section.fn int my_hello_world() // @private by default{    io::printn(&#x22;Hello, world\\n&#x22;);    return 0;}module foo @test;fn void test_hello() // @test by default{    assert(hello_world() == 0);}\"><div></div></button></div></figure></div>\n<h2 id=\"versioning-and-dynamic-inclusion\">Versioning and Dynamic Inclusion</h2>\n<p><em>NOTE: This feature may significantly change.</em></p>\n<p>When including <em>dynamic</em> libraries, it is possible to use optional functions and globals. This is done using the\n<code dir=\"auto\">@dynamic</code> attribute.</p>\n<p>An example library could have this:</p>\n<p><code dir=\"auto\">dynlib.c3i</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> dynlib;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">do_something</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">dynamic</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">4.0</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">do_something_else</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">dynamic</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">5.0</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">do_another_thing</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">dynamic</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2.5</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module dynlib;fn void do_something() @dynamic(4.0)fn void do_something_else() @dynamic(0, 5.0)fn void do_another_thing() @dynamic(0, 2.5)\"><div></div></button></div></figure></div>\n<p>Importing the dynamic library and setting the base version to 4.5 and minimum version to 3.0, we get the following:</p>\n<p><code dir=\"auto\">test.c3</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import dynlib;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">available</span><span style=\"--0:#D6DEEB;--1:#403F53\">(dynlib::do_something))</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">dynlib::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">do_something</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">else</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">dynlib::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">do_someting_else</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import dynlib;fn void test(){    if (@available(dynlib::do_something))    {        dynlib::do_something();    }    else    {        dynlib::do_someting_else();    }}\"><div></div></button></div></figure></div>\n<p>In this example the code would run <code dir=\"auto\">do_something</code> if available\n(that is, when the dynamic library is 4.0 or higher), or\nfallback to <code dir=\"auto\">do_something_else</code> otherwise.</p>\n<p>If we tried to conditionally add something not available in the\ncompilation itself, that is a compile time error:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">available</span><span style=\"--0:#D6DEEB;--1:#403F53\">(dynlib::do_another_thing))</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Error: This function is not available with 3.0</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">dynlib::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">do_another_thing</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"if (@available(dynlib::do_another_thing)){    // Error: This function is not available with 3.0    dynlib::do_another_thing();}\"><div></div></button></div></figure></div>\n<p>Versionless dynamic loading is also possible:</p>\n<p><code dir=\"auto\">maybe_dynlib.c3i</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> maybe_dynlib;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">testme</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @dynamic;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module maybe_dynlib;fn void testme() @dynamic;\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">test2.c3</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import maybe_dynlib;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">testme2</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">available</span><span style=\"--0:#D6DEEB;--1:#403F53\">(maybe_dynlib::testme))</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">dynlib::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">testme</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import maybe_dynlib;fn void testme2(){    if (@available(maybe_dynlib::testme))    {        dynlib::testme();    }}\"><div></div></button></div></figure></div>\n<p>This allows things like optionally loading dynamic libraries on the\nplatforms where this is available.</p>\n<h2 id=\"textual-includes\">Textual Includes</h2>\n<h3 id=\"include\"><code dir=\"auto\">$include</code></h3>\n<p>It’s sometimes useful to include an entire file, doing so employs the <code dir=\"auto\">$include</code> function.\nIncludes are only valid at the top level.</p>\n<p>File <code dir=\"auto\">Foo.c3</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">include</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Foo.x</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printf</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#82AAFF;--1:#3C63B3\">testX</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">));</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module foo;$include(&#x22;Foo.x&#x22;);fn void test(){    io::printf(&#x22;%d&#x22;, testX(2));}\"><div></div></button></div></figure></div>\n<p>File <code dir=\"auto\">Foo.x</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#82AAFF;--1:#3C63B3\">testX</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\"> </span><span style=\"--0:#D7DBE0\">i</span><span style=\"--0:#D6DEEB\">)</span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> i </span><span style=\"--0:#C792EA;--1:#8D46B4\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn testX(int i){    return i + 1;}\"><div></div></button></div></figure></div>\n<p>The result is as if <code dir=\"auto\">Foo.c3</code> contained the following:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#82AAFF;--1:#3C63B3\">testX</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\"> </span><span style=\"--0:#D7DBE0\">i</span><span style=\"--0:#D6DEEB\">)</span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> i </span><span style=\"--0:#C792EA;--1:#8D46B4\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printf</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#82AAFF;--1:#3C63B3\">testX</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">));</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module foo;fn testX(int i){    return i + 1;}fn void test(){    io::printf(&#x22;%d&#x22;, testX(2));}\"><div></div></button></div></figure></div>\n<p>The include may use an absolute or relative path, the relative path is always relative to the source file in which the include appears.</p>\n<p>Note that to use it, the <strong>trust level</strong> of the compiler must be set to at least 2 with\nthe <code dir=\"auto\">--trust</code> option (i.e. use <code dir=\"auto\">--trust=include</code> or <code dir=\"auto\">--trust=full</code> from the command line).</p>\n<h3 id=\"exec\"><code dir=\"auto\">$exec</code></h3>\n<p>An alternative to <code dir=\"auto\">$include</code> is <code dir=\"auto\">$exec</code> which is similar to include, but instead includes the output of an external\nprogram as the included text.</p>\n<p>An example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// On Linux or MacOS this will insert 'String a = \"Hello world!\";'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">exec</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">echo</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, { </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">String a = </span><span style=\"--0:#F78C6C;--1:#AA0982\">\\\\\\\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Hello world!</span><span style=\"--0:#F78C6C;--1:#AA0982\">\\\\\\\"\\\\</span><span style=\"--0:#ECC48D;--1:#9B504E\">;</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\"> });</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">  </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;// On Linux or MacOS this will insert &#x27;String a = &#x22;Hello world!&#x22;;&#x27;$exec(&#x22;echo&#x22;, { &#x22;String a = \\\\\\&#x22;Hello world!\\\\\\&#x22;\\\\;&#x22; });fn void main(){  io::printn(a);}\"><div></div></button></div></figure></div>\n<p>Using <code dir=\"auto\">$exec</code> requires <strong>full trust level</strong>, which is enabled with <code dir=\"auto\">--trust=full</code> from the command line.</p>\n<p><code dir=\"auto\">$exec</code> will by default run from the <code dir=\"auto\">/scripts</code> directory for projects, for non-project builds,\nthe current directory is used as well.</p>\n<h4 id=\"exec-scripting\"><code dir=\"auto\">$exec</code> Scripting</h4>\n<p><code dir=\"auto\">$exec</code> allows a special scripting mode, where one or more C3 files are compiled on the fly and\nrun by <code dir=\"auto\">$exec</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Compile foo.c3 and bar.c3 in the /scripts directory, invoke the resulting binary</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// with the argument 'test'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">exec</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">foo.c3;bar.c3</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, { </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">test</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\"> });</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">  </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;// Compile foo.c3 and bar.c3 in the /scripts directory, invoke the resulting binary// with the argument &#x27;test&#x27;$exec(&#x22;foo.c3;bar.c3&#x22;, { &#x22;test&#x22; });fn void main(){  ...}\"><div></div></button></div></figure></div>\n<h2 id=\"non-recursive-imports\">Non-Recursive Imports</h2>\n<p>In specific circumstances you only wish to import a module <em>without</em> its submodules.\nThis can be helpful in certain situations where otherwise unnecessary name-collisions\nwould occur, but should not be used in the general case.</p>\n<p>The syntax for non-recursive imports is <code dir=\"auto\">import &#x3C;module_name> @norecurse;</code> for example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Non-recursive import</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import mylib @norecurse;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Normal import</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import mylib;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Non-recursive importimport mylib @norecurse;// Normal importimport mylib;\"><div></div></button></div></figure></div>\n<p>For example only importing “mylib” into “my_code” and not wishing to import “submod”.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"text\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">my_code</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">└── mylib</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">└── submod</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"my_code└── mylib    └── submod\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mylib;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">only_want_this</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">only_want_this</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mylib::submod;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">undesired_fn</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">undesired_fn</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> my_code;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Using Non-recursive import undesired_fn not found</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import mylib @norecurse;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Using Recursive import undesired_fn is found</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// import mylib;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">mylib::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">only_want_this</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">submod::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">undesired_fn</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span><span style=\"--0:#809191;--1:#5E6578\"> // This should error</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module mylib;import std::io;fn void only_want_this(){    io::printn(&#x22;only_want_this&#x22;);}module mylib::submod;import std::io;fn void undesired_fn(){    io::printn(&#x22;undesired_fn&#x22;);}module my_code;// Using Non-recursive import undesired_fn not foundimport mylib @norecurse;// Using Recursive import undesired_fn is found// import mylib;fn void main(){    mylib::only_want_this();    submod::undesired_fn(); // This should error}\"><div></div></button></div></figure></div>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>You can import multiple modules in one line:</p><div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import lib1, lib2;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import lib1, lib2;\"><div></div></button></div></figure></div><p><code dir=\"auto\">@norecurse</code> can be applied to one of those imports individually:</p><div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import lib1 @norecurse, lib2;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import lib1 @norecurse, lib2;\"><div></div></button></div></figure></div><p>Here only <code dir=\"auto\">lib1</code> is imported non-recursively and <code dir=\"auto\">lib2</code> is imported normally, recursively.</p></section></aside>";

				const frontmatter = {"title":"Modules","description":"Modules","sidebar":{"order":46}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Language Fundamentals/modules.md";
				const url = undefined;
				function rawContent() {
					return "\n\nC3 groups functions, types, variables and macros into namespaces called modules. When doing builds, any C3 file must start with the `module` keyword, specifying the module. When compiling single files, the module is not needed and the module name is assumed to be the file name, converted to lower case, with any invalid characters replaced by underscore (`_`).\n\nA module can consist of multiple files, e.g.\n\n`file_a.c3`\n\n```c3\nmodule foo;\n\n/* ... */\n```\n\n`file_b.c3`\n\n```c3\nmodule foo;\n\n/* ... */\n```\n\n`file_c.c3`\n\n```c3\nmodule bar;\n\n/* ... */\n```\n\nHere `file_a.c3` and `file_b.c3` belong to the same module, **foo** while `file_c.c3` belongs to to **bar**.\n\n## Details\n\nSome details about the C3 module system:\n\n- Modules can be arbitrarily nested, e.g. `module foo::bar::baz;` to create the sub module baz in the sub module `bar` of the module `foo`.\n- Module names must be alphanumeric lower case letters plus the underscore character: `_`.\n- Module names are limited to 31 characters.\n- Modules may be spread across multiple files.\n- A single file may have multiple module declarations.\n- Each declaration of a distinct module is called a *module section*.\n\n## Importing Modules\n\nModules are imported using the `import` statement. Imports always *recursively import* sub-modules. Any module\nwill automatically import all other modules with the same parent module.\n\n`foo.c3`\n\n```c3\nmodule some::foo;\nfn void test() {}\n```\n\n`bar.c3`\n\n```c3\nmodule bar;\nimport some;\n// import some::foo; <- not needed, as it is a sub module to \"some\"\nfn void test()\n{\n    foo::test();\n    // some::foo::test() also works.\n}\n```\n\nIn some cases there may be ambiguities, in which case the full path can be used to resolve the ambiguity:\n\n`abc.c3`\n\n```c3\nmodule abc;\nstruct Context\n{\n    int a;\n}\n```\n\n`de.c3`\n\n```c3\nmodule de;\nstruct Context\n{\n    void* ptr;\n}\n```\n\n`test.c3`\n\n```c3\nmodule test1;\nimport de, abc;\n// Context c = {} <- ambiguous\nabc::Context c = {};\n```\n\n## Implicit Imports\n\nThe module system will also implicitly import:\n\n1. The `std::core` module (and sub modules).\n2. Any other module sharing the same top module. E.g. the module `foo::abc` will implicitly also import modules `foo` and `foo::cde` if they exist.\n\n## Visibility\n\nAll files in the same module share the same global declaration namespace. By default a symbol is visible to all other modules.\nTo make a symbol only visible inside the module, use the `@private` attribute.\n\n```c3\nmodule foo;\n\nfn void init() { .. }\n\nfn void open() @private { .. }\n```\n\nIn this example, the other modules can use the init() function after importing foo, but only files in the foo module can use open(), as it is specified as `private`.\n\nIt's possible to further restrict visibility: `@local` works like `@private` except it's only visible in the\nlocal context.\n\n```c3\n// File foo.c3\nmodule foo;\nfn void abc() @private { }\nfn void de() @local { }\n\n// File foo2.c3\nmodule foo;\nfn void test()\n{\n    abc(); // Access of private in the same module is ok\n    // de(); <- Error: function is local to foo.c3\n}\n```\n\n## Overriding Symbol Visibility Rules\n\nBy using `import <module> @public`, it's possible to access another module´s private symbols.\nMany other module systems have hierarchal visibility rules, but the `import @public` feature allows\nvisibility to be manipulated in a more ad-hoc manner without imposing hard rules.\n\nFor example, you may provide a library with two modules: \"mylib::net\" and \"mylib::file\" - which both use functions\nand types from a common \"mylib::internals\" module. The two libraries use `import mylib::internals @public`\nto access this module's private functions and type. To an external user of the library, the \"mylib::internals\"\ndoes not seem to exist, but inside of your library you use it as a shared dependency.\n\nA simple example:\n\n```c3\n// File a.c3\nmodule a;\n\nfn void a_function() @private { ... }\n\n// File b.c3\nmodule b;\n\nfn void b_function() @private { ... }\n\n// File c.c3\nmodule c;\nimport a;\nimport b @public;\n\nfn void test()\n{\n    // Error! a_function() is private\n    a::a_function(); \n\n    // Allowed since `import b @public` allowed `b`\n    // to \"public\" in this context.\n    b::b_function(); \n}\n```\n\n*Note: `@local` visibility cannot be overridden using a \"@public\" import.*\n\n## Changing The Default Visibility\n\nIn a normal module, global declarations will be public by default. If some other\nvisibility is desired, it's possible to declare `@private` or `@local` after the module name.\nIt will affect all declaration in the same section.\n\n```c3\nmodule foo @private;\n\nfn void ab_private() { ... } // Private\n\nmodule foo;\n\nfn void ab_public() { ... } // Public\n\nmodule bar;\nimport foo;\n\nfn void test()\n{\n    foo::ab_public(); // Works\n    // foo::ab_private(); <- Error, private method\n}\n```\n\nIf the default visibility is `@private` or `@local`, using `@public` sets the visibility to public:\n\n```c3\nmodule foo @private;\n\nfn void ab_private() { ... }        // Private\nfn void ab_public() @public { ... } // Public\n```\n\n## Linker Visibility and Exports\n\nA function or global prefixed `extern` will be assumed to be linked in later.\nAn \"extern\" function may not have a body, and global variables are prohibited\nfrom having an init expression.\n\nThe attribute `@export` explicitly marks a function as being exported when\ncreating a (static or dynamic) library. It can also change the linker name of\nthe function.\n\n## Using Functions and Types From Other Modules\n\nAs a rule, functions, macros, constants, variables and types in the same module do not need any namespace prefix. For imported modules the following rules hold:\n\n1. Functions, macros, constants and variables require *at least* the (sub-) module name.\n2. Types do not require the module name unless the name is ambiguous.\n3. In case of ambiguity, only so many levels of module names are needed as to make the symbol unambiguous.\n\n\n```c3\n// File a.c3\n\nmodule a;\n\nstruct Foo { ... }\nstruct Bar { ... }\nstruct TheAStruct { ... }\n\nfn void anAFunction() { ... }\n\n// File b.c3\n\nmodule b;\n\nstruct Foo { ... }\nstruct Bar { ... }\nstruct TheBStruct { ... }\n\nfn void aBFunction() { ... }\n\n// File c.c3\nmodule c;\nimport a, b;\n\nstruct TheCStruct { ... }\nstruct Bar { ... }\n\nfn void aCFunction() { ... }\n\nfn void test()\n{\n    TheAStruct stA;\n    TheBStruct stB;\n    TheCStruct stC;\n    // Name required to avoid ambiguity;\n    b::Foo stBFoo;\n    // Will always pick the current module's\n    // name.\n    Bar bar;\n    // Namespace required:\n    a::aAFunction();\n    b::aBFunction();\n    // A local symbol does not require it:\n    aCFunction();\n}\n```\n\nThis means that the rule for the common case can be summarized as\n\n> Types are used without prefix; functions, variables, macros and constants are prefixed with the sub module name.\n\n\n## Module Sections\n\nA single file may have multiple module declarations, even for the same module. This allows us to write\nfor example:\n\n```c3\n// File foo.c3\nmodule foo;\nfn int hello_world()\n{\n    return my_hello_world();\n}\n\nmodule foo @private;\nimport std::io;         // The import is only visible in this section.\nfn int my_hello_world() // @private by default\n{\n    io::printn(\"Hello, world\\n\");\n    return 0;\n}\n\nmodule foo @test;\nfn void test_hello() // @test by default\n{\n    assert(hello_world() == 0);\n}\n```\n\n## Versioning and Dynamic Inclusion\n\n_NOTE: This feature may significantly change._\n\nWhen including *dynamic* libraries, it is possible to use optional functions and globals. This is done using the\n`@dynamic` attribute.\n\nAn example library could have this:\n\n`dynlib.c3i`\n\n```c3\nmodule dynlib;\nfn void do_something() @dynamic(4.0)\nfn void do_something_else() @dynamic(0, 5.0)\nfn void do_another_thing() @dynamic(0, 2.5)\n```\n\nImporting the dynamic library and setting the base version to 4.5 and minimum version to 3.0, we get the following:\n\n`test.c3`\n\n```c3\nimport dynlib;\nfn void test()\n{\n    if (@available(dynlib::do_something))\n    {\n        dynlib::do_something();\n    }\n    else\n    {\n        dynlib::do_someting_else();\n    }\n}\n```\n\nIn this example the code would run `do_something` if available \n(that is, when the dynamic library is 4.0 or higher), or\nfallback to `do_something_else` otherwise.\n\nIf we tried to conditionally add something not available in the \ncompilation itself, that is a compile time error:\n\n```c3\nif (@available(dynlib::do_another_thing))\n{\n    // Error: This function is not available with 3.0\n    dynlib::do_another_thing(); \n}\n```\n\nVersionless dynamic loading is also possible:\n\n`maybe_dynlib.c3i`\n\n```c3\nmodule maybe_dynlib;\nfn void testme() @dynamic;\n```\n\n`test2.c3`\n\n```c3\nimport maybe_dynlib;\nfn void testme2()\n{\n    if (@available(maybe_dynlib::testme))\n    {\n        dynlib::testme();\n    }\n}\n```\n\nThis allows things like optionally loading dynamic libraries on the \nplatforms where this is available.\n\n## Textual Includes\n\n### `$include`\n\nIt's sometimes useful to include an entire file, doing so employs the `$include` function.\nIncludes are only valid at the top level.\n\n\nFile `Foo.c3`\n```c3\nmodule foo;\n\n$include(\"Foo.x\");\n\nfn void test()\n{\n    io::printf(\"%d\", testX(2));\n}\n```\n\nFile `Foo.x`\n```c3\nfn testX(int i)\n{\n    return i + 1;\n}\n```\n\nThe result is as if `Foo.c3` contained the following:\n\n```c3\nmodule foo;\n\nfn testX(int i)\n{\n    return i + 1;\n}\n\nfn void test()\n{\n    io::printf(\"%d\", testX(2));\n}\n```\n\nThe include may use an absolute or relative path, the relative path is always relative to the source file in which the include appears.\n\nNote that to use it, the **trust level** of the compiler must be set to at least 2 with\nthe `--trust` option (i.e. use `--trust=include` or `--trust=full` from the command line).\n\n### `$exec`\n\nAn alternative to `$include` is `$exec` which is similar to include, but instead includes the output of an external\nprogram as the included text.\n\nAn example:\n```c3\nimport std::io;\n\n// On Linux or MacOS this will insert 'String a = \"Hello world!\";'\n$exec(\"echo\", { \"String a = \\\\\\\"Hello world!\\\\\\\"\\\\;\" });\n\nfn void main()\n{\n\tio::printn(a);\n}\n```\n\nUsing `$exec` requires **full trust level**, which is enabled with `--trust=full` from the command line.\n\n`$exec` will by default run from the `/scripts` directory for projects, for non-project builds,\nthe current directory is used as well.\n\n#### `$exec` Scripting\n\n`$exec` allows a special scripting mode, where one or more C3 files are compiled on the fly and\nrun by `$exec`.\n\n```c\nimport std::io;\n\n// Compile foo.c3 and bar.c3 in the /scripts directory, invoke the resulting binary\n// with the argument 'test'\n$exec(\"foo.c3;bar.c3\", { \"test\" });\n\nfn void main()\n{\n\t...\n}\n```\n\n## Non-Recursive Imports\n\nIn specific circumstances you only wish to import a module *without* its submodules.\nThis can be helpful in certain situations where otherwise unnecessary name-collisions\nwould occur, but should not be used in the general case.\n\nThe syntax for non-recursive imports is `import <module_name> @norecurse;` for example:\n```c3\n// Non-recursive import\nimport mylib @norecurse; \n\n// Normal import\nimport mylib; \n```\n\nFor example only importing \"mylib\" into \"my_code\" and not wishing to import \"submod\".\n\n```text\nmy_code\n└── mylib\n    └── submod\n```\n\n```c3\nmodule mylib;\nimport std::io;\nfn void only_want_this()\n{\n    io::printn(\"only_want_this\");\n}\n\nmodule mylib::submod;\nimport std::io;\nfn void undesired_fn()\n{\n    io::printn(\"undesired_fn\");\n}\n\nmodule my_code;\n// Using Non-recursive import undesired_fn not found\nimport mylib @norecurse; \n\n// Using Recursive import undesired_fn is found\n// import mylib;\n\nfn void main()\n{\n    mylib::only_want_this();\n    submod::undesired_fn(); // This should error\n}\n```\n\n:::note \nYou can import multiple modules in one line:\n```c3\nimport lib1, lib2;\n```\n`@norecurse` can be applied to one of those imports individually:\n\n```c3\nimport lib1 @norecurse, lib2;\n```\nHere only `lib1` is imported non-recursively and `lib2` is imported normally, recursively.\n:::\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"details","text":"Details"},{"depth":2,"slug":"importing-modules","text":"Importing Modules"},{"depth":2,"slug":"implicit-imports","text":"Implicit Imports"},{"depth":2,"slug":"visibility","text":"Visibility"},{"depth":2,"slug":"overriding-symbol-visibility-rules","text":"Overriding Symbol Visibility Rules"},{"depth":2,"slug":"changing-the-default-visibility","text":"Changing The Default Visibility"},{"depth":2,"slug":"linker-visibility-and-exports","text":"Linker Visibility and Exports"},{"depth":2,"slug":"using-functions-and-types-from-other-modules","text":"Using Functions and Types From Other Modules"},{"depth":2,"slug":"module-sections","text":"Module Sections"},{"depth":2,"slug":"versioning-and-dynamic-inclusion","text":"Versioning and Dynamic Inclusion"},{"depth":2,"slug":"textual-includes","text":"Textual Includes"},{"depth":3,"slug":"include","text":"$include"},{"depth":3,"slug":"exec","text":"$exec"},{"depth":4,"slug":"exec-scripting","text":"$exec Scripting"},{"depth":2,"slug":"non-recursive-imports","text":"Non-Recursive Imports"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
