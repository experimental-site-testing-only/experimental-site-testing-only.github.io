import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>During compilation, constant expressions will automatically be folded. Together with the compile\ntime conditional statements <code dir=\"auto\">$if</code>, <code dir=\"auto\">$switch</code> and the compile time iteration statements <code dir=\"auto\">$for</code> <code dir=\"auto\">$foreach</code>\nit is possible to perform limited compile time execution.</p>\n<h3 id=\"compile-time-values\">Compile time values</h3>\n<p>During compilation, global constants are considered compile time values, as are any\nderived constant values, such as type names and sizes, variable alignments etc.</p>\n<p>Inside of a macro or a function, it is possible to define mutable compile time variables. Such\nlocal variables are prefixed with <code dir=\"auto\">$</code> (e.g. <code dir=\"auto\">$foo</code>). It is also possible to define local <em>type</em> variables,\nthat are also prefixed using <code dir=\"auto\">$</code> (e.g. <code dir=\"auto\">$MyType</code> <code dir=\"auto\">$ParamType</code>).</p>\n<p>Mutable compile time variables are <em>not</em> allowed in the global scope.</p>\n<h3 id=\"if-and-switch\"><code dir=\"auto\">$if</code> and <code dir=\"auto\">$switch</code></h3>\n<p><code dir=\"auto\">$if &#x3C;const expr>:</code> takes a compile time constant value and evaluates it to true or false.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">($x, </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x </span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">+=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">else</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">+=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$endif</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">const</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FOO </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">10</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">5</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, a);</span><span style=\"--0:#809191;--1:#5E6578\"> // Allowed, expands to a += 1;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// @foo(b, a); // Error: b is not a compile time constant.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(FOO, a);</span><span style=\"--0:#809191;--1:#5E6578\"> // Allowed, expands to a += FOO * FOO;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro @foo($x, #y){    $if $x > 3:        #y += $x * $x;    $else        #y += $x;    $endif}const int FOO = 10;fn void test(){    int a = 5;    int b = 4;    @foo(1, a); // Allowed, expands to a += 1;    // @foo(b, a); // Error: b is not a compile time constant.    @foo(FOO, a); // Allowed, expands to a += FOO * FOO;}\"><div></div></button></div></figure></div>\n<p>For switching between multiple possibilities, use <code dir=\"auto\">$switch</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">($x, </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ($x)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">+=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">+=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">*=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">-=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$endswitch</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro @foo($x, #y){    $switch ($x)        $case 1:            #y += $x * $x;        $case 2:            #y += $x;        $case 3:            #y *= $x;        $default:            #y -= $x;    $endswitch}\"><div></div></button></div></figure></div>\n<p>Switching without argument is also allowed, which works like an if-else chain:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">($x, </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x </span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">10</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">+=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">+=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C5E478;--1:#3C63B3\">#y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">-=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$endswitch</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro @foo($x, #y){    $switch        $case $x > 10:            #y += $x * $x;        $case $x < 0:            #y += $x;        $default:            #y -= $x;    $endswitch}\"><div></div></button></div></figure></div>\n<h3 id=\"loops-using-foreach-and-for\">Loops using <code dir=\"auto\">$foreach</code> and <code dir=\"auto\">$for</code></h3>\n<p><code dir=\"auto\">$for</code> … <code dir=\"auto\">$endfor</code> works analogous to <code dir=\"auto\">for</code>, only it is limited to using compile time variables. <code dir=\"auto\">$foreach</code> … <code dir=\"auto\">$endforeach</code> similarly\nmatches the behaviour of <code dir=\"auto\">foreach</code>.</p>\n<p>Compile time looping:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\">($</span><span style=\"--0:#D7DBE0\">a</span><span style=\"--0:#D6DEEB\">)</span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">for</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (var $x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">; $x </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $a; $x</span><span style=\"--0:#C792EA;--1:#8D46B4\">++</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, $x);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$endfor</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Expands to -></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// io::printfn(\"%d\", 0);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// io::printfn(\"%d\", 1);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro foo($a){    $for (var $x = 0; $x < $a; $x++)        io::printfn(&#x22;%d&#x22;, $x);    $endfor}fn void test(){    foo(2);    // Expands to ->    // io::printfn(&#x22;%d&#x22;, 0);    // io::printfn(&#x22;%d&#x22;, 1);}\"><div></div></button></div></figure></div>\n<p>Looping over enums:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo_enum</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\">($</span><span style=\"--0:#D7DBE0\">SomeEnum</span><span style=\"--0:#D6DEEB\">)</span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foreach</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ($x : $</span><span style=\"--0:#C5E478;--1:#3C63B3\">SomeEnum</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">values</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, (</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">)$x);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$endforeach</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> MyEnum</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">A</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">B</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo_enum</span><span style=\"--0:#D6DEEB;--1:#403F53\">(MyEnum);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Expands to -></span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// io::printfn(\"%d\", (int)MyEnum.A);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// io::printfn(\"%d\", (int)MyEnum.B);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro foo_enum($SomeEnum){    $foreach ($x : $SomeEnum.values)        io::printfn(&#x22;%d&#x22;, (int)$x);    $endforeach}enum MyEnum{    A,    B,}fn void test(){    foo_enum(MyEnum);    // Expands to ->    // io::printfn(&#x22;%d&#x22;, (int)MyEnum.A);    // io::printfn(&#x22;%d&#x22;, (int)MyEnum.B);}\"><div></div></button></div></figure></div>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>The content of the <code dir=\"auto\">$foreach</code> or <code dir=\"auto\">$for</code> body must be at least a complete statement.\nIt’s not possible to compile partial statements.</p></section></aside>\n<h3 id=\"compile-time-macro-execution\">Compile time macro execution</h3>\n<p>If a macro only takes compile time parameters, that is only <code dir=\"auto\">$</code>-prefixed parameters, and then does not generate\nany other statements than returns, then the macro will be completely compile time executed.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">($abc)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $abc </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">const</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> MY_CONST </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\"> // Will fold to \"4\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro @test($abc){    return $abc * 2;}const int MY_CONST = @test(2); // Will fold to &#x22;4&#x22;\"><div></div></button></div></figure></div>\n<p>This constant evaluation allows us to write some limited compile time code. For example, this\nmacro will compute Fibonacci at compile time:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#C792EA;--1:#8D46B4\">long</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">fib</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">long</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $n)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $n </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $n;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">else</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">fib</span><span style=\"--0:#D6DEEB;--1:#403F53\">($n </span><span style=\"--0:#C792EA;--1:#8D46B4\">-</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">) </span><span style=\"--0:#C792EA;--1:#8D46B4\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">fib</span><span style=\"--0:#D6DEEB;--1:#403F53\">($n </span><span style=\"--0:#C792EA;--1:#8D46B4\">-</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$endif</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro long @fib(long $n){    $if $n <= 1:        return $n;    $else        return @fib($n - 1) + @fib($n - 2);    $endif}\"><div></div></button></div></figure></div>\n<p>It is important to remember that if we had replaced <code dir=\"auto\">$n</code> with <code dir=\"auto\">n</code> the compiler would have complained. <code dir=\"auto\">n &#x3C;= 1</code>\nis not be considered to be a constant expression, even if the actual argument to the macro was a constant.\nThis limitation is deliberate, to offer control over what is compiled out and what isn’t.</p>\n<h3 id=\"conditional-compilation-at-the-top-level-using-if\">Conditional compilation at the top level using <code dir=\"auto\">@if</code></h3>\n<p>At the top level, conditional compilation is controlled using with <code dir=\"auto\">@if</code> attributes on declarations</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo_win32</span><span style=\"--0:#D6DEEB;--1:#403F53\">() @</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\">(env::WIN32)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#616671\">    </span></span><span style=\"--0:#809191;--1:#616671\">/* .... */</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b @</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\">(env::NO_LIBC);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void foo_win32() @if(env::WIN32){    /* .... */}struct Foo{    int a;    int b @if(env::NO_LIBC);}\"><div></div></button></div></figure></div>\n<p>The argument to <code dir=\"auto\">@if</code> must be possible to resolve to a constant at compile time. This means that argument\nmay also be a compile time evaluated macro:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">($x) </span><span style=\"--0:#C792EA;--1:#8D46B4\">=></span><span style=\"--0:#D6DEEB;--1:#403F53\"> $x </span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x @</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\">(@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">5</span><span style=\"--0:#D6DEEB;--1:#403F53\">));</span><span style=\"--0:#809191;--1:#5E6578\"> // Will be included</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> y @</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\">(@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">));</span><span style=\"--0:#809191;--1:#5E6578\"> // Will not be included</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"macro bool @foo($x) => $x > 2;int x @if(@foo(5)); // Will be includedint y @if(@foo(0)); // Will not be included\"><div></div></button></div></figure></div>\n<h4 id=\"evaluation-order-of-top-level-conditional-compilation\">Evaluation order of top level conditional compilation</h4>\n<p>Conditional compilation at the top level can cause unexpected ordering issues, especially when combined with\n<code dir=\"auto\">$defined</code>. At a high level, there are three phases of evaluation:</p>\n<ol>\n<li>Non-conditional declarations are registered.</li>\n<li>Conditional module sections are either discarded or have all of their non-conditional declarations registered.</li>\n<li>Each module in turn will evaluate <code dir=\"auto\">@if</code> attributes for each module section.</li>\n</ol>\n<p>The order of module and module section evaluation in (2) and (3) is not deterministic and any use of <code dir=\"auto\">$defined</code> should not\nrely on this ordering.</p>\n<h2 id=\"compile-time-introspection\">Compile time introspection</h2>\n<p>At compile time, full type information is available. This allows for creation of reusable, code generating macros for things\nlike serialization.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">usz foo_alignment </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">alignof</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">usz foo_member_count </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#FAF39F;--1:#111111\">membersof</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">len</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String foo_name </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">nameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"usz foo_alignment = Foo.alignof;usz foo_member_count = Foo.membersof.len;String foo_name = Foo.nameof;\"><div></div></button></div></figure></div>\n<p>To read more about all the fields available at compile time, see the page on <a href=\"/generic-programming/reflection\">reflection</a>.</p>\n<h2 id=\"compile-time-functions\">Compile time functions</h2>\n<p>A set of compile time functions are available at compile time:</p>\n<h3 id=\"alignof\"><code dir=\"auto\">$alignof</code></h3>\n<p>Get the alignment of something. See <a href=\"/generic-programming/reflection\">reflection</a>.</p>\n<h3 id=\"append\"><code dir=\"auto\">$append</code></h3>\n<p>Append a compile time constant to a compile time array or untyped list.</p>\n<h3 id=\"assert\"><code dir=\"auto\">$assert</code></h3>\n<p>Check a condition at compile time.</p>\n<h3 id=\"assignable\"><code dir=\"auto\">$assignable</code></h3>\n<p>Check if an expression is assignable to the given type, e.g. <code dir=\"auto\">Type x = expr;</code> would be valid.</p>\n<h3 id=\"defined\"><code dir=\"auto\">$defined</code></h3>\n<p>Returns true if a type or identifier is defined. See <a href=\"/generic-programming/reflection\">reflection</a>.</p>\n<h3 id=\"echo\"><code dir=\"auto\">$echo</code></h3>\n<p>Print a message to stdout when compiling the code.</p>\n<h3 id=\"embed\"><code dir=\"auto\">$embed</code></h3>\n<p>Embed binary data from a file. See <a href=\"/language-fundamentals/expressions/\">expressions</a>.</p>\n<h3 id=\"error\"><code dir=\"auto\">$error</code></h3>\n<p>When this is compiled, issue a compile time error.</p>\n<h3 id=\"eval\"><code dir=\"auto\">$eval</code></h3>\n<p>Converts a compile time string to the corresponding variable or function. See <a href=\"/generic-programming/reflection\">reflection</a>.</p>\n<h3 id=\"evaltype\"><code dir=\"auto\">$evaltype</code></h3>\n<p>Converts a compile time string to the corresponding type. See <a href=\"/generic-programming/reflection\">reflection</a>.</p>\n<h3 id=\"exec\"><code dir=\"auto\">$exec</code></h3>\n<p>Execute a script at compile time and include the result in the source code.</p>\n<h3 id=\"extnameof-qnameof-and-nameof\"><code dir=\"auto\">$extnameof</code>, <code dir=\"auto\">$qnameof</code> and <code dir=\"auto\">$nameof</code></h3>\n<p>Get the external name of a symbol. See <a href=\"/generic-programming/reflection\">reflection</a>.</p>\n<h3 id=\"feature\"><code dir=\"auto\">$feature</code></h3>\n<p>Check if a given feature is enabled.</p>\n<h3 id=\"is_const\"><code dir=\"auto\">$is_const</code></h3>\n<p>Check if the expression is constant at compile time.</p>\n<h3 id=\"nameof\"><code dir=\"auto\">$nameof</code></h3>\n<p>Get the local name of a symbol. See <a href=\"/generic-programming/reflection\">reflection</a>.</p>\n<h3 id=\"offsetof\"><code dir=\"auto\">$offsetof</code></h3>\n<p>Get the offset of a member. See <a href=\"/generic-programming/reflection\">reflection</a>.</p>\n<h3 id=\"qnameof\"><code dir=\"auto\">$qnameof</code></h3>\n<p>Get the qualified name of a symbol. See <a href=\"/generic-programming/reflection\">reflection</a>.</p>\n<h3 id=\"vacount\"><code dir=\"auto\">$vacount</code></h3>\n<p>Return the number of macro vaarg arguments</p>\n<h3 id=\"vaconst\"><code dir=\"auto\">$vaconst</code></h3>\n<p>Return a vaarg as a <code dir=\"auto\">$constant</code> parameter.</p>\n<h3 id=\"vaexpr\"><code dir=\"auto\">$vaexpr</code></h3>\n<p>Return a vaarg as an <code dir=\"auto\">#expr</code> parameter.</p>\n<h3 id=\"vasplat\"><code dir=\"auto\">$vasplat</code></h3>\n<p>Expand the vaargs in an initializer list or function call.</p>\n<h3 id=\"vatype\"><code dir=\"auto\">$vatype</code></h3>\n<p>Get a vaarg as a <code dir=\"auto\">$Type</code> parameter.</p>\n<h3 id=\"sizeof\"><code dir=\"auto\">$sizeof</code></h3>\n<p>Return the size of an expression.</p>\n<h3 id=\"stringify\"><code dir=\"auto\">$stringify</code></h3>\n<p>Turn an expression into a string.</p>\n<h3 id=\"typeof\"><code dir=\"auto\">$typeof</code></h3>\n<p>Get the type of an expression (without evaluating it).</p>\n<h3 id=\"typefrom\"><code dir=\"auto\">$typefrom</code></h3>\n<p>Get a type from a compile time constant <code dir=\"auto\">typeid</code>.</p>";

				const frontmatter = {"title":"Compile Time Evaluation","description":"Compile time introspection and execution","sidebar":{"order":84}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Generic Programming/compiletime.md";
				const url = undefined;
				function rawContent() {
					return "During compilation, constant expressions will automatically be folded. Together with the compile\ntime conditional statements `$if`, `$switch` and the compile time iteration statements `$for` `$foreach`\nit is possible to perform limited compile time execution.\n\n### Compile time values\n\nDuring compilation, global constants are considered compile time values, as are any \nderived constant values, such as type names and sizes, variable alignments etc.\n\nInside of a macro or a function, it is possible to define mutable compile time variables. Such\nlocal variables are prefixed with `$` (e.g. `$foo`). It is also possible to define local *type* variables,\nthat are also prefixed using `$` (e.g. `$MyType` `$ParamType`).\n\nMutable compile time variables are *not* allowed in the global scope.\n\n### `$if` and `$switch`\n\n`$if <const expr>:` takes a compile time constant value and evaluates it to true or false.\n\n```c3\nmacro @foo($x, #y)\n{\n    $if $x > 3:\n        #y += $x * $x;\n    $else\n        #y += $x;\n    $endif\n}\n\nconst int FOO = 10;\n\nfn void test()\n{\n    int a = 5;\n    int b = 4;\n    @foo(1, a); // Allowed, expands to a += 1;\n    // @foo(b, a); // Error: b is not a compile time constant.\n    @foo(FOO, a); // Allowed, expands to a += FOO * FOO;\n}\n```\n\nFor switching between multiple possibilities, use `$switch`.\n\n```c3\nmacro @foo($x, #y)\n{\n    $switch ($x)\n        $case 1: \n            #y += $x * $x;\n        $case 2:\n            #y += $x;\n        $case 3:\n            #y *= $x;\n        $default:\n            #y -= $x;\n    $endswitch\n}\n```\n\nSwitching without argument is also allowed, which works like an if-else chain:\n\n```c3\nmacro @foo($x, #y)\n{\n    $switch \n        $case $x > 10: \n            #y += $x * $x;\n        $case $x < 0:\n            #y += $x;\n        $default:\n            #y -= $x;\n    $endswitch\n}\n```\n\n### Loops using `$foreach` and `$for`\n\n`$for` ... `$endfor` works analogous to `for`, only it is limited to using compile time variables. `$foreach` ... `$endforeach` similarly \nmatches the behaviour of `foreach`.\n\nCompile time looping:\n\n```c3\nmacro foo($a)\n{\n    $for (var $x = 0; $x < $a; $x++)\n        io::printfn(\"%d\", $x);     \n    $endfor\n}\n\nfn void test()\n{\n    foo(2);\n    // Expands to ->\n    // io::printfn(\"%d\", 0);     \n    // io::printfn(\"%d\", 1);         \n}\n```\n\nLooping over enums:\n\n```c3\nmacro foo_enum($SomeEnum)\n{\n    $foreach ($x : $SomeEnum.values)\n        io::printfn(\"%d\", (int)$x);     \n    $endforeach\n}\n\nenum MyEnum\n{\n    A,\n    B,\n}\n\nfn void test()\n{\n    foo_enum(MyEnum);\n    // Expands to ->\n    // io::printfn(\"%d\", (int)MyEnum.A);\n    // io::printfn(\"%d\", (int)MyEnum.B);    \n}\n```\n\n:::note\nThe content of the `$foreach` or `$for` body must be at least a complete statement.\nIt's not possible to compile partial statements.\n:::\n\n### Compile time macro execution\n\nIf a macro only takes compile time parameters, that is only `$`-prefixed parameters, and then does not generate \nany other statements than returns, then the macro will be completely compile time executed.\n\n```c3\nmacro @test($abc)\n{\n    return $abc * 2;\n}\n\nconst int MY_CONST = @test(2); // Will fold to \"4\"\n```\n\nThis constant evaluation allows us to write some limited compile time code. For example, this\nmacro will compute Fibonacci at compile time:\n\n```c3\nmacro long @fib(long $n)\n{\n    $if $n <= 1:\n        return $n;\n    $else\n        return @fib($n - 1) + @fib($n - 2);\n    $endif\n}\n```\n\nIt is important to remember that if we had replaced `$n` with `n` the compiler would have complained. `n <= 1` \nis not be considered to be a constant expression, even if the actual argument to the macro was a constant.\nThis limitation is deliberate, to offer control over what is compiled out and what isn't.\n\n### Conditional compilation at the top level using `@if`\n\nAt the top level, conditional compilation is controlled using with `@if` attributes on declarations\n\n```c3\nfn void foo_win32() @if(env::WIN32)\n{\n    /* .... */\n}\n\nstruct Foo\n{\n    int a;\n    int b @if(env::NO_LIBC);\n}\n```\n\nThe argument to `@if` must be possible to resolve to a constant at compile time. This means that argument\nmay also be a compile time evaluated macro:\n\n```c3\nmacro bool @foo($x) => $x > 2;\n\nint x @if(@foo(5)); // Will be included\nint y @if(@foo(0)); // Will not be included\n```\n\n#### Evaluation order of top level conditional compilation\n\nConditional compilation at the top level can cause unexpected ordering issues, especially when combined with \n`$defined`. At a high level, there are three phases of evaluation:\n\n1. Non-conditional declarations are registered.\n2. Conditional module sections are either discarded or have all of their non-conditional declarations registered.\n3. Each module in turn will evaluate `@if` attributes for each module section. \n\nThe order of module and module section evaluation in (2) and (3) is not deterministic and any use of `$defined` should not \nrely on this ordering.\n\n## Compile time introspection\n\nAt compile time, full type information is available. This allows for creation of reusable, code generating macros for things\nlike serialization.\n\n```c3    \nusz foo_alignment = Foo.alignof;\nusz foo_member_count = Foo.membersof.len;\nString foo_name = Foo.nameof; \n```\n\nTo read more about all the fields available at compile time, see the page on [reflection](/generic-programming/reflection).\n\n## Compile time functions\n\nA set of compile time functions are available at compile time:\n\n### `$alignof`\n\nGet the alignment of something. See [reflection](/generic-programming/reflection).\n\n### `$append`\n\nAppend a compile time constant to a compile time array or untyped list.\n\n### `$assert`\n\nCheck a condition at compile time.\n\n### `$assignable`\n\nCheck if an expression is assignable to the given type, e.g. `Type x = expr;` would be valid.\n\n### `$defined`\n\nReturns true if a type or identifier is defined. See [reflection](/generic-programming/reflection).\n\n### `$echo`\n\nPrint a message to stdout when compiling the code.\n\n### `$embed`\n\nEmbed binary data from a file. See [expressions](/language-fundamentals/expressions/).\n\n### `$error`\n\nWhen this is compiled, issue a compile time error.\n\n### `$eval`\n\nConverts a compile time string to the corresponding variable or function. See [reflection](/generic-programming/reflection).\n\n### `$evaltype`\n\nConverts a compile time string to the corresponding type. See [reflection](/generic-programming/reflection).\n\n### `$exec`\n\nExecute a script at compile time and include the result in the source code.\n\n### `$extnameof`, `$qnameof` and `$nameof`\n\nGet the external name of a symbol. See [reflection](/generic-programming/reflection).\n\n### `$feature`\n\nCheck if a given feature is enabled.\n\n### `$is_const`\n\nCheck if the expression is constant at compile time.\n\n### `$nameof`\n\nGet the local name of a symbol. See [reflection](/generic-programming/reflection).\n\n### `$offsetof`\n\nGet the offset of a member. See [reflection](/generic-programming/reflection).\n\n### `$qnameof`\n\nGet the qualified name of a symbol. See [reflection](/generic-programming/reflection).\n\n### `$vacount`\n\nReturn the number of macro vaarg arguments\n\n### `$vaconst`\n\nReturn a vaarg as a `$constant` parameter.\n\n### `$vaexpr`\n\nReturn a vaarg as an `#expr` parameter.\n\n### `$vasplat`\n\nExpand the vaargs in an initializer list or function call.\n\n### `$vatype`\n\nGet a vaarg as a `$Type` parameter.\n\n### `$sizeof`\n\nReturn the size of an expression.\n\n### `$stringify`\n\nTurn an expression into a string.\n\n### `$typeof`\n\nGet the type of an expression (without evaluating it).\n\n### `$typefrom`\n\nGet a type from a compile time constant `typeid`.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":3,"slug":"compile-time-values","text":"Compile time values"},{"depth":3,"slug":"if-and-switch","text":"$if and $switch"},{"depth":3,"slug":"loops-using-foreach-and-for","text":"Loops using $foreach and $for"},{"depth":3,"slug":"compile-time-macro-execution","text":"Compile time macro execution"},{"depth":3,"slug":"conditional-compilation-at-the-top-level-using-if","text":"Conditional compilation at the top level using @if"},{"depth":4,"slug":"evaluation-order-of-top-level-conditional-compilation","text":"Evaluation order of top level conditional compilation"},{"depth":2,"slug":"compile-time-introspection","text":"Compile time introspection"},{"depth":2,"slug":"compile-time-functions","text":"Compile time functions"},{"depth":3,"slug":"alignof","text":"$alignof"},{"depth":3,"slug":"append","text":"$append"},{"depth":3,"slug":"assert","text":"$assert"},{"depth":3,"slug":"assignable","text":"$assignable"},{"depth":3,"slug":"defined","text":"$defined"},{"depth":3,"slug":"echo","text":"$echo"},{"depth":3,"slug":"embed","text":"$embed"},{"depth":3,"slug":"error","text":"$error"},{"depth":3,"slug":"eval","text":"$eval"},{"depth":3,"slug":"evaltype","text":"$evaltype"},{"depth":3,"slug":"exec","text":"$exec"},{"depth":3,"slug":"extnameof-qnameof-and-nameof","text":"$extnameof, $qnameof and $nameof"},{"depth":3,"slug":"feature","text":"$feature"},{"depth":3,"slug":"is_const","text":"$is_const"},{"depth":3,"slug":"nameof","text":"$nameof"},{"depth":3,"slug":"offsetof","text":"$offsetof"},{"depth":3,"slug":"qnameof","text":"$qnameof"},{"depth":3,"slug":"vacount","text":"$vacount"},{"depth":3,"slug":"vaconst","text":"$vaconst"},{"depth":3,"slug":"vaexpr","text":"$vaexpr"},{"depth":3,"slug":"vasplat","text":"$vasplat"},{"depth":3,"slug":"vatype","text":"$vatype"},{"depth":3,"slug":"sizeof","text":"$sizeof"},{"depth":3,"slug":"stringify","text":"$stringify"},{"depth":3,"slug":"typeof","text":"$typeof"},{"depth":3,"slug":"typefrom","text":"$typefrom"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
