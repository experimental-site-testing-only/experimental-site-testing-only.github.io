const id = "Previous Versions/v0_6_8/Language Common/cinterop.md";
						const collection = "docs";
						const slug = "previous-versions/v0_6_8/language-common/cinterop";
						const body = "\nC3 is C ABI compatible. That means you can call C from C3, and call C3 from C without having to\ndo anything special. As a quick way to call C, you can simply declare the function as a \nC3 function but with `extern` in front of it. As long as the function is linked, it will work:\n\n```c3\nextern fn void puts(char*); // C \"puts\"\n\nfn void main()\n{\n    // This will call the \"puts\"\n    // function in the standard c lib.\n    puts(\"Hello, world!\"); \n}\n```\n\nTo use a different identifier inside of your C3 code compared to the function or variableâ€™s external name, use the `@extern` attribute:\n\n```c3\nextern fn void foo_puts(char*) @extern(\"puts\"); // C \"puts\"\n\nfn void main()\n{\n    foo_puts(\"Hello, world!\"); // Still calls C \"puts\"\n}\n```\n\nWhile C3 functions are available from C using their external name, it's often useful to\ndefine an external name using `@extern` or `@export` with a name to match C usage.\n\n```c3\nmodule foo;\nfn int square(int x) @export // @export ensures external visibility\n{\n    return x * x;\n}\n\nfn int square2(int x) @export(\"square\")\n{\n    return x * x;\n}\n```\n\nCalling from C:\n\n```c\nextern int square(int);\nint foo_square(int) __attribute__ ((weak, alias (\"foo__square\")));\n\nvoid test()\n{\n    // This would call square2\n    printf(\"%d\\n\", square(11));\n\n    // This would call square\n    printf(\"%d\\n\", foo_square(11));\n}\n```\n\n## Linking static and dynamic libraries\n\nIf you have a library `foo.a` or `foo.so` or `foo.obj` (depending on type and OS), just add\n`-l foo` on the command line, or in the project file add it to the `linked-libraries` value, e.g.\n`\"linked-libraries\" = [\"foo\"]`.\n\nTo add library search paths, use `-L <directory>` from the command line and `linker-search-paths`\nthe project file (e.g. `\"linker-search-paths\" = [\"../mylibs/\", \"/extra-libs/\"]`)\n\n### Gotchas\n\n- Bitstructs will be seen as its backing type, when used from C. \n- C bit fields must be manually converted to a C3 bitstruct with the correct layout for each target platform.\n- C assumes the enum size is `CInt`\n- C3 uses fixed integer sizes, this means that `int` and `CInt` does not *need* to be the same though in practice on 32/64 bit machines, `long` is usually the *only* type that differs in size between C and C3.\n- Atomic types are not supported by C3.\n    - In C3 there are generic Atomic types instead.\n- There are no `volatile` and `const` **qualifiers** like in C. \n    - C3 has [global constants](/language-fundamentals/naming/#global-constants) declared with `const`. \n    - Instead of the `volatile` type qualifier, there are standard library macros `@volatile_load` and `@volatile_store`.\n- Passing arrays by value like in C3 must be represented as passing a struct containing the array.\n- In C3, fixed arrays do *not* decay into pointers like in C. \n    - When defining a C function that has an array argument, replace the array type with a pointer. E.g. `void test(int[] a)` should become\n     `extern fn void test(int* a)`. If the function has a sized array, like `void test2(int[4] b)`\n     replace it with a pointer to a sized array: `extern fn void test2(int[4]* b);`      \n    - Note that a pointer to an array is always implicitly convertable to a pointer to the first element. For example, `int[4]*` may be implicitly converted to `int*`.\n- The C3 names of functions are name-spaced with the module by default when using `@export`, so when\n exporting a function with `@export` that is to be used from C, specify an explicit external name. E.g. `fn void myfunc() @export(\"myfunc\") { ... }`.\n";
						const data = {title:"C Interoperability",description:"C Interoperability",editUrl:true,head:[],template:"doc",sidebar:{order:69,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Language Common/cinterop.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
