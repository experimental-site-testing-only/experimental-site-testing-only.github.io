const id = "Previous Versions/v0_6_8/FAQ/compare-languages.md";
						const collection = "docs";
						const slug = "previous-versions/v0_6_8/faq/compare-languages";
						const body = "An important question to answer is \"How does C3 compare to other similar programming languages?\".\nHere is an extremely brief (and not yet complete) overview.\n\n## C\n\nAs C3 is an evolution of C, the languages are quite similar.\nC3 adds features, but also removes a few.\n\n##### In C3 but not in C\n\n- Module system\n- Integrated build system\n- Generics\n- Semantic Macros\n- Error handling\n- Defer\n- Value methods\n- Associated enum data\n- Distinct types and subtypes\n- Optional contracts\n- Built-in slices\n- Foreach for iteration over arrays and types\n- Dynamic calls and types\n\n##### In C but not in C3\n\n- Qualified types (`const`, `volatile` etc)\n- Unsafe implicit conversions\n\n## C++\n\nC++ is a complex object oriented \"almost superset\" of C. It tries to be everything to everyone,\nwhile squeezing this into a C syntax. The language is well known for its\nmany pitfalls and quirky corners – as well as its long compile times.\n\nC3 is in many ways different from C++ in the same way that C is different from C++,\nbut the semantic macro system and the generics close the gap in terms of writing\nreusable generic code. The C3 module system and error handling is also very\ndifferent from how C++ does things.\n\n##### In C++ but not in C3\n\n- Objects and classes\n- RAII\n- Exceptions\n\n##### In C3 but not in C++\n\n- Module system (yet)\n- Integrated build system\n- Semantic macros\n- Error handling\n- Defer\n- Associated enum data\n- Built-in slices\n- Dynamic calls\n\n## Rust\n\nRust is a safe systems programming language. While not quite as complex as C++,\nit is still a feature rich programming language with semantic macros, traits and\npattern matching to mention a few.\n\nError handling is handled using `Result` and `Optional` which is similar to \nhow C3 works.\n\nC3 compares to Rust much like C, although the presence of built-in slices and \nstrings reduces the places where C3 is unsafe. Rust provides arrays and strings,\nbut they are not built in.\n\n##### In Rust but not in C3\n\n- RAII\n- Memory safety\n- Safe union types with functions\n- Different syntax from C\n- Pattern matching\n- Async built in\n\n##### In C3 but not in Rust\n\n- Same ease of programming as C\n- Optional contracts\n- Familiar C syntax and behaviour\n- Dynamic calls\n\n## Zig\n\nZig is a systems programming language with extensive compile time execution to\nenable polymorphic functions and parameterized types. It aims to be a C replacement.\n\nCompared to C3, Zig tries to be a completely new language in terms of syntax and feel.\nC3 uses macros to a modest degree where it is more pervasive in Zig, and\ndoes not depart from C to the same degree. Like Rust, it features slices as a first\nclass type. The standard library uses an explicit allocator to allow it to work\nwith many different allocation strategies.\n\nZig is a very ambitious project, aiming to support as many types of platforms as\npossible.\n\n##### In Zig but not in C3\n\n- Pervasive compile time execution.\n- Memory allocation failure is an error.\n- Toolchain uses build files written in native Zig.\n- Different syntax and behaviour compared to C.\n- Structs define namespace.\n- Async primitives built in.\n- Arbitrary integer sizes.\n\n##### In C3 but not in Zig\n\n- Module system.\n- Integrated build system.\n- C ABI compatibility by default.\n- Optional contracts.\n- Familiar C syntax and behaviour.\n- Dynamic interfaces.\n- Built in benchmarks.\n\n## Jai\n\nJai is a programming language aimed at high performance game programming.\nIt has an extensive compile time meta programming functionality, even\nto the point of being able to run programs at compile time. It also\nhas compile-time polymorphism, a powerful macro system and uses \nan implicit context system to switch allocation schemes.\n\n##### In Jai but not in C3\n\n- Pervasive compile time execution.\n- Jai's compile time execution is the build system.\n- Different syntax and behaviour compared to C.\n- More powerful macro system than C3.\n- Implicit constructors.\n\n##### In C3 but not in Jai\n\n- Module system.\n- Integrated build system.\n- Optional contracts.\n- Familiar C syntax and behaviour.\n- Fairly small language.\n- Dynamic interfaces.\n\n## Odin\n\nOdin is a language built for high performance but tries to remain\na simple language to learn. Superficially the syntax shares much with\nJai, and some of Jai's features things – like an implicit context – also shows up\nin Odin. In contrast with both Jai and Zig, Odin uses only minimal compile time evaluation\nand instead only relies on parametric polymorphism to ensure reuse.\nIt also contains conveniences, like maps and arrays built into\nthe language. For error handling it relies on Go style tuple returns.\n\n##### In Odin but not in C3\n\n- Different syntax and behaviour compared to C.\n- Ad hoc parametric polymorphism.\n- Multiple return values.\n- Error handling through multiple returns.\n- A rich built in set of types.\n\n##### In C3 but not in Odin\n\n- Familiar C syntax and behaviour.\n- Semantic macros.\n- Value methods.\n- Optional contracts.\n- Built in error handling.\n- Dynamic interfaces.\n\n## D\n\nD is an incredibly extensive language, it covers anything C++ does and adds much more.\nD manages this with much fewer syntactic quirks than C++. It is a strong,\nfeature-rich language.\n\n##### In D but not in C3\n\n- Objects and classes.\n- RAII.\n- Exceptions.\n- Optional GC.\n\n*+ Many, many more features.* \n\n##### In C3 but not in D\n\n- Fairly small language.";
						const data = {title:"Comparisons With Other Languages",description:"How C3 compares to other languages",editUrl:true,head:[],template:"doc",sidebar:{order:701,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/FAQ/compare-languages.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
