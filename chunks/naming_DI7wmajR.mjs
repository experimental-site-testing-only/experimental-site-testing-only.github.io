import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>C3 introduces fairly rigid naming rules to reduce ambiguity and make the language easy to parse for tools.</p>\n<p>As a basic rule, all identifiers are limited to a-z, A-Z, 0-9 and <code dir=\"auto\">_</code>. The initial character can not be a number. Furthermore, all identifiers are limited to 31 character.</p>\n<h3 id=\"structs-unions-enums-and-faults\">Structs, unions, enums and faults</h3>\n<p>All user defined types must start with A-Z after any optional initial <code dir=\"auto\">_</code> and include at least 1 lower case letter. <code dir=\"auto\">Bar</code>, <code dir=\"auto\">_T_i12</code> and <code dir=\"auto\">TTi</code> are all valid names. <code dir=\"auto\">_1</code>, <code dir=\"auto\">bAR</code> and <code dir=\"auto\">BAR</code> are not. For C-compatibility it’s possible to alias the type to a external name using the attribute “extern”.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo @extern(\"foo\")</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Bar bar;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">union</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Bar</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> i;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Baz</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">VALUE_1</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">VALUE_2</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">faultdef OOPS, LOTS_OF_OOPS;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"struct Foo @extern(&#x22;foo&#x22;){    int x;    Bar bar;}union Bar{    int i;    double d;}enum Baz{    VALUE_1,    VALUE_2}faultdef OOPS, LOTS_OF_OOPS;\"><div></div></button></div></figure></div>\n<h3 id=\"variables-and-parameters\">Variables and parameters</h3>\n<p>All variables and parameters <em>except for</em> global constant variables must start with a-z after any optional initial <code dir=\"auto\">_</code>. <code dir=\"auto\">___a</code> <code dir=\"auto\">fooBar</code> and <code dir=\"auto\">_test_</code> are all valid variable / parameter names. <code dir=\"auto\">_</code>, <code dir=\"auto\">_Bar</code>, <code dir=\"auto\">X</code> are not.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> theGlobal </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Foo foo </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">getFoo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">theGlobal</span><span style=\"--0:#C792EA;--1:#8D46B4\">++</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int theGlobal = 1;fn void foo(int x){    Foo foo = getFoo(x);    theGlobal++;}\"><div></div></button></div></figure></div>\n<h3 id=\"global-constants\">Global constants</h3>\n<p>Global constants must start with A-Z after any optional initial <code dir=\"auto\">_</code>. <code dir=\"auto\">_FOO2</code>, <code dir=\"auto\">BAR_FOO</code>, <code dir=\"auto\">X</code> are all valid global constants, <code dir=\"auto\">_</code>, <code dir=\"auto\">_bar</code>, <code dir=\"auto\">x</code> are not.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">const</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> A_VALUE </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">12</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"const int A_VALUE = 12;\"><div></div></button></div></figure></div>\n<h3 id=\"enum--fault-definitions\">Enum / Fault definitions</h3>\n<p><code dir=\"auto\">enum</code> and <code dir=\"auto\">faultdef</code> definitions follow the same naming standard as global constants.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Baz</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">VALUE_1</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">VALUE_2</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">faultdef OOPS, LOTS_OF_OOPS;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"enum Baz{    VALUE_1,    VALUE_2}faultdef OOPS, LOTS_OF_OOPS;\"><div></div></button></div></figure></div>\n<h3 id=\"struct--union-members\">Struct / union members</h3>\n<p>Struct and union members follow the same naming rules as variables.</p>\n<h3 id=\"modules\">Modules</h3>\n<p>Module names may contain a-z, 0-9 and <code dir=\"auto\">_</code>, no upper case characters are allowed.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">module foo;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module foo;\"><div></div></button></div></figure></div>\n<h3 id=\"functions-and-macros\">Functions and macros</h3>\n<p>Functions and macros must start with a-z after any optional initial <code dir=\"auto\">_</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">theMostAmazingFunction</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#82AAFF;--1:#3C63B3\">justDoIt</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">justDo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void theMostAmazingFunction(){    return;}macro justDoIt(x){    justDo(x);}\"><div></div></button></div></figure></div>";

				const frontmatter = {"title":"Naming Rules","description":"Naming Rules","sidebar":{"order":41}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Language Fundamentals/naming.md";
				const url = undefined;
				function rawContent() {
					return "\nC3 introduces fairly rigid naming rules to reduce ambiguity and make the language easy to parse for tools.\n\nAs a basic rule, all identifiers are limited to a-z, A-Z, 0-9 and `_`. The initial character can not be a number. Furthermore, all identifiers are limited to 31 character.\n\n### Structs, unions, enums and faults\n\nAll user defined types must start with A-Z after any optional initial `_` and include at least 1 lower case letter. `Bar`, `_T_i12` and `TTi` are all valid names. `_1`, `bAR` and `BAR` are not. For C-compatibility it's possible to alias the type to a external name using the attribute \"extern\".\n\n```c3\nstruct Foo @extern(\"foo\")\n{\n    int x;\n    Bar bar;\n}\n\nunion Bar\n{\n    int i;\n    double d;\n}\n\nenum Baz\n{\n    VALUE_1,\n    VALUE_2\n}\n\nfaultdef OOPS, LOTS_OF_OOPS;\n```\n\n### Variables and parameters\n\nAll variables and parameters *except for* global constant variables must start with a-z after any optional initial `_`. `___a` `fooBar` and `_test_` are all valid variable / parameter names. `_`, `_Bar`, `X` are not.\n\n```c3\nint theGlobal = 1;\n\nfn void foo(int x)\n{\n    Foo foo = getFoo(x);\n    theGlobal++;\n}\n```\n\n### Global constants\n\nGlobal constants must start with A-Z after any optional initial `_`. `_FOO2`, `BAR_FOO`, `X` are all valid global constants, `_`, `_bar`, `x` are not.\n\n```c3\nconst int A_VALUE = 12;\n```\n\n### Enum / Fault definitions\n\n`enum` and `faultdef` definitions follow the same naming standard as global constants.\n\n```c3\nenum Baz\n{\n    VALUE_1,\n    VALUE_2\n}\n\nfaultdef OOPS, LOTS_OF_OOPS;\n```\n\n### Struct / union members\n\nStruct and union members follow the same naming rules as variables.\n\n### Modules\n\nModule names may contain a-z, 0-9 and `_`, no upper case characters are allowed.\n\n```\nmodule foo;\n```\n\n### Functions and macros\n\nFunctions and macros must start with a-z after any optional initial `_`.\n\n```c3\nfn void theMostAmazingFunction()\n{\n    return;\n}\n\nmacro justDoIt(x)\n{\n    justDo(x);\n}\n```";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":3,"slug":"structs-unions-enums-and-faults","text":"Structs, unions, enums and faults"},{"depth":3,"slug":"variables-and-parameters","text":"Variables and parameters"},{"depth":3,"slug":"global-constants","text":"Global constants"},{"depth":3,"slug":"enum--fault-definitions","text":"Enum / Fault definitions"},{"depth":3,"slug":"struct--union-members","text":"Struct / union members"},{"depth":3,"slug":"modules","text":"Modules"},{"depth":3,"slug":"functions-and-macros","text":"Functions and macros"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
