const id = "Previous Versions/v0_6_8/Getting Started/projects.mdx";
						const collection = "docs";
						const slug = "previous-versions/v0_6_8/getting-started/projects";
						const body = "import { FileTree } from '@astrojs/starlight/components';\n\n:::note[Not installed the C3 compiler yet?]\n[Download C3](/getting-started/prebuilt-binaries/), available on Mac, Windows and Linux.\n:::\n\n## Projects in C3\nProjects are *optional*, but are a good way to manage compiling code when there\n are a lot of files and modules.\nThey also allow you to specify libraries to link, and define how your project should be built for specific targets.\n\n### üí° Creating a new project\n\nThe `c3c init` command will create a new directory containing your project structure.\nIt requires a name of the project, we will use `myc3project` in its place.\n\n```bash\nc3c init myc3project\n```\n\nYou can also customize the path where the project will be created or specify a *template*. For more information check the [init command reference](/build-your-project/build-commands/#init-a-new-project).\n\n### üìÅ Project structure\n\nIf you check the directory that was created you might find it a bit confusing with a bunch of different directories, but worry not because if you expand them you will realise that most of them are actually empty!\n\n<FileTree>\n- build/\n- docs/\n- lib/\n- resources/\n- scripts/\n- src/\n  - main.c3\n- test/\n- LICENSE\n- project.json\n- README.md\n</FileTree>\n\n#### Directory Overview\n| Directory       | Usage         |\n|-----------------|---------------|\n| `./build`       | Where your temporary files and build results will go. |\n| `./docs`        | Code Documentation |\n| `./lib`         | C3 libraries (with the .c3l suffix) |\n| `./resources`   | Non-code resources like images, sound effects etc. |\n| `./scripts`     | Scripts, including .c3 scripts that generate code at compile time. |\n| `./src`         | Storing our code, by default contains `main.c3` with \"Hello World\". |\n| `project.json`  | Record project information, similar to `package.json` in NodeJS. |\n| `LICENSE`       | Project license. |\n| `README.md`     | Help others understand and use your code. | \n\n### üîß Building the project\n\nAssuming you have successfully initialized a project as seen above, we can now look at how to compile it.\n\n#### üèÉ Build & run\n\nC3 has a simple command to build & run our project.\n\n```bash {4}\nc3c run\n> Program linked to executable 'build/myc3project'.\n> Launching ./build/myc3project...\n> Hello, World\n```\n\nYou can also specify the target to build & run.\n```bash\nc3c run myc3project\n```\n#### üîß Build\n\nIf you only want to build the project, you can use the `build` command:\n\n```bash \nc3c build\n```\n\nThis command builds the project targets defined in our `project.json` file.\n\n:::note\nIf you want to build a specific target, you can do so by specifying its name.\nThe default target is created with the name of the project, such as `myc3project`.\n\n```bash \nc3c build myc3project\n```\n:::\n\nWe will now have a binary in `build`, which we can run:\n\n```bash\n./build/myc3project\n```\n\nIt should print `Hello, World!` and return back to the command line prompt. \nIf you are on Windows, you will have `myc3project.exe` instead. Call it in the same way.\n\n\nIf you need more detail later on check [C3 project build commands](/build-your-project/build-commands/) and [C3 project configuration](/build-your-project/project-config/) to learn more.\n";
						const data = {title:"Projects",description:"Learn to create C3 projects",editUrl:true,head:[],template:"doc",sidebar:{order:31,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Getting Started/projects.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
