import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>Like C, C3 uses undefined behaviour. In contrast, C3 will <em>trap</em> - that is, print an error trace and abort – on undefined behaviour in debug builds. This is similar to using C with a UB sanitizer. It is only during release builds that actual undefined behaviour occurs.</p>\n<p>In C3, undefined behaviour means that the compiler is free to interpret <em>undefined behaviour as if behaviour cannot occur</em>.</p>\n<p>In the example below:</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">uint</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">uint</span><span style=\"--0:#D6DEEB;--1:#403F53\"> z </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">255</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">/</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">!=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"uint x = foo();uint z = 255 / x;return x != 0;\"><div></div></button></div></figure></div>\n<p>The case of <code dir=\"auto\">x == 0</code> would invoke undefined behaviour for <code dir=\"auto\">255/x</code>. For that reason,\nthe compiler may assume that <code dir=\"auto\">x != 0</code> and compile it into the following code:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">true</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"foo();return true;\"><div></div></button></div></figure></div>\n<p>As a contrast, the safe build will compile code equivalent to the following.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">uint</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (x </span><span style=\"--0:#C792EA;--1:#8D46B4\">==</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">) </span><span style=\"--0:#82AAFF;--1:#3C63B3\">trap</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Division by zero</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">true</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"uint x = foo();if (x == 0) trap(&#x22;Division by zero&#x22;)return true;\"><div></div></button></div></figure></div>\n<h2 id=\"list-of-undefined-behaviours\">List of undefined behaviours</h2>\n<p>The following operations cause undefined behaviour in release builds of C3:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>operation</th><th align=\"center\">will trap in safe builds</th></tr></thead><tbody><tr><td>int / 0</td><td align=\"center\">Yes</td></tr><tr><td>int % 0</td><td align=\"center\">Yes</td></tr><tr><td>reading explicitly uninitialized memory</td><td align=\"center\">Possible*</td></tr><tr><td>array index out of bounds</td><td align=\"center\">Yes</td></tr><tr><td>dereference <code dir=\"auto\">null</code></td><td align=\"center\">Yes</td></tr><tr><td>dereferencing memory not allocated</td><td align=\"center\">Possible*</td></tr><tr><td>dereferencing memory outside of its lifetime</td><td align=\"center\">Possible*</td></tr><tr><td>casting pointer to the incorrect array</td><td align=\"center\">Possible*</td></tr><tr><td>violating pre or post conditions</td><td align=\"center\">Yes</td></tr><tr><td>violating asserts</td><td align=\"center\">Yes</td></tr><tr><td>reaching <code dir=\"auto\">unreachable()</code> code</td><td align=\"center\">Yes</td></tr></tbody></table>\n<p>* “Possible” indicates trapping is implementation dependent.</p>\n<h2 id=\"list-of-implementation-dependent-behaviours\">List of implementation dependent behaviours</h2>\n<p>Some behaviour is allowed to differ between implementations and platforms.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>operation</th><th align=\"center\">will trap in safe builds</th><th align=\"center\">permitted behaviour</th></tr></thead><tbody><tr><td>comparing pointers of different provenance</td><td align=\"center\">Optional</td><td align=\"center\">Any result</td></tr><tr><td>subtracting pointers of different provenance</td><td align=\"center\">Optional</td><td align=\"center\">Any result</td></tr><tr><td>shifting by more or equal to the bit width</td><td align=\"center\">Yes</td><td align=\"center\">Any result</td></tr><tr><td>shifting by negative amount</td><td align=\"center\">Yes</td><td align=\"center\">Any result</td></tr><tr><td>conversion floating point &#x3C;-> integer type is out of range</td><td align=\"center\">Optional</td><td align=\"center\">Any result</td></tr><tr><td>conversion between pointer types produces one with incorrect alignment</td><td align=\"center\">Optional</td><td align=\"center\">Any result / Error</td></tr><tr><td>calling a function through a function pointer that does not match the function</td><td align=\"center\">Optional</td><td align=\"center\">Any result / Error</td></tr><tr><td>attempt to modify a string literal</td><td align=\"center\">Optional</td><td align=\"center\">Partial modification / Error</td></tr><tr><td>modifying a <code dir=\"auto\">const</code> variable</td><td align=\"center\">Optional</td><td align=\"center\">Partial modification / Error</td></tr></tbody></table>\n<h2 id=\"list-of-undefined-behaviour-in-c-which-is-defined-in-c3\">List of undefined behaviour in C, which is defined in C3</h2>\n<h3 id=\"signed-integer-overflow\">Signed Integer Overflow</h3>\n<p>Signed integer is always wrapped using 2s complement.</p>\n<h3 id=\"modifying-the-intermediate-results-of-an-expression\">Modifying the intermediate results of an expression</h3>\n<p>Behaves as if the intermediate result was stored in a variable on the stack.</p>";

				const frontmatter = {"title":"Undefined Behaviour","description":"Undefined Behaviour","sidebar":{"order":212}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Language Rules/undefined-behaviour.md";
				const url = undefined;
				function rawContent() {
					return "\nLike C, C3 uses undefined behaviour. In contrast, C3 will *trap* - that is, print an error trace and abort – on undefined behaviour in debug builds. This is similar to using C with a UB sanitizer. It is only during release builds that actual undefined behaviour occurs.\n\nIn C3, undefined behaviour means that the compiler is free to interpret *undefined behaviour as if behaviour cannot occur*.\n\nIn the example below:\n\n```c3\nuint x = foo();\nuint z = 255 / x;\nreturn x != 0;\n```\n\nThe case of `x == 0` would invoke undefined behaviour for `255/x`. For that reason, \nthe compiler may assume that `x != 0` and compile it into the following code: \n\n```c3\nfoo();\nreturn true;\n```\n\nAs a contrast, the safe build will compile code equivalent to the following.\n\n```c3\nuint x = foo();\nif (x == 0) trap(\"Division by zero\")\nreturn true;\n```\n\n## List of undefined behaviours\n\nThe following operations cause undefined behaviour in release builds of C3:\n\n| operation | will trap in safe builds |\n| --------- | :----------------------: |\n| int / 0 | Yes |\n| int % 0 | Yes |\n| reading explicitly uninitialized memory | Possible\\* |\n| array index out of bounds | Yes |\n| dereference `null` | Yes |\n| dereferencing memory not allocated | Possible\\* |\n| dereferencing memory outside of its lifetime | Possible\\* |\n| casting pointer to the incorrect array | Possible\\* |\n| violating pre or post conditions | Yes |\n| violating asserts | Yes |\n| reaching `unreachable()` code | Yes |\n\n\\* \"Possible\" indicates trapping is implementation dependent.\n\n## List of implementation dependent behaviours\n\nSome behaviour is allowed to differ between implementations and platforms.\n\n| operation | will trap in safe builds | permitted behaviour |\n| --------- | :----------------------: | :----------------: |\n| comparing pointers of different provenance | Optional | Any result |\n| subtracting pointers of different provenance | Optional | Any result |\n| shifting by more or equal to the bit width | Yes | Any result |\n| shifting by negative amount | Yes | Any result |\n| conversion floating point <-> integer type is out of range | Optional | Any result |\n| conversion between pointer types produces one with incorrect alignment | Optional | Any result / Error  |\n| calling a function through a function pointer that does not match the function | Optional | Any result / Error |\n| attempt to modify a string literal | Optional | Partial modification / Error |\n| modifying a `const` variable | Optional | Partial modification / Error |\n\n## List of undefined behaviour in C, which is defined in C3\n\n### Signed Integer Overflow\n\nSigned integer is always wrapped using 2s complement.\n\n### Modifying the intermediate results of an expression\n\nBehaves as if the intermediate result was stored in a variable on the stack.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"list-of-undefined-behaviours","text":"List of undefined behaviours"},{"depth":2,"slug":"list-of-implementation-dependent-behaviours","text":"List of implementation dependent behaviours"},{"depth":2,"slug":"list-of-undefined-behaviour-in-c-which-is-defined-in-c3","text":"List of undefined behaviour in C, which is defined in C3"},{"depth":3,"slug":"signed-integer-overflow","text":"Signed Integer Overflow"},{"depth":3,"slug":"modifying-the-intermediate-results-of-an-expression","text":"Modifying the intermediate results of an expression"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
