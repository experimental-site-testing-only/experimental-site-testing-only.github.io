import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>Although C3 is trying to improve on C, this does not only mean addition of features, but also removal, or breaking changes:</p>\n<h5 id=\"no-mandatory-header-files\">No mandatory header files</h5>\n<p>There is a C3 interchange header format for declaring interfaces of libraries, but it is only used for special applications.</p>\n<h5 id=\"removal-of-the-old-c-macro-system\">Removal of the old C macro system</h5>\n<p>The old C macro system is replaced by a new C3 macro system.</p>\n<h5 id=\"import-and-modules\">Import and modules</h5>\n<p>C3 uses module imports instead of header includes to link modules together.</p>\n<h5 id=\"member-access-using--even-for-pointers\">Member access using <code dir=\"auto\">.</code> even for pointers</h5>\n<p>The <code dir=\"auto\">-></code> operator is removed, access uses dot for both direct and pointer access. Note that this is just single access: to access a pointer of a pointer (e.g. <code dir=\"auto\">int**</code>) an explicit dereference would be needed.</p>\n<h5 id=\"different-operator-precedence\">Different operator precedence</h5>\n<p>Notably bit operations have higher precedence than +/-, making code like this: <code dir=\"auto\">a &#x26; b == c</code> evaluate like <code dir=\"auto\">(a &#x26; b) == c</code> instead of C’s <code dir=\"auto\">a &#x26; (b == c)</code>. See the page about <a href=\"/language-rules/precedence/\">precedence rules</a>.</p>\n<h5 id=\"removal-of-the-const-type-qualifier\">Removal of the const type qualifier</h5>\n<p>The const qualifier is only retained for actual constant variables. C3 uses a special type of <a href=\"/language-common/contracts/\">post condition</a> for functions to indicate that they do not alter in parameters.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\"> </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">This function ensures that foo is </span><span style=\"--0:#7FDBCA;--1:#097174\">not</span><span style=\"--0:#D6DEEB;--1:#403F53\"> changed in the function.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\"> </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">@param [in] foo</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\"> </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">@param [out] bar</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">*></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo, Bar</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> bar)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">bar</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">y</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// foo.x = foo.x + 1 - compile time error, can't write to 'in' param.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// int x = bar.y     - compile time error, can't read from an 'out' param.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"<* This function ensures that foo is not changed in the function. @param [in] foo @param [out] bar*>fn void test(Foo* foo, Bar* bar){    bar.y = foo.x;    // foo.x = foo.x + 1 - compile time error, can&#x27;t write to &#x27;in&#x27; param.    // int x = bar.y     - compile time error, can&#x27;t read from an &#x27;out&#x27; param.}\"><div></div></button></div></figure></div>\n<p><em>Rationale: const correctness requires littering const across the code base. Although const is useful, it provides weaker guarantees that it appears.</em></p>\n<h5 id=\"fixed-arrays-do-not-decay-and-have-copy-semantics\">Fixed arrays do not decay and have copy semantics</h5>\n<p>C3 has three different array types. Variable arrays and slices decay to pointers, but fixed arrays are value objects and do not decay.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">] a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">]</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">a;</span><span style=\"--0:#809191;--1:#5E6578\"> // No conversion</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span><span style=\"--0:#809191;--1:#5E6578\"> // ERROR</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">a;</span><span style=\"--0:#809191;--1:#5E6578\"> // Valid implicit conversion</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> e </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span><span style=\"--0:#809191;--1:#5E6578\"> // Valid implicit conversion</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">] f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span><span style=\"--0:#809191;--1:#5E6578\"> // Copy by value!</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[3] a = { 1, 2, 3 };int[4]* b = &#x26;a; // No conversionint* c = a; // ERRORint* d = &#x26;a; // Valid implicit conversionint* e = b; // Valid implicit conversionint[3] f = a; // Copy by value!\"><div></div></button></div></figure></div>\n<h5 id=\"removal-of-multiple-declaration-syntax-with-initialization\">Removal of multiple declaration syntax with initialization</h5>\n<p>Only a single declaration with initialization is allowed per statement in C3:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> i, j </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // ERROR</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">    // Ok</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b, c;</span><span style=\"--0:#809191;--1:#5E6578\">     // Ok</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int i, j = 1; // ERRORint a = 1;    // Okint b, c;     // Ok\"><div></div></button></div></figure></div>\n<p>In conditionals, a special form of multiple declarations are allowed but each must then provide its type:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">for</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> i </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> j </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">; i </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">10</span><span style=\"--0:#D6DEEB;--1:#403F53\">; i</span><span style=\"--0:#C792EA;--1:#8D46B4\">++</span><span style=\"--0:#D6DEEB;--1:#403F53\">, j</span><span style=\"--0:#C792EA;--1:#8D46B4\">++</span><span style=\"--0:#D6DEEB;--1:#403F53\">) { ... }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"for (int i = 0, int j = 1; i < 10; i++, j++) { ... }\"><div></div></button></div></figure></div>\n<h5 id=\"integer-promotions-rules-and-safe-signed-unsigned-comparisons\">Integer promotions rules and safe signed-unsigned comparisons</h5>\n<p>Promotion rules for integer types are different from C.\nC3 allows implicit widening only\nwhere there is only a single way to widen the expression. To explain the latter:\ntake the case of <code dir=\"auto\">long x = int_val_1 + int_val_2</code>. In C this would widen the result of the addition:\n<code dir=\"auto\">long x = (long)(int_val_1 + int_val_2)</code>, but there is another possible\nway to widen: <code dir=\"auto\">long x = (long)int_val_1 + (long)int_val_2</code>. so in this case, the widening\nis disallowed. However, <code dir=\"auto\">long x = int_val_1</code> is unambiguous, so C3 permits it just like C (read more on the <a href=\"/language-rules/conversion/\">conversion page</a>.</p>\n<p>C3 also adds <em>safe signed-unsigned comparisons</em>: this means that comparing signed and unsigned values will always yield the correct result:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// The code below would print \"Hello C3!\" in C3 and \"Hello C!\" in C.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> i </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">-</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">uint</span><span style=\"--0:#D6DEEB;--1:#403F53\"> j </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (i </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> j)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">printf</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Hello C3!</span><span style=\"--0:#F78C6C;--1:#AA0982\">\\n</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">else</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">printf</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Hello C!</span><span style=\"--0:#F78C6C;--1:#AA0982\">\\n</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// The code below would print &#x22;Hello C3!&#x22; in C3 and &#x22;Hello C!&#x22; in C.int i = -1;uint j = 1;if (i < j){    printf(&#x22;Hello C3!\\n&#x22;);}else{    printf(&#x22;Hello C!\\n&#x22;);}\"><div></div></button></div></figure></div>\n<h5 id=\"goto-removed\"><code dir=\"auto\">goto</code> removed</h5>\n<p><code dir=\"auto\">goto</code> is removed and replaced with labelled <code dir=\"auto\">break</code> and <code dir=\"auto\">continue</code> together with the <code dir=\"auto\">nextcase</code> statement that allows you to jump between cases in a <code dir=\"auto\">switch</code> statement.</p>\n<p><em>Rationale: It is very difficult to make goto work well with defer and implicit unwrapping of optional results. It is not just making the compiler harder to write, but\nthe code is harder to understand as well. The replacements together with <code dir=\"auto\">defer</code> cover many if not all usages of <code dir=\"auto\">goto</code> in regular code.</em></p>\n<h5 id=\"implicit-break-in-switches\">Implicit break in switches</h5>\n<p>Empty <code dir=\"auto\">case</code> statements have implicit fall through in C3, otherwise the <code dir=\"auto\">nextcase</code> statement is needed\n<code dir=\"auto\">nextcase</code> can also be used to jump to any other case statement in the switch.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (h)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">nextcase;</span><span style=\"--0:#809191;--1:#5E6578\"> // Fall through</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">123</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">nextcase </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Jump to case 2</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">111</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"switch (h){    case 1:        a = 1;        nextcase; // Fall through    case 2:        b = 123;    case 3:        a = 2;        nextcase 2; // Jump to case 2    default:        a = 111;}\"><div></div></button></div></figure></div>\n<h5 id=\"locals-variables-are-implicitly-zeroed\">Locals variables are implicitly zeroed</h5>\n<p>In C global variables are implicitly zeroed out, but local variables aren’t.\nIn C3 local variables are zeroed out by default, but may be <em>explicitly</em> undefined\n(using the <code dir=\"auto\">@noinit</code> attribute) if you wish to match the C behaviour.</p>\n<h6 id=\"rationale-for-this-change\">Rationale for this change</h6>\n<ul>\n<li>In the “zero-is-initialization” paradigm, zeroing variables, in particular structs,\nis very common. By offering zero initialization by default this <strong>avoids a whole class of vulnerabilities</strong>.</li>\n<li>Another alternative that was considered for C3 was mandatory initialization,\nbut this adds a lot of extra boilerplate.</li>\n<li>C3 also offers a way to opt out of zero-initialization, so the change comes at no performance loss.</li>\n</ul>\n<h5 id=\"bitfields-replaced-by-bitstructs\">Bitfields replaced by bitstructs</h5>\n<p>Bitfields are replaced by bitstructs that have a well-defined encapsulating type, and\nan exact bit layout.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a : </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">unsigned</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b : </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">MyEnum c : </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">};</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Flags</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> has_hyperdrive : </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> has_tractorbeam : </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> has_plasmatorpedoes : </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">bitstruct Foo : </span><span style=\"--0:#C792EA;--1:#8D46B4\">short</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a : </span><span style=\"--0:#FFFFFF;--1:#9B504E\">0..2</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">uint</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b : </span><span style=\"--0:#FFFFFF;--1:#9B504E\">3..6</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">MyEnum c : </span><span style=\"--0:#FFFFFF;--1:#9B504E\">7..13</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Simple form, only allowed when all fields are bools.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Flags : </span><span style=\"--0:#C792EA;--1:#8D46B4\">char</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> has_hyperdrive;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> has_tractorbeam;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> has_plasmatorpedoes;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Cstruct Foo{    int a : 3;    unsigned b : 4;    MyEnum c : 7;};struct Flags{    bool has_hyperdrive : 1;    bool has_tractorbeam : 1;    bool has_plasmatorpedoes : 1;}// C3bitstruct Foo : short{    int a : 0..2;    uint b : 3..6;    MyEnum c : 7..13;}// Simple form, only allowed when all fields are bools.struct Flags : char{    bool has_hyperdrive;    bool has_tractorbeam;    bool has_plasmatorpedoes;}\"><div></div></button></div></figure></div>\n<h5 id=\"evaluation-order-is-well-defined\">Evaluation order is well-defined</h5>\n<p>Evaluation order is left-to-right, and in assignment expressions, assignment\nhappens after expression evaluation.</p>\n<h5 id=\"signed-overflow-is-well-defined\">Signed overflow is well-defined</h5>\n<p>Signed integer overflow always wraps using 2s complement. It is never undefined behaviour.</p>\n<h5 id=\"octal-removed\">Octal removed</h5>\n<p>The old <code dir=\"auto\">0777</code> octal syntax is removed and replaced by a <code dir=\"auto\">0o</code> prefix, e.g. <code dir=\"auto\">0o777</code>. Strings do not support octal sequences aside\nfrom <code dir=\"auto\">'\\0'</code>.</p>";

				const frontmatter = {"title":"Changes From C","description":"Changes From C","sidebar":{"order":702}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/FAQ/changesfromc.md";
				const url = undefined;
				function rawContent() {
					return "\n\nAlthough C3 is trying to improve on C, this does not only mean addition of features, but also removal, or breaking changes:\n\n##### No mandatory header files\n\nThere is a C3 interchange header format for declaring interfaces of libraries, but it is only used for special applications.\n\n##### Removal of the old C macro system\n\nThe old C macro system is replaced by a new C3 macro system.\n\n##### Import and modules\n\nC3 uses module imports instead of header includes to link modules together.\n\n##### Member access using `.` even for pointers\n\nThe `->` operator is removed, access uses dot for both direct and pointer access. Note that this is just single access: to access a pointer of a pointer (e.g. `int**`) an explicit dereference would be needed.\n\n##### Different operator precedence\n\nNotably bit operations have higher precedence than +/-, making code like this: `a & b == c` evaluate like `(a & b) == c` instead of C's `a & (b == c)`. See the page about [precedence rules](/language-rules/precedence/).\n\n##### Removal of the const type qualifier\n\nThe const qualifier is only retained for actual constant variables. C3 uses a special type of [post condition](/language-common/contracts/) for functions to indicate that they do not alter in parameters.\n\n```c3\n<*\n This function ensures that foo is not changed in the function.\n @param [in] foo\n @param [out] bar\n*>\nfn void test(Foo* foo, Bar* bar)\n{\n    bar.y = foo.x;\n    // foo.x = foo.x + 1 - compile time error, can't write to 'in' param.\n    // int x = bar.y     - compile time error, can't read from an 'out' param.\n}\n```\n\n*Rationale: const correctness requires littering const across the code base. Although const is useful, it provides weaker guarantees that it appears.*\n\n##### Fixed arrays do not decay and have copy semantics\n\nC3 has three different array types. Variable arrays and slices decay to pointers, but fixed arrays are value objects and do not decay.\n\n```c3\nint[3] a = { 1, 2, 3 };\nint[4]* b = &a; // No conversion\nint* c = a; // ERROR\nint* d = &a; // Valid implicit conversion\nint* e = b; // Valid implicit conversion\nint[3] f = a; // Copy by value!\n```\n\n##### Removal of multiple declaration syntax with initialization\n\nOnly a single declaration with initialization is allowed per statement in C3:\n\n```c3\nint i, j = 1; // ERROR\nint a = 1;    // Ok\nint b, c;     // Ok\n```\n\nIn conditionals, a special form of multiple declarations are allowed but each must then provide its type:\n\n```c3\nfor (int i = 0, int j = 1; i < 10; i++, j++) { ... }\n```\n\n##### Integer promotions rules and safe signed-unsigned comparisons\n\nPromotion rules for integer types are different from C. \nC3 allows implicit widening only\nwhere there is only a single way to widen the expression. To explain the latter:\ntake the case of `long x = int_val_1 + int_val_2`. In C this would widen the result of the addition:\n`long x = (long)(int_val_1 + int_val_2)`, but there is another possible \nway to widen: `long x = (long)int_val_1 + (long)int_val_2`. so in this case, the widening\nis disallowed. However, `long x = int_val_1` is unambiguous, so C3 permits it just like C (read more on the [conversion page](/language-rules/conversion/). \n\nC3 also adds *safe signed-unsigned comparisons*: this means that comparing signed and unsigned values will always yield the correct result:\n\n```c3\n// The code below would print \"Hello C3!\" in C3 and \"Hello C!\" in C.\nint i = -1;\nuint j = 1;\nif (i < j)\n{\n    printf(\"Hello C3!\\n\");\n}\nelse\n{\n    printf(\"Hello C!\\n\");\n}\n```\n\n##### `goto` removed\n\n`goto` is removed and replaced with labelled `break` and `continue` together with the `nextcase` statement that allows you to jump between cases in a `switch` statement.\n\n*Rationale: It is very difficult to make goto work well with defer and implicit unwrapping of optional results. It is not just making the compiler harder to write, but\nthe code is harder to understand as well. The replacements together with `defer` cover many if not all usages of `goto` in regular code.*\n\n##### Implicit break in switches\n\nEmpty `case` statements have implicit fall through in C3, otherwise the `nextcase` statement is needed\n`nextcase` can also be used to jump to any other case statement in the switch.\n\n```c3\nswitch (h)\n{\n    case 1:\n        a = 1;\n        nextcase; // Fall through\n    case 2:\n        b = 123;\n    case 3:\n        a = 2;\n        nextcase 2; // Jump to case 2\n    default:\n        a = 111;\n}\n```\n\n##### Locals variables are implicitly zeroed\n\nIn C global variables are implicitly zeroed out, but local variables aren't. \nIn C3 local variables are zeroed out by default, but may be *explicitly* undefined \n(using the `@noinit` attribute) if you wish to match the C behaviour.\n\n###### Rationale for this change \n- In the \"zero-is-initialization\" paradigm, zeroing variables, in particular structs, \nis very common. By offering zero initialization by default this **avoids a whole class of vulnerabilities**.\n- Another alternative that was considered for C3 was mandatory initialization,\nbut this adds a lot of extra boilerplate. \n- C3 also offers a way to opt out of zero-initialization, so the change comes at no performance loss.\n\n##### Bitfields replaced by bitstructs\n\nBitfields are replaced by bitstructs that have a well-defined encapsulating type, and \nan exact bit layout.\n\n```c\n// C\nstruct Foo\n{\n    int a : 3;\n    unsigned b : 4;\n    MyEnum c : 7;\n};\n\nstruct Flags\n{\n    bool has_hyperdrive : 1;\n    bool has_tractorbeam : 1;\n    bool has_plasmatorpedoes : 1;\n}    \n\n// C3\nbitstruct Foo : short\n{  \n    int a : 0..2;\n    uint b : 3..6;\n    MyEnum c : 7..13;\n}\n\n// Simple form, only allowed when all fields are bools.\nstruct Flags : char\n{\n    bool has_hyperdrive;\n    bool has_tractorbeam;\n    bool has_plasmatorpedoes;\n}\n```\n\n##### Evaluation order is well-defined\n\nEvaluation order is left-to-right, and in assignment expressions, assignment\nhappens after expression evaluation.\n\n##### Signed overflow is well-defined\n\nSigned integer overflow always wraps using 2s complement. It is never undefined behaviour.\n\n##### Octal removed\n\nThe old `0777` octal syntax is removed and replaced by a `0o` prefix, e.g. `0o777`. Strings do not support octal sequences aside\nfrom `'\\0'`.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":5,"slug":"no-mandatory-header-files","text":"No mandatory header files"},{"depth":5,"slug":"removal-of-the-old-c-macro-system","text":"Removal of the old C macro system"},{"depth":5,"slug":"import-and-modules","text":"Import and modules"},{"depth":5,"slug":"member-access-using--even-for-pointers","text":"Member access using . even for pointers"},{"depth":5,"slug":"different-operator-precedence","text":"Different operator precedence"},{"depth":5,"slug":"removal-of-the-const-type-qualifier","text":"Removal of the const type qualifier"},{"depth":5,"slug":"fixed-arrays-do-not-decay-and-have-copy-semantics","text":"Fixed arrays do not decay and have copy semantics"},{"depth":5,"slug":"removal-of-multiple-declaration-syntax-with-initialization","text":"Removal of multiple declaration syntax with initialization"},{"depth":5,"slug":"integer-promotions-rules-and-safe-signed-unsigned-comparisons","text":"Integer promotions rules and safe signed-unsigned comparisons"},{"depth":5,"slug":"goto-removed","text":"goto removed"},{"depth":5,"slug":"implicit-break-in-switches","text":"Implicit break in switches"},{"depth":5,"slug":"locals-variables-are-implicitly-zeroed","text":"Locals variables are implicitly zeroed"},{"depth":6,"slug":"rationale-for-this-change","text":"Rationale for this change"},{"depth":5,"slug":"bitfields-replaced-by-bitstructs","text":"Bitfields replaced by bitstructs"},{"depth":5,"slug":"evaluation-order-is-well-defined","text":"Evaluation order is well-defined"},{"depth":5,"slug":"signed-overflow-is-well-defined","text":"Signed overflow is well-defined"},{"depth":5,"slug":"octal-removed","text":"Octal removed"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
