import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<aside aria-label=\"Not installed the C3 compiler yet?\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Not installed the C3 compiler yet?</p><section class=\"starlight-aside__content\"><p><a href=\"/getting-started/prebuilt-binaries\">Download C3</a>, available on Mac, Windows and Linux.</p></section></aside>\n<h2 id=\"-hello-world\">👋 Hello world</h2>\n<p>Let’s start with the traditional first program, Hello World in C3:</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Hello, World!</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;fn void main(){    io::printn(&#x22;Hello, World!&#x22;);}\"><div></div></button></div></figure></div>\n<p>The <a href=\"/language-fundamentals/modules/#importing-modules\"><code dir=\"auto\">import</code></a> statement imports other modules, and we want <code dir=\"auto\">printn</code> which\nis in <code dir=\"auto\">std::io</code>.</p>\n<p>Next we define a <a href=\"/language-fundamentals/functions/\">function</a> which starts with the <code dir=\"auto\">fn</code> keyword followed by the return type. We don’t need to return anything, so return <code dir=\"auto\">void</code>. The function name <code dir=\"auto\">main</code> then follows, followed by the function’s parameter list, which is empty.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">() {}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void main() {}\"><div></div></button></div></figure></div>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>The function named <code dir=\"auto\">main</code> is a bit special, as it is where the program starts, or the entry point of the program.</p><p>For Unix-like OSes there are a few different variants, for example we might declare it as <code dir=\"auto\">fn void main(String[] args)</code>. In that case the parameter “args” contains a <a href=\"/language-common/arrays/#slice\">slice</a> of strings, of the program’s command line arguments, starting with the name of the program, itself.</p></section></aside>\n<h3 id=\"-function-scope\">🔭 Function scope</h3>\n<p><code dir=\"auto\">{</code> and <code dir=\"auto\">}</code> signifies the start and end of the function respectively,\nwe call this the function’s scope. Inside the function scope we have a single function\ncall to <code dir=\"auto\">printn</code> inside <code dir=\"auto\">std::io</code>. We use the last part of the path “io” in front of\nthe function to identify what module it belongs to.</p>\n<h3 id=\"-imports-can-use-a-shorthand\">📏 Imports can use a shorthand</h3>\n<p>We could have used the original longer path: <code dir=\"auto\">std::io::printn</code>\nif we wanted, but we <em>can</em> shorten it to just the lowest level module like <code dir=\"auto\">io::printn</code>. This is the <em>convention</em> in C3 and is is known as “path-shortening”, it avoids writing long import paths that can make code harder to read.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"cpp\"><code><div class=\"ec-line highlight del\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">std::io::</span><span style=\"--0:#82AAFF;--1:#2d4a86\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#743c3b\">Hello, World!</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line highlight ins\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#86adff;--1:#2e4c89\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#773d3c\">Hello, World!</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"std::io::printn(&#x22;Hello, World!&#x22;);io::printn(&#x22;Hello, World!&#x22;);\"><div></div></button></div></figure></div>\n<p>The <code dir=\"auto\">io::printn</code> function takes a single argument and prints it, followed by a newline, then the function ends and the program terminates.</p>\n<h2 id=\"-compiling-the-program\">🔧 Compiling the program</h2>\n<p>Let’s take the above program and put it in a file called <code dir=\"auto\">hello_world.c3</code>.</p>\n<p>We can then compile it with:</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre data-language=\"bash\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">c3c</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3C63B3\">compile</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3C63B3\">hello_world.c3</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"c3c compile hello_world.c3\"><div></div></button></div></figure></div>\n<p>And run it:</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre data-language=\"bash\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">./hello_world</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"./hello_world\"><div></div></button></div></figure></div>\n<p>It should print <code dir=\"auto\">Hello, World!</code> and return back to the command line prompt.\nIf you are on Windows, you will have <code dir=\"auto\">hello_world.exe</code> instead. Call it in the same way.</p>\n<h3 id=\"-compiling-and-running\">🏃 Compiling and running</h3>\n<p>When we start out it can be useful to compile and then have the compiler start the\nprogram immediately. We can do that with <code dir=\"auto\">compile-run</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre data-language=\"bash\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">$</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3C63B3\">c3c</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3C63B3\">compile-run</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3C63B3\">hello_world.c3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#097174\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> Program linked to executable </span><span style=\"--0:#D9F5DD;--1:#111111\">'</span><span style=\"--0:#ECC48D;--1:#9B504E\">hello_world</span><span style=\"--0:#D9F5DD;--1:#111111\">'</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#097174\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> Launching hello_world...</span></div></div><div class=\"ec-line highlight mark\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#086164\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> Hello, World</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"$ c3c compile-run hello_world.c3> Program linked to executable &#x27;hello_world&#x27;.> Launching hello_world...> Hello, World\"><div></div></button></div></figure></div>\n<p>Want more options when compiling? <a href=\"/build-your-project/build-commands/\">Check the c3c compiler build options</a>.</p>\n<h3 id=\"-successfully-working\">🎉 Successfully working?</h3>\n<p>Congratulations! You’re now up and running with C3.</p>\n<h3 id=\"-need-help\">❓ Need help?</h3>\n<p>We’re happy to help on the <a href=\"https://discord.gg/qN76R87\">C3 Discord</a>.</p>";

				const frontmatter = {"title":"Hello World","description":"Learn to write hello world","sidebar":{"order":30}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Getting Started/hello-world.md";
				const url = undefined;
				function rawContent() {
					return "\n:::note[Not installed the C3 compiler yet?]\n[Download C3](/getting-started/prebuilt-binaries), available on Mac, Windows and Linux.\n:::\n\n## 👋 Hello world\nLet's start with the traditional first program, Hello World in C3:\n\n```c3\nimport std::io;\n\nfn void main()\n{\n    io::printn(\"Hello, World!\");\n}\n```\n\nThe [`import`](/language-fundamentals/modules/#importing-modules) statement imports other modules, and we want `printn` which\nis in `std::io`.\n\nNext we define a [function](/language-fundamentals/functions/) which starts with the `fn` keyword followed by the return type. We don't need to return anything, so return `void`. The function name `main` then follows, followed by the function's parameter list, which is empty.\n```c3\nfn void main() {}\n```\n\n:::note\nThe function named `main` is a bit special, as it is where the program starts, or the entry point of the program.\n\nFor Unix-like OSes there are a few different variants, for example we might declare it as `fn void main(String[] args)`. In that case the parameter \"args\" contains a [slice](/language-common/arrays/#slice) of strings, of the program's command line arguments, starting with the name of the program, itself.\n:::\n\n\n### 🔭 Function scope\n`{` and `}` signifies the start and end of the function respectively, \nwe call this the function's scope. Inside the function scope we have a single function \ncall to `printn` inside `std::io`. We use the last part of the path \"io\" in front of\nthe function to identify what module it belongs to.\n\n### 📏 Imports can use a shorthand\nWe could have used the original longer path: `std::io::printn`\nif we wanted, but we *can* shorten it to just the lowest level module like `io::printn`. This is the *convention* in C3 and is is known as \"path-shortening\", it avoids writing long import paths that can make code harder to read.\n\n```diff lang=\"cpp\"\n- std::io::printn(\"Hello, World!\");\n+ io::printn(\"Hello, World!\");\n\n```\n\nThe `io::printn` function takes a single argument and prints it, followed by a newline, then the function ends and the program terminates.\n\n\n## 🔧 Compiling the program\n\nLet's take the above program and put it in a file called `hello_world.c3`.\n\nWe can then compile it with:\n\n```bash \nc3c compile hello_world.c3\n```\n\nAnd run it:\n\n```bash\n./hello_world\n```\n\nIt should print `Hello, World!` and return back to the command line prompt. \nIf you are on Windows, you will have `hello_world.exe` instead. Call it in the same way.\n\n### 🏃 Compiling and running\n\nWhen we start out it can be useful to compile and then have the compiler start the\nprogram immediately. We can do that with `compile-run`:\n\n```bash {4}\n$ c3c compile-run hello_world.c3\n> Program linked to executable 'hello_world'.\n> Launching hello_world...\n> Hello, World\n```\n\nWant more options when compiling? [Check the c3c compiler build options](/build-your-project/build-commands/).\n### 🎉 Successfully working? \nCongratulations! You're now up and running with C3.\n\n### ❓ Need help?\nWe're happy to help on the [C3 Discord](https://discord.gg/qN76R87).\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"-hello-world","text":"👋 Hello world"},{"depth":3,"slug":"-function-scope","text":"🔭 Function scope"},{"depth":3,"slug":"-imports-can-use-a-shorthand","text":"📏 Imports can use a shorthand"},{"depth":2,"slug":"-compiling-the-program","text":"🔧 Compiling the program"},{"depth":3,"slug":"-compiling-and-running","text":"🏃 Compiling and running"},{"depth":3,"slug":"-successfully-working","text":"🎉 Successfully working?"},{"depth":3,"slug":"-need-help","text":"❓ Need help?"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
