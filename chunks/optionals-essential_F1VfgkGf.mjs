import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>In this section we will go over the <em>essential</em> information about Optionals and safe methods for working with them, for example\n<a href=\"#checking-if-an-optional-is-empty\"><code dir=\"auto\">if (catch optional_value)</code></a>\nand the <a href=\"#using-the-rethrow-operator--to-unwrap-an-optional-value\">Rethrow operator <code dir=\"auto\">!</code></a>.</p>\n<p>In the <a href=\"/language-common/optionals-advanced/\">advanced section</a> there are other <em>nice to have</em> features.\nLike an alternative to safely unwrap a result from an Optionals using\n<a href=\"/language-common/optionals-advanced/#run-code-if-the-optional-has-a-result\"><code dir=\"auto\">if (try optional_value)</code></a>\nand an unsafe method to <a href=\"/language-common/optionals-advanced/#force-unwrapping-expressions\">force unwrap <code dir=\"auto\">!!</code></a>\na result from an Optional, return <a href=\"/language-common/optionals-advanced/#return-a-default-value-if-optional-is-empty\">default values for optionals <code dir=\"auto\">??</code></a> if they are empty and other more specialised concepts.</p>\n<h2 id=\"what-is-an-optional\">What is an Optional?</h2>\n<p>Optionals are a safer alternative to returning <code dir=\"auto\">-1</code> or <code dir=\"auto\">null</code> from\na function, when a valid value can‚Äôt be returned. An Optional\nhas either a <em>result</em> or is <em>empty</em>. When an Optional\nis empty it has an <code dir=\"auto\">Excuse</code> explaining what happened.</p>\n<ul>\n<li>For example trying to open a missing file returns the <code dir=\"auto\">Excuse</code> of <code dir=\"auto\">io::FILE_NOT_FOUND</code>.</li>\n<li>Optionals are declared by adding <code dir=\"auto\">?</code> after the type.</li>\n<li>An <code dir=\"auto\">Excuse</code> is of type <code dir=\"auto\">fault</code>.</li>\n</ul>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Set the Optional to a result</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int? a = 1; // Set the Optional to a result\"><div></div></button></div></figure></div>\n<p>The Optional Excuse is set with <code dir=\"auto\">?</code> after the value.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Set the Optional to empty with a specific Excuse.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> io::FILE_NOT_FOUND</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Set the Optional to empty with a specific Excuse.int? b = io::FILE_NOT_FOUND?;\"><div></div></button></div></figure></div>\n<p>faults are declared without namespacing, so for example <code dir=\"auto\">io::FILE_NOT_FOUND</code> is <code dir=\"auto\">io::FILE_NOT_FOUND</code>.\nOther than that semantics is unchanged.</p>\n<h2 id=\"-unwrapping-an-optional\">üéÅ Unwrapping an Optional</h2>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>Unwrapping an Optional is safe because it checks it has a\nresult present before trying to use it.</p><p>After unwrapping, the variable then behaves like a normal variable, a non-Optional.</p></section></aside>\n<h2 id=\"checking-if-an-optional-is-empty\">Checking if an Optional is empty</h2>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Return an Excuse by adding '?' after the fault.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> io::FILE_NOT_FOUND</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">(String[] args)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// If the Optional is empty, assign the</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Excuse to a variable:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">())</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">test() gave an Excuse: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, excuse);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;fn void? test(){    // Return an Excuse by adding &#x27;?&#x27; after the fault.    return io::FILE_NOT_FOUND?;}fn void main(String[] args){    // If the Optional is empty, assign the    // Excuse to a variable:    if (catch excuse = test())    {        io::printfn(&#x22;test() gave an Excuse: %s&#x22;, excuse);    }}\"><div></div></button></div></figure></div>\n<h3 id=\"automatically-unwrapping-an-optional-result\">Automatically unwrapping an Optional result</h3>\n<p>If we escape the current scope from an <code dir=\"auto\">if (catch my_var)</code> using a <code dir=\"auto\">return</code>, <code dir=\"auto\">break</code>, <code dir=\"auto\">continue</code>\nor <a href=\"#using-the-rethrow-operator--to-unwrap-an-optional-value\">Rethrow</a> <code dir=\"auto\">!</code>,\nthen the variable is automatically <a href=\"#-unwrapping-an-optional\">unwrapped</a> to a non-Optional:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">unreliable_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">        </span></span><span style=\"--0:#809191;--1:#5E6578\">// Return the excuse with `?` operator</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Because the compiler knows 'foo' cannot</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// be empty here, it is unwrapped to non-Optional</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// 'int foo' in this scope:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">foo: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, foo);</span><span style=\"--0:#809191;--1:#5E6578\"> // 7</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void? test(){    int? foo = unreliable_function();    if (catch excuse = foo)    {        // Return the excuse with &#x60;?&#x60; operator        return excuse?;    }    // Because the compiler knows &#x27;foo&#x27; cannot    // be empty here, it is unwrapped to non-Optional    // &#x27;int foo&#x27; in this scope:    io::printfn(&#x22;foo: %s&#x22;, foo); // 7}\"><div></div></button></div></figure></div>\n<h3 id=\"using-the-rethrow-operator--to-unwrap-an-optional-value\">Using the Rethrow operator <code dir=\"auto\">!</code> to unwrap an Optional value</h3>\n<ul>\n<li>The Rethrow operator <code dir=\"auto\">!</code> will return from the function with the <code dir=\"auto\">Excuse</code> if the Optional result is empty.</li>\n<li>The resulting value will be <a href=\"#-unwrapping-an-optional\">unwrapped</a> to a non-Optional.</li>\n</ul>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Function returning an Optional</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">maybe_func</span><span style=\"--0:#D6DEEB;--1:#403F53\">() {</span><span style=\"--0:#809191;--1:#616671\"> /* ... */</span><span style=\"--0:#D6DEEB;--1:#403F53\"> }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// ‚ùå This will be a compile error</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// maybe_function() returns an Optional</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// and 'bar' is not declared Optional:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// int bar = maybe_function();</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> bar </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">maybe_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span><span style=\"--0:#C792EA;--1:#8D46B4\">!</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// ‚úÖ The above is equivalent to:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// int? temp = maybe_function();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// if (catch excuse = temp) return excuse?</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Now temp is unwrapped to a non-Optional</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> bar </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> temp;</span><span style=\"--0:#809191;--1:#5E6578\"> // ‚úÖ This is OK</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;// Function returning an Optionalfn int? maybe_func() { /* ... */ }fn void? test(){    // ‚ùå This will be a compile error    // maybe_function() returns an Optional    // and &#x27;bar&#x27; is not declared Optional:    // int bar = maybe_function();    int bar = maybe_function()!;    // ‚úÖ The above is equivalent to:    // int? temp = maybe_function();    // if (catch excuse = temp) return excuse?    // Now temp is unwrapped to a non-Optional    int bar = temp; // ‚úÖ This is OK}\"><div></div></button></div></figure></div>\n<h2 id=\"Ô∏è-optionals-affect-types-and-control-flow\">‚ö†Ô∏è Optionals affect types and control flow</h2>\n<h3 id=\"optionals-in-expressions-produce-optionals\">Optionals in expressions produce Optionals</h3>\n<p>Use an Optional anywhere in an expression the resulting\nexpression will be an Optional too.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">(String[] args)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Returns Optional with result of type `int` or an Excuse</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> first_optional </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// This is Optional too:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> second_optional </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> first_optional </span><span style=\"--0:#C792EA;--1:#8D46B4\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;fn void main(String[] args){    // Returns Optional with result of type &#x60;int&#x60; or an Excuse    int? first_optional = 7;    // This is Optional too:    int? second_optional = first_optional + 1;}\"><div></div></button></div></figure></div>\n<h3 id=\"optionals-affect-function-return-types\">Optionals affect function return types</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> input)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">test(): inside function body</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> input;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">(String[] args)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_argument </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// `optional_argument` makes returned `returned_optional`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Optional too:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> returned_optional </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">(optional_argument);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;fn int test(int input){    io::printn(&#x22;test(): inside function body&#x22;);    return input;}fn void main(String[] args){    int? optional_argument = 7;    // &#x60;optional_argument&#x60; makes returned &#x60;returned_optional&#x60;    // Optional too:    int? returned_optional = test(optional_argument);}\"><div></div></button></div></figure></div>\n<h3 id=\"functions-conditionally-run-when-called-with-optional-arguments\">Functions conditionally run when called with Optional arguments</h3>\n<p>When calling a function with an Optionals as arguments,\nthe result will be the first Excuse found looking left-to-right.\nThe function is only executed if all Optional arguments\nhave a result.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> input, </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> input2)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">test(): inside function body</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> input;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">(String[] args)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> first_optional </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> io::FILE_NOT_FOUND</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> second_optional </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Return first excuse we find</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> third_optional </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">(first_optional, second_optional);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> third_optional)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">        </span></span><span style=\"--0:#809191;--1:#5E6578\">// excuse == io::FILE_NOT_FOUND</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">third_optional's Excuse: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, excuse);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;fn int test(int input, int input2){    io::printn(&#x22;test(): inside function body&#x22;);    return input;}fn void main(String[] args){    int? first_optional = io::FILE_NOT_FOUND?;    int? second_optional = 7;    // Return first excuse we find    int? third_optional = test(first_optional, second_optional);    if (catch excuse = third_optional)    {        // excuse == io::FILE_NOT_FOUND        io::printfn(&#x22;third_optional&#x27;s Excuse: %s&#x22;, excuse);    }}\"><div></div></button></div></figure></div>\n<h2 id=\"interfacing-with-c\">Interfacing with C</h2>\n<p>For C the interface to C3:</p>\n<ul>\n<li>The <code dir=\"auto\">Excuse</code> in the Optional of type <code dir=\"auto\">fault</code> is returned as the regular return.</li>\n<li>The result in the Optional is passed by reference.</li>\n</ul>\n<p>For example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// C3 code:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">get_value</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// C3 code:fn int? get_value();\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Corresponding C code:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">c3fault_t</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">get_value</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--1:#403F53\"><span style=\"--0:#D7DBE0\">value_ref</span><span style=\"--0:#D6DEEB\">);</span></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Corresponding C code:c3fault_t get_value(int *value_ref);\"><div></div></button></div></figure></div>\n<p>The <code dir=\"auto\">c3fault_t</code> is guaranteed to be a pointer sized value.</p>";

				const frontmatter = {"title":"Essential Error Handling","description":"Essential Error Handling","sidebar":{"order":64}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Language Common/optionals-essential.md";
				const url = undefined;
				function rawContent() {
					return "\nIn this section we will go over the *essential* information about Optionals and safe methods for working with them, for example\n [`if (catch optional_value)`](#checking-if-an-optional-is-empty)\n and the [Rethrow operator `!`](#using-the-rethrow-operator--to-unwrap-an-optional-value).\n\nIn the [advanced section](/language-common/optionals-advanced/) there are other *nice to have* features.\nLike an alternative to safely unwrap a result from an Optionals using\n[`if (try optional_value)`](/language-common/optionals-advanced/#run-code-if-the-optional-has-a-result)\nand an unsafe method to [force unwrap `!!`](/language-common/optionals-advanced/#force-unwrapping-expressions)\na result from an Optional, return [default values for optionals `??`](/language-common/optionals-advanced/#return-a-default-value-if-optional-is-empty) if they are empty and other more specialised concepts.\n\n## What is an Optional?\n\nOptionals are a safer alternative to returning `-1` or `null` from\na function, when a valid value can't be returned. An Optional\nhas either a *result* or is *empty*. When an Optional\nis empty it has an `Excuse` explaining what happened.\n\n- For example trying to open a missing file returns the `Excuse` of `io::FILE_NOT_FOUND`.\n- Optionals are declared by adding `?` after the type.\n- An `Excuse` is of type `fault`.\n```c3\nint? a = 1; // Set the Optional to a result\n```\nThe Optional Excuse is set with `?` after the value.\n```c3\n// Set the Optional to empty with a specific Excuse.\nint? b = io::FILE_NOT_FOUND?;\n```\n\nfaults are declared without namespacing, so for example `io::FILE_NOT_FOUND` is `io::FILE_NOT_FOUND`.\nOther than that semantics is unchanged.\n\n## üéÅ Unwrapping an Optional\n:::note\n\nUnwrapping an Optional is safe because it checks it has a\nresult present before trying to use it.\n\nAfter unwrapping, the variable then behaves like a normal variable, a non-Optional.\n:::\n\n## Checking if an Optional is empty\n\n```c3\nimport std::io;\n\nfn void? test()\n{\n    // Return an Excuse by adding '?' after the fault.\n    return io::FILE_NOT_FOUND?;\n}\n\nfn void main(String[] args)\n{\n    // If the Optional is empty, assign the\n    // Excuse to a variable:\n    if (catch excuse = test())\n    {\n        io::printfn(\"test() gave an Excuse: %s\", excuse);\n    }\n}\n```\n\n### Automatically unwrapping an Optional result\n\nIf we escape the current scope from an `if (catch my_var)` using a `return`, `break`, `continue`\nor [Rethrow](#using-the-rethrow-operator--to-unwrap-an-optional-value) `!`,\nthen the variable is automatically [unwrapped](#-unwrapping-an-optional) to a non-Optional:\n```c3\nfn void? test()\n{\n    int? foo = unreliable_function();\n    if (catch excuse = foo)\n    {\n        // Return the excuse with `?` operator\n        return excuse?;\n    }\n    // Because the compiler knows 'foo' cannot\n    // be empty here, it is unwrapped to non-Optional\n    // 'int foo' in this scope:\n    io::printfn(\"foo: %s\", foo); // 7\n}\n```\n### Using the Rethrow operator `!` to unwrap an Optional value\n\n- The Rethrow operator `!` will return from the function with the `Excuse` if the Optional result is empty.\n- The resulting value will be [unwrapped](#-unwrapping-an-optional) to a non-Optional.\n\n```c3\nimport std::io;\n\n// Function returning an Optional\nfn int? maybe_func() { /* ... */ }\n\nfn void? test()\n{\n    // ‚ùå This will be a compile error\n    // maybe_function() returns an Optional\n    // and 'bar' is not declared Optional:\n    // int bar = maybe_function();\n\n    int bar = maybe_function()!;\n    // ‚úÖ The above is equivalent to:\n    // int? temp = maybe_function();\n    // if (catch excuse = temp) return excuse?\n\n    // Now temp is unwrapped to a non-Optional\n    int bar = temp; // ‚úÖ This is OK\n}\n```\n\n## ‚ö†Ô∏è Optionals affect types and control flow\n\n### Optionals in expressions produce Optionals\nUse an Optional anywhere in an expression the resulting\nexpression will be an Optional too.\n```c3\nimport std::io;\n\nfn void main(String[] args)\n{\n    // Returns Optional with result of type `int` or an Excuse\n    int? first_optional = 7;\n\n    // This is Optional too:\n    int? second_optional = first_optional + 1;\n}\n```\n\n### Optionals affect function return types\n\n```c3\nimport std::io;\n\nfn int test(int input)\n{\n    io::printn(\"test(): inside function body\");\n    return input;\n}\n\nfn void main(String[] args)\n{\n    int? optional_argument = 7;\n\n    // `optional_argument` makes returned `returned_optional`\n    // Optional too:\n    int? returned_optional = test(optional_argument);\n}\n```\n\n### Functions conditionally run when called with Optional arguments\n\nWhen calling a function with an Optionals as arguments,\nthe result will be the first Excuse found looking left-to-right.\nThe function is only executed if all Optional arguments\nhave a result.\n\n```c3\nimport std::io;\n\nfn int test(int input, int input2)\n{\n    io::printn(\"test(): inside function body\");\n    return input;\n}\n\nfn void main(String[] args)\n{\n    int? first_optional = io::FILE_NOT_FOUND?;\n    int? second_optional = 7;\n\n    // Return first excuse we find\n    int? third_optional = test(first_optional, second_optional);\n    if (catch excuse = third_optional)\n    {\n        // excuse == io::FILE_NOT_FOUND\n        io::printfn(\"third_optional's Excuse: %s\", excuse);\n    }\n}\n```\n\n## Interfacing with C\n\nFor C the interface to C3:\n- The `Excuse` in the Optional of type `fault` is returned as the regular return.\n- The result in the Optional is passed by reference.\n\nFor example:\n\n\n```c3\n// C3 code:\nfn int? get_value();\n```\n\n```c\n// Corresponding C code:\nc3fault_t get_value(int *value_ref);\n```\nThe `c3fault_t` is guaranteed to be a pointer sized value.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"what-is-an-optional","text":"What is an Optional?"},{"depth":2,"slug":"-unwrapping-an-optional","text":"üéÅ Unwrapping an Optional"},{"depth":2,"slug":"checking-if-an-optional-is-empty","text":"Checking if an Optional is empty"},{"depth":3,"slug":"automatically-unwrapping-an-optional-result","text":"Automatically unwrapping an Optional result"},{"depth":3,"slug":"using-the-rethrow-operator--to-unwrap-an-optional-value","text":"Using the Rethrow operator ! to unwrap an Optional value"},{"depth":2,"slug":"Ô∏è-optionals-affect-types-and-control-flow","text":"‚ö†Ô∏è Optionals affect types and control flow"},{"depth":3,"slug":"optionals-in-expressions-produce-optionals","text":"Optionals in expressions produce Optionals"},{"depth":3,"slug":"optionals-affect-function-return-types","text":"Optionals affect function return types"},{"depth":3,"slug":"functions-conditionally-run-when-called-with-optional-arguments","text":"Functions conditionally run when called with Optional arguments"},{"depth":2,"slug":"interfacing-with-c","text":"Interfacing with C"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
