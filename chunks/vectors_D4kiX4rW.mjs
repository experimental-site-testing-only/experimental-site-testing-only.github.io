import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>Vectors - where possible - based on underlying hardware vector implementations. A vector is similar to an array, but\nwith additional functionality. The restriction is that a vector may only consist of elements that are numerical\ntypes, boolean or pointers.</p>\n<p>A vector is declared similar to an array but uses <code dir=\"auto\">[&#x3C;>]</code> rather than <code dir=\"auto\">[]</code>, e.g. <code dir=\"auto\">int[&#x3C;4>]</code>.</p>\n<p>(If you are searching for the counterpart of C++‘s <code dir=\"auto\">std::vector</code>, look instead at the standard\nlibrary <a href=\"/language-common/arrays/#dynamic-arrays-and-lists\"><code dir=\"auto\">List</code> type</a>.)</p>\n<h2 id=\"arithmetics-on-vectors\">Arithmetics on vectors</h2>\n<p>Vectors support all arithmetics and other operations supported by its underlying type. The operations are\nalways performed elementwise.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">23</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">11</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span><span style=\"--0:#809191;--1:#5E6578\">     // c = { 46, 11 }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<2>] a = { 23, 11 };int[<2>] b = { 2, 1 };int[<2>] c = a * b;     // c = { 46, 11 }\"><div></div></button></div></figure></div>\n<p>For integer and boolean types, bit operations such as <code dir=\"auto\">^ | &#x26; &#x3C;&#x3C; >></code> are available, and for pointers, pointer arithmetic\nis supported.</p>\n<h3 id=\"scalar-values\">Scalar values</h3>\n<p>Scalar values will implicitly widen to vectors when used with vectors:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] d </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">21</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">14</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] e </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d </span><span style=\"--0:#C792EA;--1:#8D46B4\">/</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">      // e = { 3, 2 }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">          // f = { 4, 4 }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<2>] d = { 21, 14 };int[<2>] e = d / 7;      // e = { 3, 2 }int[<2>] f = 4;          // f = { 4, 4 }\"><div></div></button></div></figure></div>\n<h2 id=\"additional-operations\">Additional operations</h2>\n<p>The <code dir=\"auto\">std::math</code> module contains a wealth of additional operations available on vectors using dot-method syntax.</p>\n<ul>\n<li><code dir=\"auto\">.sum()</code> - sum all vector elements.</li>\n<li><code dir=\"auto\">.product()</code> - multiply all vector elements.</li>\n<li><code dir=\"auto\">.max()</code> - get the maximum element.</li>\n<li><code dir=\"auto\">.min()</code> - get the minimum element.</li>\n<li><code dir=\"auto\">.dot(other)</code> - return the dot product with the other vector.</li>\n<li><code dir=\"auto\">.length(other)</code> - return the square root of the dot product (not available on integer vectors).</li>\n<li><code dir=\"auto\">.distance(other)</code> - return the length of the difference of the two vectors (not available on integer vectors).</li>\n<li><code dir=\"auto\">.normalize()</code> - return a normalized vector (not available on integer vectors).</li>\n<li><code dir=\"auto\">.comp_lt(other)</code> - return a boolean vector with a component wise ”&#x3C;”</li>\n<li><code dir=\"auto\">.comp_le(other)</code> - return a boolean vector with a component wise ”&#x3C;=”</li>\n<li><code dir=\"auto\">.comp_eq(other)</code> - return a boolean vector with a component wise ”==”</li>\n<li><code dir=\"auto\">.comp_gt(other)</code> - return a boolean vector with a component wise ”>”</li>\n<li><code dir=\"auto\">.comp_ge(other)</code> - return a boolean vector with a component wise ”>=”</li>\n<li><code dir=\"auto\">.comp_ne(other)</code> - return a boolean vector with a component wise ”!=”</li>\n</ul>\n<p>Dot methods available for scalar values, such as <code dir=\"auto\">ceil</code>, <code dir=\"auto\">fma</code> etc are in general also available for vectors.</p>\n<h2 id=\"swizzling\">Swizzling</h2>\n<p>Swizzling using dot notation is supported, using x, y, z, w <em>or</em> r, g, b, a:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">11</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">22</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">33</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">xxzx</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">                         // b = { 11, 11, 33, 11 }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">b</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">w</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">                                 // c = 11;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] color </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">11</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">22</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">33</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">FF</span></span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\"> red </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">color</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">r</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">                          // red = 0x11</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">b</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">xy</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">b</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">zw</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">color</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">rg</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">+=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<3>] a = { 11, 22, 33 };int[<4>] b = a.xxzx;                         // b = { 11, 11, 33, 11 }int c = b.w;                                 // c = 11;char[<4>] color = { 0x11, 0x22, 0x33, 0xFF };char red = color.r;                          // red = 0x11b.xy = b.zw;color.rg += { 1, 2 };\"><div></div></button></div></figure></div>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>Assignment, like <code dir=\"auto\">color.rg += { 1, 2 }</code> is only available in 0.7.0 and later.</p></section></aside>\n<h2 id=\"array-like-operations\">Array-like operations</h2>\n<p>Like arrays, it’s possible to make slices and iterate over vectors.</p>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>The storage alignment of vectors are often different from arrays, which should be taken into account when storing vectors.</p></section></aside>";

				const frontmatter = {"title":"Vectors","description":"Vectors","sidebar":{"order":63}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Language Common/vectors.md";
				const url = undefined;
				function rawContent() {
					return "\nVectors - where possible - based on underlying hardware vector implementations. A vector is similar to an array, but \nwith additional functionality. The restriction is that a vector may only consist of elements that are numerical\ntypes, boolean or pointers.\n\nA vector is declared similar to an array but uses `[<>]` rather than `[]`, e.g. `int[<4>]`.\n\n(If you are searching for the counterpart of C++'s `std::vector`, look instead at the standard\nlibrary [`List` type](/language-common/arrays/#dynamic-arrays-and-lists).)\n\n## Arithmetics on vectors\n\nVectors support all arithmetics and other operations supported by its underlying type. The operations are\nalways performed elementwise.\n\n```c3\nint[<2>] a = { 23, 11 };\nint[<2>] b = { 2, 1 };\nint[<2>] c = a * b;     // c = { 46, 11 }\n```\n\nFor integer and boolean types, bit operations such as `^ | & << >>` are available, and for pointers, pointer arithmetic\nis supported.\n\n### Scalar values\n\nScalar values will implicitly widen to vectors when used with vectors:\n\n```c3\nint[<2>] d = { 21, 14 };\nint[<2>] e = d / 7;      // e = { 3, 2 }\nint[<2>] f = 4;          // f = { 4, 4 }\n```\n\n## Additional operations\n\nThe `std::math` module contains a wealth of additional operations available on vectors using dot-method syntax.\n\n- `.sum()` - sum all vector elements.\n- `.product()` - multiply all vector elements.\n- `.max()` - get the maximum element.\n- `.min()` - get the minimum element.\n- `.dot(other)` - return the dot product with the other vector.\n- `.length(other)` - return the square root of the dot product (not available on integer vectors).\n- `.distance(other)` - return the length of the difference of the two vectors (not available on integer vectors).\n- `.normalize()` - return a normalized vector (not available on integer vectors).\n- `.comp_lt(other)` - return a boolean vector with a component wise \"<\" \n- `.comp_le(other)` - return a boolean vector with a component wise \"<=\"  \n- `.comp_eq(other)` - return a boolean vector with a component wise \"==\"  \n- `.comp_gt(other)` - return a boolean vector with a component wise \">\"  \n- `.comp_ge(other)` - return a boolean vector with a component wise \">=\"  \n- `.comp_ne(other)` - return a boolean vector with a component wise \"!=\"  \n\nDot methods available for scalar values, such as `ceil`, `fma` etc are in general also available for vectors.\n\n## Swizzling\n\nSwizzling using dot notation is supported, using x, y, z, w *or* r, g, b, a:\n\n```c3\nint[<3>] a = { 11, 22, 33 };\nint[<4>] b = a.xxzx;                         // b = { 11, 11, 33, 11 }\nint c = b.w;                                 // c = 11;\nchar[<4>] color = { 0x11, 0x22, 0x33, 0xFF };\nchar red = color.r;                          // red = 0x11\nb.xy = b.zw;\ncolor.rg += { 1, 2 };\n```\n\n:::note\nAssignment, like `color.rg += { 1, 2 }` is only available in 0.7.0 and later.\n:::\n\n## Array-like operations\n\nLike arrays, it's possible to make slices and iterate over vectors. \n:::note\nThe storage alignment of vectors are often different from arrays, which should be taken into account when storing vectors.\n:::\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"arithmetics-on-vectors","text":"Arithmetics on vectors"},{"depth":3,"slug":"scalar-values","text":"Scalar values"},{"depth":2,"slug":"additional-operations","text":"Additional operations"},{"depth":2,"slug":"swizzling","text":"Swizzling"},{"depth":2,"slug":"array-like-operations","text":"Array-like operations"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
