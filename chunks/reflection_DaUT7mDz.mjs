import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>C3 allows both compile time and runtime reflection.</p>\n<p>During compile time the type information may be directly used as compile time constants, the same data is then available dynamically at runtime.</p>\n<p><em>Note that not all reflection is implemented in the compiler at this point in time.</em></p>\n<h2 id=\"compile-time-reflection\">Compile time reflection</h2>\n<p>During compile time there are a number of compile time fields that may be accessed directly.</p>\n<h3 id=\"type-properties\">Type properties</h3>\n<p>It is possible to access properties on the type itself:</p>\n<ul>\n<li><code dir=\"auto\">alignof</code></li>\n<li><code dir=\"auto\">associated</code></li>\n<li><code dir=\"auto\">elements</code></li>\n<li><code dir=\"auto\">extnameof</code></li>\n<li><code dir=\"auto\">inf</code></li>\n<li><code dir=\"auto\">inner</code></li>\n<li><code dir=\"auto\">kindof</code></li>\n<li><code dir=\"auto\">len</code></li>\n<li><code dir=\"auto\">max</code></li>\n<li><code dir=\"auto\">membersof</code></li>\n<li><code dir=\"auto\">min</code></li>\n<li><code dir=\"auto\">nan</code></li>\n<li><code dir=\"auto\">nameof</code></li>\n<li><code dir=\"auto\">names</code></li>\n<li><code dir=\"auto\">params</code></li>\n<li><code dir=\"auto\">parentof</code></li>\n<li><code dir=\"auto\">qnameof</code></li>\n<li><code dir=\"auto\">returns</code></li>\n<li><code dir=\"auto\">sizeof</code></li>\n<li><code dir=\"auto\">typeid</code></li>\n<li><code dir=\"auto\">values</code></li>\n</ul>\n<h4 id=\"alignof\"><code dir=\"auto\">alignof</code></h4>\n<p>Returns the alignment in bytes needed for the type.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo @align(8)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">uint</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">alignof</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // 8</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"struct Foo @align(8){    int a;}uint a = Foo.alignof; // 8\"><div></div></button></div></figure></div>\n<h4 id=\"associated\"><code dir=\"auto\">associated</code></h4>\n<p><em>Only available for enums.</em>\nReturns an array containing the types of associated values if any.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo : </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d, String s)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">BAR</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1.0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, \"normal\" },</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">BAZ </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">2.0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">exceptional</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\"> }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String s </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">associated</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">].</span><span style=\"--0:#7FDBCA;--1:#097174\">nameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // \"double\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"enum Foo : int (double d, String s){    BAR = { 1.0, &#x22;normal&#x22; },    BAZ = { 2.0, &#x22;exceptional&#x22; }}String s = Foo.associated[0].nameof; // &#x22;double&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"elements\"><code dir=\"auto\">elements</code></h4>\n<p>Returns the element count of an enum.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FooEnum</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">BAR</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">BAZ</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">FooEnum</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">elements</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // 2</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"enum FooEnum{    BAR,    BAZ}int x = FooEnum.elements; // 2\"><div></div></button></div></figure></div>\n<h4 id=\"inf\"><code dir=\"auto\">inf</code></h4>\n<p><em>Only available for floating point types</em></p>\n<p>Returns a representation of floating point “infinity”.</p>\n<h4 id=\"inner\"><code dir=\"auto\">inner</code></h4>\n<p>This returns a typeid to an “inner” type. What this means is different for each type:</p>\n<ul>\n<li>Array -> the array base type.</li>\n<li>Bitstruct -> underlying base type.</li>\n<li>Distinct -> the underlying type.</li>\n<li>Enum -> underlying enum base type.</li>\n<li>Pointer -> the type being pointed to.</li>\n<li>Vector -> the vector base type.</li>\n</ul>\n<p>It is not defined for other types.</p>\n<h4 id=\"kindof\"><code dir=\"auto\">kindof</code></h4>\n<p>Returns the underlying <code dir=\"auto\">TypeKind</code> as defined in std::core::types.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">TypeKind kind </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">.kindof;</span><span style=\"--0:#809191;--1:#5E6578\"> // TypeKind.SIGNED_INT</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"TypeKind kind = int.kindof; // TypeKind.SIGNED_INT\"><div></div></button></div></figure></div>\n<h4 id=\"len\"><code dir=\"auto\">len</code></h4>\n<p>Returns the length of the array.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">usz len </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">].</span><span style=\"--0:#7FDBCA;--1:#097174\">len</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // 4</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"usz len = int[4].len; // 4\"><div></div></button></div></figure></div>\n<h4 id=\"max\"><code dir=\"auto\">max</code></h4>\n<p>Returns the maximum value of the type (only valid for integer and float types).</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">ushort</span><span style=\"--0:#D6DEEB;--1:#403F53\"> max_ushort </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">ushort</span><span style=\"--0:#D6DEEB;--1:#403F53\">.max;</span><span style=\"--0:#809191;--1:#5E6578\"> // 65535</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"ushort max_ushort = ushort.max; // 65535\"><div></div></button></div></figure></div>\n<h4 id=\"membersof\"><code dir=\"auto\">membersof</code></h4>\n<p><em>Only available for bitstruct, struct and union types.</em></p>\n<p>Returns a <em>compile time</em> list containing the fields in a bitstruct, struct or union. The\nelements have the <em>compile time only</em> type of <code dir=\"auto\">member_ref</code>.</p>\n<p><em>Note: As the list is an “untyped” list, you are limited to iterating and accessing it at\ncompile time.</em></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Baz</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> z;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Baz</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">membersof</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">].</span><span style=\"--0:#7FDBCA;--1:#097174\">nameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // \"z\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"struct Baz{    int x;    Foo* z;}String x = Baz.membersof[1].nameof; // &#x22;z&#x22;\"><div></div></button></div></figure></div>\n<p>A <code dir=\"auto\">member_ref</code> has properties <code dir=\"auto\">alignof</code>, <code dir=\"auto\">kindof</code>, <code dir=\"auto\">membersof</code>, <code dir=\"auto\">nameof</code>, <code dir=\"auto\">offsetof</code>, <code dir=\"auto\">sizeof</code> and <code dir=\"auto\">typeid</code>.</p>\n<h4 id=\"min\"><code dir=\"auto\">min</code></h4>\n<p>Returns the minimum value of the type (only valid for integer and float types).</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">ichar min_ichar </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">ichar</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">min</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // -128</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"ichar min_ichar = ichar.min; // -128\"><div></div></button></div></figure></div>\n<h4 id=\"nameof\"><code dir=\"auto\">nameof</code></h4>\n<p>Returns the name of the type.</p>\n<h4 id=\"names\"><code dir=\"auto\">names</code></h4>\n<p>Returns a slice containing the names of an enum.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FooEnum</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">BAR</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">BAZ</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String[] x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">FooEnum</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">names</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // [\"BAR\", \"BAZ\"]</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"enum FooEnum{    BAR,    BAZ}String[] x = FooEnum.names; // [&#x22;BAR&#x22;, &#x22;BAZ&#x22;]\"><div></div></button></div></figure></div>\n<h4 id=\"paramsof\"><code dir=\"auto\">paramsof</code></h4>\n<p><em>Only available for function pointer types.</em>\nReturns a ReflectParam struct for all function pointer parameters.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">alias TestFunc </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x, </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String s </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">TestFunc</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">paramsof</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">].</span><span style=\"--0:#7FDBCA;--1:#097174\">name</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // \"f\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">typeid t </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">TestFunc</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">paramsof</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">].</span><span style=\"--0:#7FDBCA;--1:#097174\">type</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // double.typeid</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"alias TestFunc = fn int(int x, double f);String s = TestFunc.paramsof[1].name; // &#x22;f&#x22;typeid t = TestFunc.paramsof[1].type; // double.typeid\"><div></div></button></div></figure></div>\n<h4 id=\"parentof\"><code dir=\"auto\">parentof</code></h4>\n<p><em>Only available for bitstruct and struct types.</em>\nReturns the typeid of the parent type.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Bar</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">inline</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo f;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Bar</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#FAF39F;--1:#111111\">parentof</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">nameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // \"Foo\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"struct Foo{    int a;}struct Bar{    inline Foo f;}String x = Bar.parentof.nameof; // &#x22;Foo&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"returns\"><code dir=\"auto\">returns</code></h4>\n<p><em>Only available for function types.</em>\nReturns the typeid of the return type.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">alias TestFunc </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String s </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">TestFunc</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#FAF39F;--1:#111111\">returns</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">nameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // \"int\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"alias TestFunc = fn int(int, double);String s = TestFunc.returns.nameof; // &#x22;int&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"sizeof\"><code dir=\"auto\">sizeof</code></h4>\n<p>Returns the size in bytes for the given type, like C <code dir=\"auto\">sizeof</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">usz x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"usz x = Foo.sizeof;\"><div></div></button></div></figure></div>\n<h4 id=\"typeid\"><code dir=\"auto\">typeid</code></h4>\n<p>Returns the typeid for the given type. <code dir=\"auto\">alias</code>s will return the typeid of the underlying type. The typeid size is the same as that of an <code dir=\"auto\">iptr</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">typeid x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">typeid</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"typeid x = Foo.typeid;\"><div></div></button></div></figure></div>\n<h4 id=\"values\"><code dir=\"auto\">values</code></h4>\n<p>Returns a slice containing the values of an enum.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> FooEnum</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">BAR</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">BAZ</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">FooEnum</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">values</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">].</span><span style=\"--0:#7FDBCA;--1:#097174\">nameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // \"BAR\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"enum FooEnum{    BAR,    BAZ}String x = FooEnum.values[1].nameof; // &#x22;BAR&#x22;\"><div></div></button></div></figure></div>\n<h3 id=\"compile-time-functions\">Compile time functions</h3>\n<p>There are several built-in functions to inspect the code during compile time.</p>\n<ul>\n<li><code dir=\"auto\">$alignof</code></li>\n<li><code dir=\"auto\">$defined</code></li>\n<li><code dir=\"auto\">$eval</code></li>\n<li><code dir=\"auto\">$evaltype</code></li>\n<li><code dir=\"auto\">$extnameof</code></li>\n<li><code dir=\"auto\">$nameof</code></li>\n<li><code dir=\"auto\">$offsetof</code></li>\n<li><code dir=\"auto\">$qnameof</code></li>\n<li><code dir=\"auto\">$sizeof</code></li>\n<li><code dir=\"auto\">$stringify</code></li>\n<li><code dir=\"auto\">$typeof</code></li>\n</ul>\n<h4 id=\"alignof-1\"><code dir=\"auto\">$alignof</code></h4>\n<p>Returns the alignment in bytes needed for the type or member.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> test::bar;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] y;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> g </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">123</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#7FDBCA;--1:#097174\">alignof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\"> // => returns 4</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#7FDBCA;--1:#097174\">alignof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">y</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\"> // => returns 8 on 64 bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#7FDBCA;--1:#097174\">alignof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo);</span><span style=\"--0:#809191;--1:#5E6578\">   // => returns 8 on 64 bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#7FDBCA;--1:#097174\">alignof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(g);</span><span style=\"--0:#809191;--1:#5E6578\">     // => returns 4</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module test::bar;struct Foo{    int x;    char[] y;}int g = 123;$alignof(Foo.x); // => returns 4$alignof(Foo.y); // => returns 8 on 64 bit$alignof(Foo);   // => returns 8 on 64 bit$alignof(g);     // => returns 4\"><div></div></button></div></figure></div>\n<h4 id=\"defined\"><code dir=\"auto\">$defined</code></h4>\n<p>Returns true if the expression inside is defined and all sub expressions are valid.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">x</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">     // => returns true</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">z</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">     // => returns false</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">] abc;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">abc</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">len</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">   // => returns true</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">abc</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">len</span><span style=\"--0:#D6DEEB;--1:#403F53\">());</span><span style=\"--0:#809191;--1:#5E6578\"> // => returns false</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">defined</span><span style=\"--0:#D6DEEB;--1:#403F53\">((</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">)abc);</span><span style=\"--0:#809191;--1:#5E6578\">  // => returns false</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// $defined(abc.len() + 1)  would be an error</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"$defined(Foo.x);     // => returns true$defined(Foo.z);     // => returns falseint[2] abc;$defined(abc.len);   // => returns true$defined(abc.len()); // => returns false$defined((int)abc);  // => returns false// $defined(abc.len() + 1)  would be an error\"><div></div></button></div></figure></div>\n<h4 id=\"eval\"><code dir=\"auto\">$eval</code></h4>\n<p>Converts a compile time string with the corresponding variable:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">123</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">         // => a is now 123</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">eval</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">a</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">) </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">222</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">    // => a is now 222</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">eval</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">mymodule::fooFunc</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">)(a);</span><span style=\"--0:#809191;--1:#5E6578\"> // => same as mymodule::fooFunc(a)</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int a = 123;         // => a is now 123$eval(&#x22;a&#x22;) = 222;    // => a is now 222$eval(&#x22;mymodule::fooFunc&#x22;)(a); // => same as mymodule::fooFunc(a)\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">$eval</code> is limited to a single, optionally path prefixed, identifier.\nConsequently methods cannot be evaluated directly:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f) { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">void*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> test1 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">eval</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">test</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\"> // Works</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">void*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> test2 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">Foo.$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">eval</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">test</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\"> // Works</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// void* test3 = &#x26;$eval(\"Foo.test\"); // Error</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"struct Foo { ... }fn int Foo.test(Foo* f) { ... }fn void test(){    void* test1 = &#x26;$eval(&#x22;test&#x22;); // Works    void* test2 = &#x26;Foo.$eval(&#x22;test&#x22;); // Works    // void* test3 = &#x26;$eval(&#x22;Foo.test&#x22;); // Error}\"><div></div></button></div></figure></div>\n<h4 id=\"evaltype\"><code dir=\"auto\">$evaltype</code></h4>\n<p>Similar to <code dir=\"auto\">$eval</code> but for types:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">evaltype</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">float</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">) f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--1:#AA0982\"><span style=\"--0:#F78C6C\">12.0</span><span style=\"--0:#FFEB95\">f</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"$evaltype(&#x22;float&#x22;) f = 12.0f;\"><div></div></button></div></figure></div>\n<h4 id=\"extnameof\"><code dir=\"auto\">$extnameof</code></h4>\n<p>Returns the external name of a type, variable or function. The external name is\nthe one used by the linker.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">testfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x) { }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">extnameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(g);</span><span style=\"--0:#809191;--1:#5E6578\"> // => \"test.bar.g\";</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">string b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">extnameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(testfn);</span><span style=\"--0:#809191;--1:#5E6578\"> // => \"test.bar.testfn\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void testfn(int x) { }String a = $extnameof(g); // => &#x22;test.bar.g&#x22;;string b = $extnameof(testfn); // => &#x22;test.bar.testfn&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"nameof-1\"><code dir=\"auto\">$nameof</code></h4>\n<p>Returns the name of a function or variable as a string without module prefixes.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() { }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> g </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">nameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(g);</span><span style=\"--0:#809191;--1:#5E6578\"> // => \"g\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">nameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(test);</span><span style=\"--0:#809191;--1:#5E6578\"> // => \"test\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void test() { }int g = 1;String a = $nameof(g); // => &#x22;g&#x22;String b = $nameof(test); // => &#x22;test&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"offsetof\"><code dir=\"auto\">$offsetof</code></h4>\n<p>Returns the offset of a member in a struct.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo z;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">offsetof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">z</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">y</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\"> // => returns 8 on 64 bit, 4 on 32 bit</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Foo z;$offsetof(z.y); // => returns 8 on 64 bit, 4 on 32 bit\"><div></div></button></div></figure></div>\n<h4 id=\"qnameof\"><code dir=\"auto\">$qnameof</code></h4>\n<p>Returns the same as <code dir=\"auto\">$nameof</code>, but with the full module name prepended.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">module</span><span style=\"--0:#D6DEEB;--1:#403F53\"> abc;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() { }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> g </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">qnameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(g);</span><span style=\"--0:#809191;--1:#5E6578\"> // => \"abc::g\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">qnameof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(test);</span><span style=\"--0:#809191;--1:#5E6578\"> // => \"abc::test\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module abc;fn void test() { }int g = 1;String a = $qnameof(g); // => &#x22;abc::g&#x22;String b = $qnameof(test); // => &#x22;abc::test&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"sizeof-1\"><code dir=\"auto\">$sizeof</code></h4>\n<p>This is used on a value to determine the allocation size needed. <code dir=\"auto\">$sizeof(a)</code> is equivalent\nto doing <code dir=\"auto\">$typeof(a).sizeof</code>. Note that this is only used on values and not on types.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">typeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a)</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">allocate_bytes</span><span style=\"--0:#D6DEEB;--1:#403F53\">($</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a));</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"$typeof(a)* x = allocate_bytes($sizeof(a));*x = a;\"><div></div></button></div></figure></div>\n<h4 id=\"stringify\"><code dir=\"auto\">$stringify</code></h4>\n<p>Returns the expression as a string. It has a special behaviour for macro expression parameters,\nwhere <code dir=\"auto\">$stringify(#foo)</code> will return the expression contained in <code dir=\"auto\">#foo</code> rather than simply return\n“#foo”</p>\n<h4 id=\"typeof\"><code dir=\"auto\">$typeof</code></h4>\n<p>Returns the type of an expression or variable as a type itself.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo f;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#82AAFF;--1:#3C63B3\">typeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">(f) x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Foo f;$typeof(f) x = f;\"><div></div></button></div></figure></div>";

				const frontmatter = {"title":"Reflection","description":"Reflection","sidebar":{"order":85}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Generic Programming/reflection.md";
				const url = undefined;
				function rawContent() {
					return "\nC3 allows both compile time and runtime reflection.\n\nDuring compile time the type information may be directly used as compile time constants, the same data is then available dynamically at runtime.\n\n*Note that not all reflection is implemented in the compiler at this point in time.*\n\n## Compile time reflection\n\nDuring compile time there are a number of compile time fields that may be accessed directly.\n\n### Type properties\n\nIt is possible to access properties on the type itself:\n\n- `alignof`\n- `associated`\n- `elements`\n- `extnameof`\n- `inf`\n- `inner`\n- `kindof`\n- `len`\n- `max`\n- `membersof`\n- `min`\n- `nan`\n- `nameof`\n- `names`\n- `params`\n- `parentof`\n- `qnameof`\n- `returns`\n- `sizeof`\n- `typeid`\n- `values`\n\n#### `alignof`\n\nReturns the alignment in bytes needed for the type.\n\n```c3\nstruct Foo @align(8)\n{\n    int a;\n}\n\nuint a = Foo.alignof; // 8\n```\n\n#### `associated`\n\n*Only available for enums.*\nReturns an array containing the types of associated values if any.\n\n```c3\nenum Foo : int (double d, String s)\n{\n    BAR = { 1.0, \"normal\" },\n    BAZ = { 2.0, \"exceptional\" }\n}\nString s = Foo.associated[0].nameof; // \"double\"\n```\n\n#### `elements`\n\nReturns the element count of an enum.\n\n```c3\nenum FooEnum\n{\n    BAR,\n    BAZ\n}\nint x = FooEnum.elements; // 2\n```\n\n#### `inf`\n\n*Only available for floating point types*\n\nReturns a representation of floating point \"infinity\".\n\n#### `inner`\n\nThis returns a typeid to an \"inner\" type. What this means is different for each type:\n\n- Array -> the array base type.\n- Bitstruct -> underlying base type.\n- Distinct -> the underlying type.\n- Enum -> underlying enum base type.\n- Pointer -> the type being pointed to.\n- Vector -> the vector base type.\n\nIt is not defined for other types.\n\n#### `kindof`\n\nReturns the underlying `TypeKind` as defined in std::core::types.\n\n```c3\nTypeKind kind = int.kindof; // TypeKind.SIGNED_INT\n```\n\n#### `len`\n\nReturns the length of the array.\n\n```c3\nusz len = int[4].len; // 4\n```\n\n#### `max`\n\nReturns the maximum value of the type (only valid for integer and float types).\n\n```c3\nushort max_ushort = ushort.max; // 65535\n```\n\n#### `membersof`\n\n*Only available for bitstruct, struct and union types.*\n\nReturns a *compile time* list containing the fields in a bitstruct, struct or union. The\nelements have the *compile time only* type of `member_ref`.\n\n*Note: As the list is an \"untyped\" list, you are limited to iterating and accessing it at\ncompile time.*\n\n```c3\nstruct Baz\n{\n    int x;\n    Foo* z;\n}\nString x = Baz.membersof[1].nameof; // \"z\"\n```\n\nA `member_ref` has properties `alignof`, `kindof`, `membersof`, `nameof`, `offsetof`, `sizeof` and `typeid`.\n\n#### `min`\n\nReturns the minimum value of the type (only valid for integer and float types).\n\n```c3\nichar min_ichar = ichar.min; // -128\n```\n\n#### `nameof`\n\nReturns the name of the type.\n\n#### `names`\n\nReturns a slice containing the names of an enum.\n\n```c3\nenum FooEnum\n{\n    BAR,\n    BAZ\n}\nString[] x = FooEnum.names; // [\"BAR\", \"BAZ\"]\n```\n\n#### `paramsof`\n\n*Only available for function pointer types.*\nReturns a ReflectParam struct for all function pointer parameters.\n\n```c3\nalias TestFunc = fn int(int x, double f);\nString s = TestFunc.paramsof[1].name; // \"f\"\ntypeid t = TestFunc.paramsof[1].type; // double.typeid\n```\n\n#### `parentof`\n\n*Only available for bitstruct and struct types.*\nReturns the typeid of the parent type.\n\n```c3\nstruct Foo\n{\n    int a;\n}\n\nstruct Bar\n{\n    inline Foo f;\n}\n\nString x = Bar.parentof.nameof; // \"Foo\"\n```\n\n#### `returns`\n\n*Only available for function types.*\nReturns the typeid of the return type.\n\n```c3\nalias TestFunc = fn int(int, double);\nString s = TestFunc.returns.nameof; // \"int\"\n```\n\n#### `sizeof`\n\nReturns the size in bytes for the given type, like C `sizeof`.\n\n```c3\nusz x = Foo.sizeof;\n```\n\n#### `typeid`\n\nReturns the typeid for the given type. `alias`s will return the typeid of the underlying type. The typeid size is the same as that of an `iptr`.\n\n```c3\ntypeid x = Foo.typeid;\n```\n\n#### `values`\n\nReturns a slice containing the values of an enum.\n\n```c3\nenum FooEnum\n{\n    BAR,\n    BAZ\n}\nString x = FooEnum.values[1].nameof; // \"BAR\"\n```\n\n### Compile time functions\n\nThere are several built-in functions to inspect the code during compile time.\n\n- `$alignof`\n- `$defined`\n- `$eval`\n- `$evaltype`\n- `$extnameof`\n- `$nameof`\n- `$offsetof`\n- `$qnameof`\n- `$sizeof`\n- `$stringify`\n- `$typeof`\n\n#### `$alignof`\n\nReturns the alignment in bytes needed for the type or member.\n\n```c3\nmodule test::bar;\n\nstruct Foo\n{\n    int x;\n    char[] y;\n}\nint g = 123;\n\n$alignof(Foo.x); // => returns 4\n$alignof(Foo.y); // => returns 8 on 64 bit\n$alignof(Foo);   // => returns 8 on 64 bit\n$alignof(g);     // => returns 4\n```\n\n#### `$defined`\n\nReturns true if the expression inside is defined and all sub expressions are valid.\n\n```c3\n$defined(Foo.x);     // => returns true\n$defined(Foo.z);     // => returns false\nint[2] abc;\n$defined(abc.len);   // => returns true\n$defined(abc.len()); // => returns false\n$defined((int)abc);  // => returns false\n// $defined(abc.len() + 1)  would be an error\n```\n\n#### `$eval`\n\nConverts a compile time string with the corresponding variable:\n\n```c3\nint a = 123;         // => a is now 123\n$eval(\"a\") = 222;    // => a is now 222\n$eval(\"mymodule::fooFunc\")(a); // => same as mymodule::fooFunc(a)\n```\n\n`$eval` is limited to a single, optionally path prefixed, identifier.\nConsequently methods cannot be evaluated directly:\n\n```c3\nstruct Foo { ... }\nfn int Foo.test(Foo* f) { ... }\n\nfn void test()\n{\n    void* test1 = &$eval(\"test\"); // Works\n    void* test2 = &Foo.$eval(\"test\"); // Works\n    // void* test3 = &$eval(\"Foo.test\"); // Error\n}\n```\n\n#### `$evaltype`\n\nSimilar to `$eval` but for types:\n\n```c3\n$evaltype(\"float\") f = 12.0f;\n```\n\n#### `$extnameof`\n\nReturns the external name of a type, variable or function. The external name is\nthe one used by the linker.\n\n```c3\nfn void testfn(int x) { }\nString a = $extnameof(g); // => \"test.bar.g\";\nstring b = $extnameof(testfn); // => \"test.bar.testfn\"\n```\n\n#### `$nameof`\n\nReturns the name of a function or variable as a string without module prefixes.\n\n```c3\nfn void test() { }\nint g = 1;\n\nString a = $nameof(g); // => \"g\"\nString b = $nameof(test); // => \"test\"\n```\n\n#### `$offsetof`\n\nReturns the offset of a member in a struct.\n\n```c3\nFoo z;\n$offsetof(z.y); // => returns 8 on 64 bit, 4 on 32 bit\n```\n\n#### `$qnameof`\n\nReturns the same as `$nameof`, but with the full module name prepended.\n\n```c3\nmodule abc;\nfn void test() { }\nint g = 1;\n\nString a = $qnameof(g); // => \"abc::g\"\nString b = $qnameof(test); // => \"abc::test\"\n```\n\n#### `$sizeof`\n\nThis is used on a value to determine the allocation size needed. `$sizeof(a)` is equivalent\nto doing `$typeof(a).sizeof`. Note that this is only used on values and not on types.\n\n```c3\n$typeof(a)* x = allocate_bytes($sizeof(a));\n*x = a;\n```\n\n#### `$stringify`\n\nReturns the expression as a string. It has a special behaviour for macro expression parameters,\nwhere `$stringify(#foo)` will return the expression contained in `#foo` rather than simply return\n\"#foo\"\n\n#### `$typeof`\n\nReturns the type of an expression or variable as a type itself.\n\n```c3\nFoo f;\n$typeof(f) x = f;\n```\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"compile-time-reflection","text":"Compile time reflection"},{"depth":3,"slug":"type-properties","text":"Type properties"},{"depth":4,"slug":"alignof","text":"alignof"},{"depth":4,"slug":"associated","text":"associated"},{"depth":4,"slug":"elements","text":"elements"},{"depth":4,"slug":"inf","text":"inf"},{"depth":4,"slug":"inner","text":"inner"},{"depth":4,"slug":"kindof","text":"kindof"},{"depth":4,"slug":"len","text":"len"},{"depth":4,"slug":"max","text":"max"},{"depth":4,"slug":"membersof","text":"membersof"},{"depth":4,"slug":"min","text":"min"},{"depth":4,"slug":"nameof","text":"nameof"},{"depth":4,"slug":"names","text":"names"},{"depth":4,"slug":"paramsof","text":"paramsof"},{"depth":4,"slug":"parentof","text":"parentof"},{"depth":4,"slug":"returns","text":"returns"},{"depth":4,"slug":"sizeof","text":"sizeof"},{"depth":4,"slug":"typeid","text":"typeid"},{"depth":4,"slug":"values","text":"values"},{"depth":3,"slug":"compile-time-functions","text":"Compile time functions"},{"depth":4,"slug":"alignof-1","text":"$alignof"},{"depth":4,"slug":"defined","text":"$defined"},{"depth":4,"slug":"eval","text":"$eval"},{"depth":4,"slug":"evaltype","text":"$evaltype"},{"depth":4,"slug":"extnameof","text":"$extnameof"},{"depth":4,"slug":"nameof-1","text":"$nameof"},{"depth":4,"slug":"offsetof","text":"$offsetof"},{"depth":4,"slug":"qnameof","text":"$qnameof"},{"depth":4,"slug":"sizeof-1","text":"$sizeof"},{"depth":4,"slug":"stringify","text":"$stringify"},{"depth":4,"slug":"typeof","text":"$typeof"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
