import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>C3 provides a similar set of fundamental data types as C: integers, floats, arrays and pointers. On top of this it\nexpands on this set by adding slices and vectors, as well as the <code dir=\"auto\">any</code> and <code dir=\"auto\">typeid</code> types for advanced use.</p>\n<h2 id=\"integers\">Integers</h2>\n<p>C3 has signed and unsigned integer types. The built-in signed integer types are <code dir=\"auto\">ichar</code>, <code dir=\"auto\">short</code>, <code dir=\"auto\">int</code>, <code dir=\"auto\">long</code>,\n<code dir=\"auto\">int128</code>, <code dir=\"auto\">iptr</code> and <code dir=\"auto\">isz</code>. <code dir=\"auto\">ichar</code> to <code dir=\"auto\">int128</code> have all well-defined power-of-two bit sizes, whereas <code dir=\"auto\">iptr</code>\nhas the same number of bits as a <code dir=\"auto\">void*</code> and <code dir=\"auto\">isz</code> has the same number of bits as the maximum difference\nbetween two pointers. For each signed integer type there is a corresponding unsigned integer type: <code dir=\"auto\">char</code>,\n<code dir=\"auto\">ushort</code>, <code dir=\"auto\">uint</code>, <code dir=\"auto\">ulong</code>, <code dir=\"auto\">uint128</code>, <code dir=\"auto\">uptr</code> and <code dir=\"auto\">usz</code>.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>type</th><th>signed?</th><th>min</th><th>max</th><th>bits</th></tr></thead><tbody><tr><td>ichar</td><td>yes</td><td>-128</td><td>127</td><td>8</td></tr><tr><td>short</td><td>yes</td><td>-32768</td><td>32767</td><td>16</td></tr><tr><td>int</td><td>yes</td><td>-2^31</td><td>2^31 - 1</td><td>32</td></tr><tr><td>long</td><td>yes</td><td>-2^63</td><td>2^63 - 1</td><td>64</td></tr><tr><td>int128</td><td>yes</td><td>-2^127</td><td>2^127 - 1</td><td>128</td></tr><tr><td>iptr</td><td>yes</td><td>varies</td><td>varies</td><td>varies</td></tr><tr><td>isz</td><td>yes</td><td>varies</td><td>varies</td><td>varies</td></tr><tr><td>char</td><td>no</td><td>0</td><td>255</td><td>8</td></tr><tr><td>ushort</td><td>no</td><td>0</td><td>65535</td><td>16</td></tr><tr><td>uint</td><td>no</td><td>0</td><td>2^32 - 1</td><td>32</td></tr><tr><td>ulong</td><td>no</td><td>0</td><td>2^64 - 1</td><td>64</td></tr><tr><td>uint128</td><td>no</td><td>0</td><td>2^128 - 1</td><td>128</td></tr><tr><td>uptr</td><td>no</td><td>0</td><td>varies</td><td>varies</td></tr><tr><td>usz</td><td>no</td><td>0</td><td>varies</td><td>varies</td></tr></tbody></table>\n<p>On 64-bit machines <code dir=\"auto\">iptr</code>/<code dir=\"auto\">uptr</code> and <code dir=\"auto\">isz</code>/<code dir=\"auto\">usz</code> are usually 64-bits, like <code dir=\"auto\">long</code>/<code dir=\"auto\">ulong</code>.\nOn 32-bit machines on the other hand they are generally <code dir=\"auto\">int</code>/<code dir=\"auto\">uint</code>.</p>\n<h3 id=\"integer-constants\">Integer constants</h3>\n<p>Numeric constants typically use decimal, e.g. <code dir=\"auto\">234</code>, but may also use hexadecimal (base 16) numbers by prefixing\nthe number with <code dir=\"auto\">0x</code> or <code dir=\"auto\">0X</code>, e.g. <code dir=\"auto\">int a = 0x42edaa02;</code>. There is also octal (base 8) using the\n<code dir=\"auto\">0o</code> or <code dir=\"auto\">0O</code> prefix, and <code dir=\"auto\">0b</code> for binary (base 2) numbers:</p>\n<p>Numbers may also insert underscore <code dir=\"auto\">_</code> between digits to improve readability, e.g. <code dir=\"auto\">1_000_000</code>.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">-</span><span style=\"--1:#AA0982\"><span style=\"--0:#F78C6C\">2</span><span style=\"--0:#FFEB95\">_000</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--1:#AA0982\"><span style=\"--0:#F78C6C\">0</span><span style=\"--0:#FFEB95\">o770</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">7f7f7f</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"a = -2_000;b = 0o770;c = 0x7f7f7f;\"><div></div></button></div></figure></div>\n<p>For decimal numbers, the value is assumed to be a signed <code dir=\"auto\">int</code>, unless the number doesn’t fit in an\n<code dir=\"auto\">int</code>, in which case it is assumed to be the smallest signed type it <em>does</em> fit in (<code dir=\"auto\">long</code> or <code dir=\"auto\">int128</code>).</p>\n<p>For hexadecimal, octal and binary, the type is assumed to be unsigned.</p>\n<p>A integer literal can <em>implicitly</em> convert to a floating point literal, or an integer of\na different type provided the number fits in the type.</p>\n<h3 id=\"constant-suffixes\">Constant suffixes</h3>\n<p>If you want to ensure that a constant is of a certain type, you can either add an explicit cast\nlike: <code dir=\"auto\">(ushort)345</code>, or use an integer suffix: <code dir=\"auto\">345u16</code>.</p>\n<p>The following integer suffixes are available:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>suffix</th><th align=\"right\">type</th></tr></thead><tbody><tr><td>i8</td><td align=\"right\">ichar</td></tr><tr><td>i16</td><td align=\"right\">short</td></tr><tr><td>i32</td><td align=\"right\">int</td></tr><tr><td>i64</td><td align=\"right\">long</td></tr><tr><td>i128</td><td align=\"right\">int128</td></tr><tr><td>u8</td><td align=\"right\">char</td></tr><tr><td>u16</td><td align=\"right\">ushort</td></tr><tr><td>u32</td><td align=\"right\">uint</td></tr><tr><td>u</td><td align=\"right\">uint</td></tr><tr><td>u64</td><td align=\"right\">ulong</td></tr><tr><td>u128</td><td align=\"right\">uint128</td></tr></tbody></table>\n<p>Note how <code dir=\"auto\">uint</code> also has the <code dir=\"auto\">u</code> suffix.</p>\n<h2 id=\"booleans\">Booleans</h2>\n<p>A <code dir=\"auto\">bool</code> will be either <code dir=\"auto\">true</code> or <code dir=\"auto\">false</code>. Although a bool is only a single bit of data,\nit should be noted that it is stored in a byte.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">true</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">false</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"bool b = true;bool f = false;\"><div></div></button></div></figure></div>\n<h3 id=\"character-literals\">Character literals</h3>\n<p>A character literal is a value enclosed in <code dir=\"auto\">''</code>. Its value is interpreted as being its\nASCII value for a single character.</p>\n<p>It is also possible to use 2, 4 or 8 character wide character literals. Such are interpreted\nas <code dir=\"auto\">ushort</code>, <code dir=\"auto\">uint</code> and <code dir=\"auto\">ulong</code> respectively and are laid out in memory from left to right.\nThis means that the actual value depends on the <a href=\"https://en.wikipedia.org/wiki/Endianness\">endianness</a>\nof the target.</p>\n<ul>\n<li>2 character literals, e.g. <code dir=\"auto\">'C3'</code>, would convert to an ushort.</li>\n<li>4 character literals, e.g. <code dir=\"auto\">'TEST'</code>, converts to an uint.</li>\n<li>8 character literals, e.g. <code dir=\"auto\">'FOOBAR11'</code> converts to an ulong.</li>\n</ul>\n<p>The 4 character literals correspond to the layout of <a href=\"https://en.wikipedia.org/wiki/FourCC\">FourCC</a>\ncodes. It will also correctly arrange unicode characters in memory. E.g. <code dir=\"auto\">Char32 smiley = '\\u1F603'</code></p>\n<h2 id=\"floating-point-types\">Floating point types</h2>\n<p>As is common, C3 has two floating point types: <code dir=\"auto\">float</code> and <code dir=\"auto\">double</code>. <code dir=\"auto\">float</code> is the 32 bit floating\npoint type and <code dir=\"auto\">double</code> is 64 bits.</p>\n<h3 id=\"floating-point-constants\">Floating point constants</h3>\n<p>Floating point constants will <em>at least</em> use 64 bit precision.\nJust like for integer constants, it is possible to use <code dir=\"auto\">_</code> to improve\nreadability, but it may not occur immediately before or after a dot or an exponential.</p>\n<p>C3 supports floating points values either written in decimal or hexadecimal formats.\nFor decimal, the exponential symbol is e (or E, both are acceptable),\nfor hexadecimal p (or P) is used: <code dir=\"auto\">-2.22e-21</code> <code dir=\"auto\">-0x21.93p-10</code></p>\n<p>While floating point numbers default to <code dir=\"auto\">double</code> it is possible to type a\nfloating point by adding a suffix:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Suffix</th><th align=\"right\">type</th></tr></thead><tbody><tr><td><code dir=\"auto\">f32</code> <em>or</em> <code dir=\"auto\">f</code></td><td align=\"right\"><code dir=\"auto\">float</code></td></tr><tr><td><code dir=\"auto\">f64</code></td><td align=\"right\"><code dir=\"auto\">double</code></td></tr></tbody></table>\n<h2 id=\"arrays\">Arrays</h2>\n<p><a href=\"/language-common/arrays/\">Arrays</a> have the format <code dir=\"auto\">Type[size]</code>, so for example: <code dir=\"auto\">int[4]</code>. An array is a type consisting\nof the same element repeated a number of times. Our <code dir=\"auto\">int[4]</code> is essentially four <code dir=\"auto\">int</code> values\npacked together.</p>\n<p>For initialization it’s sometimes convenient to use the wildcard <code dir=\"auto\">Type[*]</code> declaration, which\ninfers the length from the number of elements:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">] abc </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span><span style=\"--0:#809191;--1:#5E6578\"> // Explicit int[3]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">] bcd </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span><span style=\"--0:#809191;--1:#5E6578\"> // Implicit int[3]</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[3] abc = { 1, 2, 3 }; // Explicit int[3]int[*] bcd = { 1, 2, 3 }; // Implicit int[3]\"><div></div></button></div></figure></div>\n<p>* Please note that in later versions of 0.6.x you’ll see the syntax <code dir=\"auto\">int[?]</code> instead of <code dir=\"auto\">int[*]</code>\nas an alternative. Either will work in the most recent compiler, and\nit’s not yet decided whether <code dir=\"auto\">[*]</code> or <code dir=\"auto\">[?]</code> will be picked for 0.7.</p>\n<h2 id=\"slices\">Slices</h2>\n<p><a href=\"/language-common/arrays/#slice\">Slices</a> have the format <code dir=\"auto\">Type[]</code>. Unlike the array, a slice does not hold the values themselves\nbut instead presents a view of some underlying array or vector.</p>\n<p>Slices have two properties: <code dir=\"auto\">.ptr</code>, which retrieves the array it points to, and <code dir=\"auto\">.len</code> which\nis the length of the slice - that is, the number of elements it is possible to index into.</p>\n<p>Usually we can get a slice by taking the address of an array:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">] abc </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] slice </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">abc;</span><span style=\"--0:#809191;--1:#5E6578\">       // A slice pointing to abc with length 3</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[3] abc = { 1, 2, 3 };int[] slice = &#x26;abc;       // A slice pointing to abc with length 3\"><div></div></button></div></figure></div>\n<p>Because indexing into slices is range checked in safe mode, slices are vastly more safe\nproviding pointer + length separately.</p>\n<p>The internal representation of a slice is a two element struct:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">struct</span><span style=\"--0:#D6DEEB;--1:#403F53\"> SliceRaw</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#C792EA;--1:#8D46B4\">void*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ptr;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">  </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">usz len;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"struct SliceRaw{  void* ptr;  usz len;}\"><div></div></button></div></figure></div>\n<p>This definition can be found in the module <code dir=\"auto\">std::core::runtime</code>.</p>\n<h2 id=\"vectors\">Vectors</h2>\n<p><a href=\"/language-common/vectors/\">Vectors</a> similar to arrays, use the format\n<code dir=\"auto\">Type[&#x3C;size>]</code>, with the restriction that vectors may only form out\nof integers, floats and booleans. Similar to arrays, wildcard can be\nused to infer the size of a vector:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;*></span><span style=\"--0:#D6DEEB;--1:#403F53\">] a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<*>] a = { 1, 2 };\"><div></div></button></div></figure></div>\n<p>Vectors are based on hardware SIMD vectors, and supports many different operations that work\non all elements in parallel, including arithmetics:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">8</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] d </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> c;</span><span style=\"--0:#809191;--1:#5E6578\">    // d is { 21, 16 }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<2>] b = { 3, 8 };int[<2>] c = { 7, 2 };int[<2>] d = b * c;    // d is { 21, 16 }\"><div></div></button></div></figure></div>\n<p>Vector initialization and literals work the same way as arrays, using <code dir=\"auto\">{ ... }</code></p>\n<h2 id=\"string-literals\">String literals</h2>\n<p>String literals are special and can convert to several different types:\n<code dir=\"auto\">String</code>, <code dir=\"auto\">char</code> and <code dir=\"auto\">ichar</code> arrays and slices and finally <code dir=\"auto\">ichar*</code> and <code dir=\"auto\">char*</code>.</p>\n<p>String literals are text enclosed in <code dir=\"auto\">\" \"</code> just like in C. These support\nescape sequences like <code dir=\"auto\">\\n</code> for line break and need to use <code dir=\"auto\">\\\"</code> for any <code dir=\"auto\">\"</code> inside of the\nstring.</p>\n<p>C3 also offers <em>raw strings</em> which are enclosed in <code dir=\"auto\">` `</code>.\nA raw string may span multiple lines.\nInside of a raw string, no escapes are available, and to write a <code dir=\"auto\">`</code>, simply double the character:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Note: String is a distinct inline char[]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String three_lines </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">`multi</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">line</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">string`;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String foo </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> `C:\\foo\\</span><span style=\"--0:#C5E478;--1:#3C63B3\">bar</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">dll</span><span style=\"--0:#D6DEEB;--1:#403F53\">`;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String bar </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> `</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Say ``hello``</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">`;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Same as</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String foo </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">C:</span><span style=\"--0:#F78C6C;--1:#AA0982\">\\\\</span><span style=\"--0:#ECC48D;--1:#9B504E\">foo</span><span style=\"--0:#F78C6C;--1:#AA0982\">\\\\</span><span style=\"--0:#ECC48D;--1:#9B504E\">bar.dll</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String bar </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#F78C6C;--1:#AA0982\">\\\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Say `hello`</span><span style=\"--0:#F78C6C;--1:#AA0982\">\\\"</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Note: String is a distinct inline char[]String three_lines =&#x60;multilinestring&#x60;;String foo = &#x60;C:\\foo\\bar.dll&#x60;;String bar = &#x60;&#x22;Say &#x60;&#x60;hello&#x60;&#x60;&#x22;&#x60;;// Same asString foo = &#x22;C:\\\\foo\\\\bar.dll&#x22;;String bar = &#x22;\\&#x22;Say &#x60;hello&#x60;\\&#x22;&#x22;;\"><div></div></button></div></figure></div>\n<p><code dir=\"auto\">String</code> is a\n<a href=\"/language-common/define/#distinct-inline\">distinct inline</a> <code dir=\"auto\">char[]</code>, which can implicitly convert to <code dir=\"auto\">char[]</code> when required.</p>\n<p><code dir=\"auto\">ZString</code> is a <a href=\"/language-common/define/#distinct-inline\">distinct inline</a> <code dir=\"auto\">char*</code>.<code dir=\"auto\">ZString</code> is a C compatible null terminated string, which can implicitly convert to <code dir=\"auto\">char*</code> when required.</p>\n<h2 id=\"base64-and-hex-data-literals\">Base64 and hex data literals</h2>\n<p>Base64 literals are strings prefixed with <code dir=\"auto\">b64</code> to containing\n<a href=\"https://en.wikipedia.org/wiki/Base64\">Base64 encoded</a> data, which\nis converted into a char array at compile time:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// The array below contains the characters \"Hello World!\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">] hello_world_base64 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b64</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">SGVsbG8gV29ybGQh</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// The array below contains the characters &#x22;Hello World!&#x22;char[*] hello_world_base64 = b64&#x22;SGVsbG8gV29ybGQh&#x22;;\"><div></div></button></div></figure></div>\n<p>The corresponding hex data literals convert a hexadecimal string rather than Base64:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// The array below contains the characters \"Hello World!\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">] hello_world_hex </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">4865 6c6c 6f20 776f 726c 6421</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// The array below contains the characters &#x22;Hello World!&#x22;char[*] hello_world_hex = x&#x22;4865 6c6c 6f20 776f 726c 6421&#x22;;\"><div></div></button></div></figure></div>\n<h2 id=\"pointer-types\">Pointer types</h2>\n<p>Pointers have the syntax <code dir=\"auto\">Type*</code>. A pointer is a memory address where one or possibly more\nelements of the underlying address are stored. Pointers can be stacked: <code dir=\"auto\">Foo*</code> is a pointer to a <code dir=\"auto\">Foo</code>\nwhile <code dir=\"auto\">Foo**</code> is a pointer to a pointer to <code dir=\"auto\">Foo</code>.</p>\n<p>The pointer type has a special literal called <code dir=\"auto\">null</code>, which is an invalid, empty pointer.</p>\n<h3 id=\"void\"><code dir=\"auto\">void*</code></h3>\n<p>The <code dir=\"auto\">void*</code> type is a special pointer which implicitly converts to any other pointer. It is not “a pointer to void”,\nbut rather a wildcard pointer which matches any other pointer.</p>\n<h2 id=\"printing-values\">Printing values</h2>\n<p>Printing values can be done using <code dir=\"auto\">io::print</code>, <code dir=\"auto\">io::printn</code>, <code dir=\"auto\">io::printf</code> and <code dir=\"auto\">io::printfn</code>. This requires\nimporting the module <code dir=\"auto\">std::io</code>.</p>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>The <code dir=\"auto\">n</code> variants of the print functions will add a newline after printing, which is what we’ll often\nuse in the examples, but <code dir=\"auto\">print</code> and <code dir=\"auto\">printf</code> work the same way.</p></section></aside>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span><span style=\"--0:#809191;--1:#5E6578\"> // Get the io functions.</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1234</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">ulong b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">FFAABBCCDDEEFF</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--1:#AA0982\"><span style=\"--0:#F78C6C\">13.03</span><span style=\"--0:#FFEB95\">e</span></span><span style=\"--0:#7FDBCA;--1:#097174\">-</span><span style=\"--0:#F78C6C;--1:#AA0982\">04</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">] hex </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">4865 6c6c 6f20 776f 726c 6421</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(b);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(d);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(hex);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io; // Get the io functions.fn void main(){    int a = 1234;    ulong b = 0xFFAABBCCDDEEFF;    double d = 13.03e-04;    char[*] hex = x&#x22;4865 6c6c 6f20 776f 726c 6421&#x22;;    io::printn(a);    io::printn(b);    io::printn(d);    io::printn(hex);}\"><div></div></button></div></figure></div>\n<p>If you run this program you will get:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">1234</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">71963842633920255</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">0.001303</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">[72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"1234719638426339202550.001303[72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]\"><div></div></button></div></figure></div>\n<p>To get more control we can format the output using <code dir=\"auto\">printf</code> and <code dir=\"auto\">printfn</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1234</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">ulong b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">FFAABBCCDDEEFF</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">double</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--1:#AA0982\"><span style=\"--0:#F78C6C\">13.03</span><span style=\"--0:#FFEB95\">e</span></span><span style=\"--0:#7FDBCA;--1:#097174\">-</span><span style=\"--0:#F78C6C;--1:#AA0982\">04</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">] hex </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">4865 6c6c 6f20 776f 726c 6421</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">a was:                        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, a);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">b in hex was:                 </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%x</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, b);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">d in scientific notation was: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%e</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, d);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Bytes as string:              </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, (String)</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">hex);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;fn void main(){    int a = 1234;    ulong b = 0xFFAABBCCDDEEFF;    double d = 13.03e-04;    char[*] hex = x&#x22;4865 6c6c 6f20 776f 726c 6421&#x22;;    io::printfn(&#x22;a was:                        %d&#x22;, a);    io::printfn(&#x22;b in hex was:                 %x&#x22;, b);    io::printfn(&#x22;d in scientific notation was: %e&#x22;, d);    io::printfn(&#x22;Bytes as string:              %s&#x22;, (String)&#x26;hex);}\"><div></div></button></div></figure></div>\n<p>We can apply the <a href=\"https://en.cppreference.com/w/c/io/fprintf\">standard printf formatting rules</a>, but\nunlike in C/C++ there is no need to indicate the type when using <code dir=\"auto\">%d</code> - it will print unsigned and\nsigned up to <code dir=\"auto\">int128</code>, in fact there is no support for <code dir=\"auto\">%u</code>, <code dir=\"auto\">%lld</code> etc in <code dir=\"auto\">io::printf</code>. Furthermore,\n<code dir=\"auto\">%s</code> works not just on strings but on any type:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">ABC</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">BCD</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">EFG</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1234</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">uint128 b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--1:#AA0982\"><span style=\"--0:#FFEB95\">0x</span><span style=\"--0:#F78C6C\">FFEEDDCC</span><span style=\"--0:#FFEB95\">_BBAA9988_77665544_33221100</span></span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Foo foo </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> BCD;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">a: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#ECC48D;--1:#9B504E\">, b: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#ECC48D;--1:#9B504E\">, foo: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, a, b, foo);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;enum Foo{    ABC,    BCD,    EFG,}fn void main(){    int a = 1234;    uint128 b = 0xFFEEDDCC_BBAA9988_77665544_33221100;    Foo foo = BCD;    io::printfn(&#x22;a: %s, b: %d, foo: %s&#x22;, a, b, foo);}\"><div></div></button></div></figure></div>\n<p>This prints:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">a: 1234, b: 340193404210632335760508365704335069440, foo: BCD</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"a: 1234, b: 340193404210632335760508365704335069440, foo: BCD\"><div></div></button></div></figure></div>";

				const frontmatter = {"title":"Basic Types and Values","description":"Get an overview of C3's basic types and values","sidebar":{"order":33}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Language Fundamentals/basic-types-and-values.md";
				const url = undefined;
				function rawContent() {
					return "\nC3 provides a similar set of fundamental data types as C: integers, floats, arrays and pointers. On top of this it \nexpands on this set by adding slices and vectors, as well as the `any` and `typeid` types for advanced use. \n\n## Integers\n\nC3 has signed and unsigned integer types. The built-in signed integer types are `ichar`, `short`, `int`, `long`,\n`int128`, `iptr` and `isz`. `ichar` to `int128` have all well-defined power-of-two bit sizes, whereas `iptr`\nhas the same number of bits as a `void*` and `isz` has the same number of bits as the maximum difference \nbetween two pointers. For each signed integer type there is a corresponding unsigned integer type: `char`, \n`ushort`, `uint`, `ulong`, `uint128`, `uptr` and `usz`.\n\n| type    | signed? | min    | max       | bits   |\n|---------|---------|--------|-----------|--------|\n| ichar   | yes     | -128   | 127       | 8      |\n| short   | yes     | -32768 | 32767     | 16     |\n| int     | yes     | -2^31  | 2^31 - 1  | 32     |\n| long    | yes     | -2^63  | 2^63 - 1  | 64     |\n| int128  | yes     | -2^127 | 2^127 - 1 | 128    |\n| iptr    | yes     | varies | varies    | varies |\n| isz     | yes     | varies | varies    | varies |\n| char    | no      | 0      | 255       | 8      |\n| ushort  | no      | 0      | 65535     | 16     |\n| uint    | no      | 0      | 2^32 - 1  | 32     |\n| ulong   | no      | 0      | 2^64 - 1  | 64     |\n| uint128 | no      | 0      | 2^128 - 1 | 128    |\n| uptr    | no      | 0      | varies    | varies |\n| usz     | no      | 0      | varies    | varies |\n\nOn 64-bit machines `iptr`/`uptr` and `isz`/`usz` are usually 64-bits, like `long`/`ulong`. \nOn 32-bit machines on the other hand they are generally `int`/`uint`.\n\n### Integer constants\n\nNumeric constants typically use decimal, e.g. `234`, but may also use hexadecimal (base 16) numbers by prefixing\nthe number with `0x` or `0X`, e.g. `int a = 0x42edaa02;`. There is also octal (base 8) using the \n`0o` or `0O` prefix, and `0b` for binary (base 2) numbers:\n\nNumbers may also insert underscore `_` between digits to improve readability, e.g. `1_000_000`.\n\n```c3\na = -2_000;\nb = 0o770;\nc = 0x7f7f7f;\n```\n\nFor decimal numbers, the value is assumed to be a signed `int`, unless the number doesn't fit in an\n`int`, in which case it is assumed to be the smallest signed type it *does* fit in (`long` or `int128`).\n\nFor hexadecimal, octal and binary, the type is assumed to be unsigned.\n\nA integer literal can *implicitly* convert to a floating point literal, or an integer of \na different type provided the number fits in the type.\n\n### Constant suffixes\n\nIf you want to ensure that a constant is of a certain type, you can either add an explicit cast \nlike: `(ushort)345`, or use an integer suffix: `345u16`.\n\nThe following integer suffixes are available:\n\n| suffix |    type |\n|--------|--------:|\n| i8     |   ichar |\n| i16    |   short |\n| i32    |     int |\n| i64    |    long |\n| i128   |  int128 |\n| u8     |    char |\n| u16    |  ushort |\n| u32    |    uint |\n| u      |    uint |\n| u64    |   ulong |\n| u128   | uint128 |\n\nNote how `uint` also has the `u` suffix.\n\n## Booleans\n\nA `bool` will be either `true` or `false`. Although a bool is only a single bit of data, \nit should be noted that it is stored in a byte.\n\n```c\nbool b = true;\nbool f = false;\n```\n\n### Character literals\n\nA character literal is a value enclosed in `''`. Its value is interpreted as being its \nASCII value for a single character. \n\nIt is also possible to use 2, 4 or 8 character wide character literals. Such are interpreted\nas `ushort`, `uint` and `ulong` respectively and are laid out in memory from left to right.\nThis means that the actual value depends on the [endianness](https://en.wikipedia.org/wiki/Endianness)\nof the target.\n\n- 2 character literals, e.g. `'C3'`, would convert to an ushort.\n- 4 character literals, e.g. `'TEST'`, converts to an uint.\n- 8 character literals, e.g. `'FOOBAR11'` converts to an ulong.\n\nThe 4 character literals correspond to the layout of [FourCC](https://en.wikipedia.org/wiki/FourCC)\ncodes. It will also correctly arrange unicode characters in memory. E.g. `Char32 smiley = '\\u1F603'`\n\n## Floating point types\n\nAs is common, C3 has two floating point types: `float` and `double`. `float` is the 32 bit floating\npoint type and `double` is 64 bits. \n\n### Floating point constants\n\nFloating point constants will *at least* use 64 bit precision. \nJust like for integer constants, it is possible to use `_` to improve\nreadability, but it may not occur immediately before or after a dot or an exponential.\n\nC3 supports floating points values either written in decimal or hexadecimal formats. \nFor decimal, the exponential symbol is e (or E, both are acceptable), \nfor hexadecimal p (or P) is used: `-2.22e-21` `-0x21.93p-10`\n\nWhile floating point numbers default to `double` it is possible to type a \nfloating point by adding a suffix:\n\n| Suffix           | type       |\n| ---------------- | ----------:|\n| `f32` *or* `f`   | `float`    |\n| `f64`            | `double`   |\n\n## Arrays\n\n[Arrays](/language-common/arrays/) have the format `Type[size]`, so for example: `int[4]`. An array is a type consisting\nof the same element repeated a number of times. Our `int[4]` is essentially four `int` values\npacked together.\n\nFor initialization it's sometimes convenient to use the wildcard `Type[*]` declaration, which\ninfers the length from the number of elements:\n\n```c3\nint[3] abc = { 1, 2, 3 }; // Explicit int[3]\nint[*] bcd = { 1, 2, 3 }; // Implicit int[3]\n```\n\n\\* Please note that in later versions of 0.6.x you'll see the syntax `int[?]` instead of `int[*]`\nas an alternative. Either will work in the most recent compiler, and\nit's not yet decided whether `[*]` or `[?]` will be picked for 0.7.\n\n## Slices\n\n[Slices](/language-common/arrays/#slice) have the format `Type[]`. Unlike the array, a slice does not hold the values themselves\nbut instead presents a view of some underlying array or vector.\n\nSlices have two properties: `.ptr`, which retrieves the array it points to, and `.len` which\nis the length of the slice - that is, the number of elements it is possible to index into.\n\nUsually we can get a slice by taking the address of an array:\n\n```c3\nint[3] abc = { 1, 2, 3 }; \nint[] slice = &abc;       // A slice pointing to abc with length 3 \n```\n\nBecause indexing into slices is range checked in safe mode, slices are vastly more safe\nproviding pointer + length separately.\n\nThe internal representation of a slice is a two element struct:\n```c3\nstruct SliceRaw\n{\n\tvoid* ptr;\n\tusz len;\n}\n```\nThis definition can be found in the module `std::core::runtime`.\n\n## Vectors\n\n[Vectors](/language-common/vectors/) similar to arrays, use the format \n`Type[<size>]`, with the restriction that vectors may only form out\nof integers, floats and booleans. Similar to arrays, wildcard can be \nused to infer the size of a vector: \n\n```c3\nint[<*>] a = { 1, 2 };\n```\n\nVectors are based on hardware SIMD vectors, and supports many different operations that work\non all elements in parallel, including arithmetics:\n\n```c3\nint[<2>] b = { 3, 8 };\nint[<2>] c = { 7, 2 };\nint[<2>] d = b * c;    // d is { 21, 16 }\n```\n\nVector initialization and literals work the same way as arrays, using `{ ... }`\n\n## String literals\n\nString literals are special and can convert to several different types: \n`String`, `char` and `ichar` arrays and slices and finally `ichar*` and `char*`.\n\nString literals are text enclosed in `\" \"` just like in C. These support\nescape sequences like `\\n` for line break and need to use `\\\"` for any `\"` inside of the\nstring.\n\nC3 also offers *raw strings* which are enclosed in `` ` ` ``. \nA raw string may span multiple lines.\nInside of a raw string, no escapes are available, and to write a `` ` ``, simply double the character:\n\n```c3\n// Note: String is a distinct inline char[]\nString three_lines = \n`multi\nline\nstring`;\n\nString foo = `C:\\foo\\bar.dll`;\nString bar = `\"Say ``hello``\"`;\n// Same as\nString foo = \"C:\\\\foo\\\\bar.dll\";\nString bar = \"\\\"Say `hello`\\\"\";\n```\n\n`String` is a \n[distinct inline](/language-common/define/#distinct-inline) `char[]`, which can implicitly convert to `char[]` when required. \n\n`ZString` is a [distinct inline](/language-common/define/#distinct-inline) `char*`.`ZString` is a C compatible null terminated string, which can implicitly convert to `char*` when required.\n\n\n\n## Base64 and hex data literals\n\nBase64 literals are strings prefixed with `b64` to containing\n[Base64 encoded](https://en.wikipedia.org/wiki/Base64) data, which\nis converted into a char array at compile time:\n\n```c3\n// The array below contains the characters \"Hello World!\"\nchar[*] hello_world_base64 = b64\"SGVsbG8gV29ybGQh\";\n```\n\nThe corresponding hex data literals convert a hexadecimal string rather than Base64:\n\n```c3\n// The array below contains the characters \"Hello World!\"\nchar[*] hello_world_hex = x\"4865 6c6c 6f20 776f 726c 6421\";\n```\n## Pointer types\n\nPointers have the syntax `Type*`. A pointer is a memory address where one or possibly more\nelements of the underlying address are stored. Pointers can be stacked: `Foo*` is a pointer to a `Foo`\nwhile `Foo**` is a pointer to a pointer to `Foo`.\n\nThe pointer type has a special literal called `null`, which is an invalid, empty pointer.\n\n### `void*`\n\nThe `void*` type is a special pointer which implicitly converts to any other pointer. It is not \"a pointer to void\",\nbut rather a wildcard pointer which matches any other pointer.\n\n## Printing values\n\nPrinting values can be done using `io::print`, `io::printn`, `io::printf` and `io::printfn`. This requires\nimporting the module `std::io`. \n\n:::note\nThe `n` variants of the print functions will add a newline after printing, which is what we'll often \nuse in the examples, but `print` and `printf` work the same way.\n\n:::\n\n```c3\nimport std::io; // Get the io functions.\n\nfn void main()\n{\n    int a = 1234;\n    ulong b = 0xFFAABBCCDDEEFF;\n    double d = 13.03e-04;\n    char[*] hex = x\"4865 6c6c 6f20 776f 726c 6421\";\n    io::printn(a);\n    io::printn(b);\n    io::printn(d);\n    io::printn(hex);\n}\n```\n\nIf you run this program you will get:\n\n```\n1234\n71963842633920255\n0.001303\n[72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33]\n```\n\nTo get more control we can format the output using `printf` and `printfn`:\n\n```c3\nimport std::io;\nfn void main()\n{\n    int a = 1234;\n    ulong b = 0xFFAABBCCDDEEFF;\n    double d = 13.03e-04;\n    char[*] hex = x\"4865 6c6c 6f20 776f 726c 6421\";\n    io::printfn(\"a was:                        %d\", a);\n    io::printfn(\"b in hex was:                 %x\", b);\n    io::printfn(\"d in scientific notation was: %e\", d);\n    io::printfn(\"Bytes as string:              %s\", (String)&hex);\n}\n```\n\nWe can apply the [standard printf formatting rules](https://en.cppreference.com/w/c/io/fprintf), but \nunlike in C/C++ there is no need to indicate the type when using `%d` - it will print unsigned and \nsigned up to `int128`, in fact there is no support for `%u`, `%lld` etc in `io::printf`. Furthermore,\n`%s` works not just on strings but on any type:\n\n```c3\nimport std::io;\n\nenum Foo\n{\n    ABC,\n    BCD,\n    EFG,\n}\nfn void main()\n{\n    int a = 1234;\n    uint128 b = 0xFFEEDDCC_BBAA9988_77665544_33221100;\n    Foo foo = BCD;\n    io::printfn(\"a: %s, b: %d, foo: %s\", a, b, foo);\n}\n```\n\nThis prints:\n\n```\na: 1234, b: 340193404210632335760508365704335069440, foo: BCD\n```\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"integers","text":"Integers"},{"depth":3,"slug":"integer-constants","text":"Integer constants"},{"depth":3,"slug":"constant-suffixes","text":"Constant suffixes"},{"depth":2,"slug":"booleans","text":"Booleans"},{"depth":3,"slug":"character-literals","text":"Character literals"},{"depth":2,"slug":"floating-point-types","text":"Floating point types"},{"depth":3,"slug":"floating-point-constants","text":"Floating point constants"},{"depth":2,"slug":"arrays","text":"Arrays"},{"depth":2,"slug":"slices","text":"Slices"},{"depth":2,"slug":"vectors","text":"Vectors"},{"depth":2,"slug":"string-literals","text":"String literals"},{"depth":2,"slug":"base64-and-hex-data-literals","text":"Base64 and hex data literals"},{"depth":2,"slug":"pointer-types","text":"Pointer types"},{"depth":3,"slug":"void","text":"void*"},{"depth":2,"slug":"printing-values","text":"Printing values"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
