import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<h3 id=\"optionals-are-only-defined-in-certain-code\">Optionals are only defined in certain code</h3>\n<p>✅ Variable declarations</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> example </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">unreliable_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int? example = unreliable_function();\"><div></div></button></div></figure></div>\n<p>✅ Function return signature</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">example</span><span style=\"--0:#D6DEEB;--1:#403F53\">() {</span><span style=\"--0:#809191;--1:#616671\"> /* ... */</span><span style=\"--0:#D6DEEB;--1:#403F53\"> }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn int? example() { /* ... */ }\"><div></div></button></div></figure></div>\n<h2 id=\"handling-an-empty-optional\">Handling an empty Optional</h2>\n<h3 id=\"file-reading-example\">File reading example</h3>\n<ul>\n<li>If the file is present the Optional result will be the first 100 bytes of the file.</li>\n<li>If the file is not present the Optional <code dir=\"auto\">Excuse</code> will be <code dir=\"auto\">io::FILE_NOT_FOUND</code>.</li>\n</ul>\n<p>Try running this code below with and without a file called <code dir=\"auto\">file_to_open.txt</code> in the same directory.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\"> </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Function modifies </span><span style=\"--0:#D9F5DD;--1:#111111\">'</span><span style=\"--0:#ECC48D;--1:#9B504E\">buffer</span><span style=\"--0:#D9F5DD;--1:#111111\">'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\"> </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Returns an Optional with a </span><span style=\"--0:#D9F5DD;--1:#111111\">'</span><span style=\"--0:#ECC48D;--1:#9B504E\">char[]</span><span style=\"--0:#D9F5DD;--1:#111111\">'</span><span style=\"--0:#D6DEEB;--1:#403F53\"> result</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\"> </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">OR an empty Optional with an Excuse</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">*></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[]</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">read_file</span><span style=\"--0:#D6DEEB;--1:#403F53\">(String filename, </span><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] buffer)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Return Excuse if opening a file failed, using Rethrow `!`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">File file </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> file::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">open</span><span style=\"--0:#D6DEEB;--1:#403F53\">(filename, </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">r</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span><span style=\"--0:#C792EA;--1:#8D46B4\">!</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// At scope exit, close the file.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Discard the Excuse from file.close() with (void) cast</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">defer</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span><span style=\"--0:#C5E478;--1:#3C63B3\">file</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">close</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Return Excuse if reading failed, using Rethrow `!`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">file</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">read</span><span style=\"--0:#D6DEEB;--1:#403F53\">(buffer)</span><span style=\"--0:#C792EA;--1:#8D46B4\">!</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> buffer;</span><span style=\"--0:#809191;--1:#5E6578\"> // return a buffer result</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test_read</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] buffer </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mem::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">new_array</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">100</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">defer </span><span style=\"--0:#82AAFF;--1:#3C63B3\">free</span><span style=\"--0:#D6DEEB;--1:#403F53\">(buffer);</span><span style=\"--0:#809191;--1:#5E6578\"> // Free memory on scope exit</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#D6DEEB;--1:#403F53\">[]</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> read_buffer </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">read_file</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">file_to_open.txt</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, buffer);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Catch the empty Optional and assign the Excuse</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// to `excuse`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> read_buffer)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Excuse found: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, excuse);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">        </span></span><span style=\"--0:#809191;--1:#5E6578\">// Returning Excuse using the `?` suffix</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// `read_buffer` behaves like a normal variable here</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// because the Optional being empty was handled by 'if (catch)'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// which automatically unwrapped 'read_buffer' at this point.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">read_buffer: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, read_buffer);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test_read</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span><span style=\"--0:#C792EA;--1:#8D46B4\">!!</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Panic on failure.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;<* Function modifies &#x27;buffer&#x27; Returns an Optional with a &#x27;char[]&#x27; result OR an empty Optional with an Excuse*>fn char[]? read_file(String filename, char[] buffer){    // Return Excuse if opening a file failed, using Rethrow &#x60;!&#x60;    File file = file::open(filename, &#x22;r&#x22;)!;    // At scope exit, close the file.    // Discard the Excuse from file.close() with (void) cast    defer (void)file.close();    // Return Excuse if reading failed, using Rethrow &#x60;!&#x60;    file.read(buffer)!;    return buffer; // return a buffer result}fn void? test_read(){    char[] buffer = mem::new_array(char, 100);    defer free(buffer); // Free memory on scope exit    char[]? read_buffer = read_file(&#x22;file_to_open.txt&#x22;, buffer);    // Catch the empty Optional and assign the Excuse    // to &#x60;excuse&#x60;    if (catch excuse = read_buffer)    {        io::printfn(&#x22;Excuse found: %s&#x22;, excuse);        // Returning Excuse using the &#x60;?&#x60; suffix        return excuse?;    }    // &#x60;read_buffer&#x60; behaves like a normal variable here    // because the Optional being empty was handled by &#x27;if (catch)&#x27;    // which automatically unwrapped &#x27;read_buffer&#x27; at this point.    io::printfn(&#x22;read_buffer: %s&#x22;, read_buffer);}fn void main(){    test_read()!!; // Panic on failure.}\"><div></div></button></div></figure></div>\n<h3 id=\"return-a-default-value-if-optional-is-empty\">Return a default value if Optional is empty</h3>\n<p>The <code dir=\"auto\">??</code> operator allows us to return a default value if the Optional is empty.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test_bad</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> regular_value;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">function_may_error</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// An empty Optional found in optional_value</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">        </span></span><span style=\"--0:#809191;--1:#5E6578\">// Assign default result when empty.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">regular_value </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">-</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// A result was found in optional_value</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">try</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">regular_value </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">The value was: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, regular_value);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test_good</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Return '-1' when `foo_may_error()` is empty.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> regular_value </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo_may_error</span><span style=\"--0:#D6DEEB;--1:#403F53\">() </span><span style=\"--0:#C792EA;--1:#8D46B4\">??</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">-</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">The value was: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, regular_value);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;fn void test_bad(){    int regular_value;    int? optional_value = function_may_error();    // An empty Optional found in optional_value    if (catch optional_value)    {        // Assign default result when empty.        regular_value = -1;    }    // A result was found in optional_value    if (try optional_value)    {        regular_value = optional_value;    }    io::printfn(&#x22;The value was: %d&#x22;, regular_value);}fn void test_good(){    // Return &#x27;-1&#x27; when &#x60;foo_may_error()&#x60; is empty.    int regular_value = foo_may_error() ?? -1;    io::printfn(&#x22;The value was: %d&#x22;, regular_value);}\"><div></div></button></div></figure></div>\n<h4 id=\"modifying-the-returned-excuse\">Modifying the returned Excuse</h4>\n<p>A common use of <code dir=\"auto\">??</code> is to catch an empty Optional and change\nthe <code dir=\"auto\">Excuse</code> to another more specific <code dir=\"auto\">Excuse</code>, which\nallows us to distinguish one failure from the other,\neven when they had the same <code dir=\"auto\">Excuse</code> originally.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">faultdef DOG_ATE_HOMEWORK, TEXTBOOK_ON_FIRE;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> io::FILE_NOT_FOUND</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">examples</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span><span style=\"--0:#809191;--1:#5E6578\"> // io::FILE_NOT_FOUND</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span><span style=\"--0:#809191;--1:#5E6578\"> // io::FILE_NOT_FOUND</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// We can tell these apart by default assigning our own unique</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Excuse. Our custom Excuse is assigned only if an</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// empty Optional is returned.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() </span><span style=\"--0:#C792EA;--1:#8D46B4\">??</span><span style=\"--0:#D6DEEB;--1:#403F53\"> DOG_ATE_HOMEWORK</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() </span><span style=\"--0:#C792EA;--1:#8D46B4\">??</span><span style=\"--0:#D6DEEB;--1:#403F53\"> TEXTBOOK_ON_FIRE</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// If you want to immediately return with an Excuse,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// use the \"?\" and \"!\" operators together, see the code below:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> e </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() </span><span style=\"--0:#C792EA;--1:#8D46B4\">??</span><span style=\"--0:#D6DEEB;--1:#403F53\"> DOG_ATE_HOMEWORK</span><span style=\"--0:#C792EA;--1:#8D46B4\">?!</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() </span><span style=\"--0:#C792EA;--1:#8D46B4\">??</span><span style=\"--0:#D6DEEB;--1:#403F53\"> TEXTBOOK_ON_FIRE</span><span style=\"--0:#C792EA;--1:#8D46B4\">?!</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;faultdef DOG_ATE_HOMEWORK, TEXTBOOK_ON_FIRE;fn int? test(){    return io::FILE_NOT_FOUND?;}fn void? examples(){    int? a = test(); // io::FILE_NOT_FOUND    int? b = test(); // io::FILE_NOT_FOUND    // We can tell these apart by default assigning our own unique    // Excuse. Our custom Excuse is assigned only if an    // empty Optional is returned.    int? c = test() ?? DOG_ATE_HOMEWORK?;    int? d = test() ?? TEXTBOOK_ON_FIRE?;    // If you want to immediately return with an Excuse,    // use the &#x22;?&#x22; and &#x22;!&#x22; operators together, see the code below:    int? e = test() ?? DOG_ATE_HOMEWORK?!;    int? f = test() ?? TEXTBOOK_ON_FIRE?!;}\"><div></div></button></div></figure></div>\n<h3 id=\"force-unwrapping-expressions\">Force unwrapping expressions</h3>\n<p>The force <a href=\"/language-common/optionals-essential/#-unwrapping-an-optional\">unwrap</a> operator <code dir=\"auto\">!!</code> will\nmake the program panic and exit if the expression is an empty optional.\nThis is useful when the error should – in normal cases – not happen\nand you don’t want to write any error handling for it.\nThat said, it should be used with great caution in production code.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">find_file_and_test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">find_file</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span><span style=\"--0:#C792EA;--1:#8D46B4\">!!</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Force unwrap '!!' is roughly equal to:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// if (catch find_file()) unreachable(\"Unexpected excuse\");</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void find_file_and_test(){    find_file()!!;    // Force unwrap &#x27;!!&#x27; is roughly equal to:    // if (catch find_file()) unreachable(&#x22;Unexpected excuse&#x22;);}\"><div></div></button></div></figure></div>\n<h3 id=\"find-empty-optional-without-reading-the-excuse\">Find empty Optional without reading the Excuse</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> io::FILE_NOT_FOUND</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Find empty Optional, then handle inside scope</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Found empty Optional, the Excuse was not read</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;fn void test(){    int? optional_value = io::FILE_NOT_FOUND?;    // Find empty Optional, then handle inside scope    if (catch optional_value)    {        io::printn(&#x22;Found empty Optional, the Excuse was not read&#x22;);    }}\"><div></div></button></div></figure></div>\n<h3 id=\"find-empty-optional-and-switch-on-excuse\">Find empty Optional and switch on Excuse</h3>\n<p><code dir=\"auto\">if (catch)</code> can be used with switch on the <code dir=\"auto\">Excuse</code> value:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (excuse)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> DOG_ATE_HOMEWORK</span><span style=\"--0:#C792EA;--1:#8D46B4\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">                </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Dog ate your file</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> io::FILE_NOT_FOUND:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">                </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">File not found</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">            </span><span style=\"--0:#C792EA;--1:#8D46B4\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">                </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Unexpected Excuse: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, excuse);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">                </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void? test(){    if (catch excuse = optional_value)    {        switch (excuse)        {            case DOG_ATE_HOMEWORK:                io::printn(&#x22;Dog ate your file&#x22;);            case io::FILE_NOT_FOUND:                io::printn(&#x22;File not found&#x22;);            default:                io::printfn(&#x22;Unexpected Excuse: %s&#x22;, excuse);                return excuse?;        }    }}\"><div></div></button></div></figure></div>\n<h2 id=\"run-code-if-the-optional-has-a-result\">Run code if the Optional has a result</h2>\n<p>This is a convenience method, the logical inverse of\n<a href=\"/language-common/optionals-essential/#checking-if-an-optional-is-empty\"><code dir=\"auto\">if (catch)</code></a>\nand is helpful when you don’t care about the empty branch of\nthe code or you wish to perform an early return.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// 'optional_value' is a non-Optional variable inside the scope</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">try</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Result found: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, optional_value);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// The Optional result is assigned to 'unwrapped_value' inside the scope</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">try</span><span style=\"--0:#D6DEEB;--1:#403F53\"> unwrapped_value </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Result found: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, unwrapped_value);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void test(){    // &#x27;optional_value&#x27; is a non-Optional variable inside the scope    if (try optional_value)    {        io::printfn(&#x22;Result found: %s&#x22;, optional_value);    }    // The Optional result is assigned to &#x27;unwrapped_value&#x27; inside the scope    if (try unwrapped_value = optional_value)    {        io::printfn(&#x22;Result found: %s&#x22;, unwrapped_value);    }}\"><div></div></button></div></figure></div>\n<p>Another example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Returns Optional result with `int` type or empty with an Excuse</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">reliable_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Return a result</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">(String[] args)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> reliable_result </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">reliable_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Unwrap the result from reliable_result</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">try</span><span style=\"--0:#D6DEEB;--1:#403F53\"> reliable_result)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">        </span></span><span style=\"--0:#809191;--1:#5E6578\">// reliable_result is unwrapped in this scope, can be used as normal</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">reliable_result: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, reliable_result);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;// Returns Optional result with &#x60;int&#x60; type or empty with an Excusefn int? reliable_function(){    return 7; // Return a result}fn void main(String[] args){    int? reliable_result = reliable_function();    // Unwrap the result from reliable_result    if (try reliable_result)    {        // reliable_result is unwrapped in this scope, can be used as normal        io::printfn(&#x22;reliable_result: %s&#x22;, reliable_result);    }}\"><div></div></button></div></figure></div>\n<p>It is possible to add conditions to an <code dir=\"auto\">if (try)</code> but they must be\njoined with <code dir=\"auto\">&#x26;&#x26;</code>. However you <strong>cannot</strong> use logical OR (<code dir=\"auto\">||</code>) conditions:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Returns Optional with an 'int' result or empty with an Excuse</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">reliable_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Return an Optional result</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">(String[] args)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> reliable_result1 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">reliable_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> reliable_result2 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">reliable_function</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Unwrap the result from reliable_result1 and reliable_result2</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">try</span><span style=\"--0:#D6DEEB;--1:#403F53\"> reliable_result1 </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">try</span><span style=\"--0:#D6DEEB;--1:#403F53\"> reliable_result2 </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">5</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">        </span></span><span style=\"--0:#809191;--1:#5E6578\">// `reliable_result1` is can be used as a normal variable here</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">reliable_result1: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, reliable_result1);</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">        </span></span><span style=\"--0:#809191;--1:#5E6578\">// `reliable_result2` is can be used as a normal variable here</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">reliable_result2: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, reliable_result2);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// ERROR cannot use logical OR `||`</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// if (try reliable_result1 || try reliable_result2)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">//     io::printn(\"this can never happen);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;// Returns Optional with an &#x27;int&#x27; result or empty with an Excusefn int? reliable_function(){    return 7; // Return an Optional result}fn void main(String[] args){    int? reliable_result1 = reliable_function();    int? reliable_result2 = reliable_function();    // Unwrap the result from reliable_result1 and reliable_result2    if (try reliable_result1 &#x26;&#x26; try reliable_result2 &#x26;&#x26; 5 > 2)    {        // &#x60;reliable_result1&#x60; is can be used as a normal variable here        io::printfn(&#x22;reliable_result1: %s&#x22;, reliable_result1);        // &#x60;reliable_result2&#x60; is can be used as a normal variable here        io::printfn(&#x22;reliable_result2: %s&#x22;, reliable_result2);    }    // ERROR cannot use logical OR &#x60;||&#x60;    // if (try reliable_result1 || try reliable_result2)    // {    //     io::printn(&#x22;this can never happen);    // }}\"><div></div></button></div></figure></div>\n<h2 id=\"shorthands-to-work-with-optionals\">Shorthands to work with Optionals</h2>\n<h3 id=\"getting-the-excuse\">Getting the Excuse</h3>\n<p>Retrieving the <code dir=\"auto\">Excuse</code> with <a href=\"/language-common/optionals-essential/#checking-if-an-optional-is-empty\"><code dir=\"auto\">if (catch excuse = optional_value) {...}</code></a>\nis not the only way to get the <code dir=\"auto\">Excuse</code> from an Optional, we can use the macro <code dir=\"auto\">@catch</code> instead.\nUnlike <code dir=\"auto\">if (catch)</code> this will never cause automatic <a href=\"/language-common/optionals-essential/#-unwrapping-an-optional\">unwrapping</a>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">(String[] args)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> io::FILE_NOT_FOUND</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">faultdef excuse </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\">(optional_value);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (excuse)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Excuse found: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, excuse);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void main(String[] args){    int? optional_value = io::FILE_NOT_FOUND?;    faultdef excuse = @catch(optional_value);    if (excuse)    {        io::printfn(&#x22;Excuse found: %s&#x22;, excuse);    }}\"><div></div></button></div></figure></div>\n<h3 id=\"checking-if-an-optional-has-a-result-without-unwrapping\">Checking if an Optional has a result without unwrapping</h3>\n<p>The <code dir=\"auto\">@ok</code> macro will return <code dir=\"auto\">true</code> if an Optional result is present and\n<code dir=\"auto\">false</code> if the Optional is empty.\nFunctionally this is equivalent to <a href=\"#getting-the-excuse\"><code dir=\"auto\">!@catch</code></a>, meaning no Excuse was found, for example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">(String[] args)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> optional_value </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">bool</span><span style=\"--0:#D6DEEB;--1:#403F53\"> result_found </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">ok</span><span style=\"--0:#D6DEEB;--1:#403F53\">(optional_value);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">assert</span><span style=\"--0:#D6DEEB;--1:#403F53\">(result_found </span><span style=\"--0:#C792EA;--1:#8D46B4\">==</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">!</span><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\">(optional_value));</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void main(String[] args){    int? optional_value = 7;    bool result_found = @ok(optional_value);    assert(result_found == !@catch(optional_value));}\"><div></div></button></div></figure></div>\n<h2 id=\"no-void-variables\">No void? variables</h2>\n<p>The <code dir=\"auto\">void?</code> type has no possible representation as a variable, and may\nonly be a function return type.</p>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p>The main function cannot return an optional.</p></section></aside>\n<p>To store the <code dir=\"auto\">Excuse</code> returned from a <code dir=\"auto\">void?</code> function without\n<a href=\"/language-common/optionals-essential/#checking-if-an-optional-is-empty\"><code dir=\"auto\">if (catch foo = optional_value)</code></a>,\nuse the <a href=\"#getting-the-excuse\"><code dir=\"auto\">@catch</code></a> macro to convert the Optional to a <code dir=\"auto\">fault</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> io::FILE_NOT_FOUND</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fault excuse </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">());</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void? test(){    return io::FILE_NOT_FOUND?;}fault excuse = @catch(test());\"><div></div></button></div></figure></div>";

				const frontmatter = {"title":"Advanced Error Handling","description":"Advanced Error Handling","sidebar":{"order":65}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Language Common/optionals-advanced.md";
				const url = undefined;
				function rawContent() {
					return "\n### Optionals are only defined in certain code\n✅ Variable declarations\n```c3\nint? example = unreliable_function();\n```\n✅ Function return signature\n```c3\nfn int? example() { /* ... */ }\n```\n\n## Handling an empty Optional\n\n### File reading example\n- If the file is present the Optional result will be the first 100 bytes of the file.\n- If the file is not present the Optional `Excuse` will be `io::FILE_NOT_FOUND`.\n\nTry running this code below with and without a file called `file_to_open.txt` in the same directory.\n\n```c3\nimport std::io;\n\n<*\n Function modifies 'buffer'\n Returns an Optional with a 'char[]' result\n OR an empty Optional with an Excuse\n*>\nfn char[]? read_file(String filename, char[] buffer)\n{\n    // Return Excuse if opening a file failed, using Rethrow `!`\n    File file = file::open(filename, \"r\")!;\n\n    // At scope exit, close the file.\n    // Discard the Excuse from file.close() with (void) cast\n    defer (void)file.close();\n\n    // Return Excuse if reading failed, using Rethrow `!`\n    file.read(buffer)!;\n    return buffer; // return a buffer result\n}\n\nfn void? test_read()\n{\n    char[] buffer = mem::new_array(char, 100);\n    defer free(buffer); // Free memory on scope exit\n\n    char[]? read_buffer = read_file(\"file_to_open.txt\", buffer);\n    // Catch the empty Optional and assign the Excuse\n    // to `excuse`\n    if (catch excuse = read_buffer)\n    {\n        io::printfn(\"Excuse found: %s\", excuse);\n        // Returning Excuse using the `?` suffix\n        return excuse?;\n    }\n\n    // `read_buffer` behaves like a normal variable here\n    // because the Optional being empty was handled by 'if (catch)'\n    // which automatically unwrapped 'read_buffer' at this point.\n    io::printfn(\"read_buffer: %s\", read_buffer);\n}\n\nfn void main()\n{\n    test_read()!!; // Panic on failure.\n}\n```\n\n### Return a default value if Optional is empty\nThe `??` operator allows us to return a default value if the Optional is empty.\n```c3\nimport std::io;\n\nfn void test_bad()\n{\n    int regular_value;\n    int? optional_value = function_may_error();\n\n    // An empty Optional found in optional_value\n    if (catch optional_value)\n    {\n        // Assign default result when empty.\n        regular_value = -1;\n    }\n\n    // A result was found in optional_value\n    if (try optional_value)\n    {\n        regular_value = optional_value;\n    }\n    io::printfn(\"The value was: %d\", regular_value);\n}\n\nfn void test_good()\n{\n    // Return '-1' when `foo_may_error()` is empty.\n    int regular_value = foo_may_error() ?? -1;\n\n    io::printfn(\"The value was: %d\", regular_value);\n}\n```\n\n#### Modifying the returned Excuse\n\nA common use of `??` is to catch an empty Optional and change\nthe `Excuse` to another more specific `Excuse`, which\nallows us to distinguish one failure from the other,\neven when they had the same `Excuse` originally.\n\n```c3\nimport std::io;\n\nfaultdef DOG_ATE_HOMEWORK, TEXTBOOK_ON_FIRE;\n\nfn int? test()\n{\n    return io::FILE_NOT_FOUND?;\n}\n\nfn void? examples()\n{\n    int? a = test(); // io::FILE_NOT_FOUND\n    int? b = test(); // io::FILE_NOT_FOUND\n\n    // We can tell these apart by default assigning our own unique\n    // Excuse. Our custom Excuse is assigned only if an\n    // empty Optional is returned.\n    int? c = test() ?? DOG_ATE_HOMEWORK?;\n    int? d = test() ?? TEXTBOOK_ON_FIRE?;\n\n    // If you want to immediately return with an Excuse,\n    // use the \"?\" and \"!\" operators together, see the code below:\n    int? e = test() ?? DOG_ATE_HOMEWORK?!;\n    int? f = test() ?? TEXTBOOK_ON_FIRE?!;\n}\n```\n\n### Force unwrapping expressions\n\nThe force [unwrap](/language-common/optionals-essential/#-unwrapping-an-optional) operator `!!` will\nmake the program panic and exit if the expression is an empty optional.\nThis is useful when the error should – in normal cases – not happen\nand you don't want to write any error handling for it.\nThat said, it should be used with great caution in production code.\n\n```c3\nfn void find_file_and_test()\n{\n    find_file()!!;\n\n    // Force unwrap '!!' is roughly equal to:\n    // if (catch find_file()) unreachable(\"Unexpected excuse\");\n}\n```\n\n### Find empty Optional without reading the Excuse\n\n```c3\nimport std::io;\nfn void test()\n{\n    int? optional_value = io::FILE_NOT_FOUND?;\n\n    // Find empty Optional, then handle inside scope\n    if (catch optional_value)\n    {\n        io::printn(\"Found empty Optional, the Excuse was not read\");\n    }\n}\n```\n\n### Find empty Optional and switch on Excuse\n\n`if (catch)` can be used with switch on the `Excuse` value:\n\n```c3\nfn void? test()\n{\n    if (catch excuse = optional_value)\n    {\n        switch (excuse)\n        {\n            case DOG_ATE_HOMEWORK:\n                io::printn(\"Dog ate your file\");\n            case io::FILE_NOT_FOUND:\n                io::printn(\"File not found\");\n            default:\n                io::printfn(\"Unexpected Excuse: %s\", excuse);\n                return excuse?;\n        }\n    }\n}\n```\n\n## Run code if the Optional has a result\nThis is a convenience method, the logical inverse of\n[`if (catch)`](/language-common/optionals-essential/#checking-if-an-optional-is-empty)\nand is helpful when you don't care about the empty branch of\nthe code or you wish to perform an early return.\n```c3\nfn void test()\n{\n    // 'optional_value' is a non-Optional variable inside the scope\n    if (try optional_value)\n    {\n        io::printfn(\"Result found: %s\", optional_value);\n    }\n\n    // The Optional result is assigned to 'unwrapped_value' inside the scope\n    if (try unwrapped_value = optional_value)\n    {\n        io::printfn(\"Result found: %s\", unwrapped_value);\n    }\n}\n```\n\nAnother example:\n\n```c3\nimport std::io;\n\n// Returns Optional result with `int` type or empty with an Excuse\nfn int? reliable_function()\n{\n    return 7; // Return a result\n}\n\nfn void main(String[] args)\n{\n    int? reliable_result = reliable_function();\n\n    // Unwrap the result from reliable_result\n    if (try reliable_result)\n    {\n        // reliable_result is unwrapped in this scope, can be used as normal\n        io::printfn(\"reliable_result: %s\", reliable_result);\n    }\n}\n```\nIt is possible to add conditions to an `if (try)` but they must be\njoined with `&&`. However you **cannot** use logical OR (`||`) conditions:\n```c3\nimport std::io;\n\n// Returns Optional with an 'int' result or empty with an Excuse\nfn int? reliable_function()\n{\n    return 7; // Return an Optional result\n}\n\nfn void main(String[] args)\n{\n    int? reliable_result1 = reliable_function();\n    int? reliable_result2 = reliable_function();\n\n    // Unwrap the result from reliable_result1 and reliable_result2\n    if (try reliable_result1 && try reliable_result2 && 5 > 2)\n    {\n        // `reliable_result1` is can be used as a normal variable here\n        io::printfn(\"reliable_result1: %s\", reliable_result1);\n\n        // `reliable_result2` is can be used as a normal variable here\n        io::printfn(\"reliable_result2: %s\", reliable_result2);\n    }\n\n    // ERROR cannot use logical OR `||`\n    // if (try reliable_result1 || try reliable_result2)\n    // {\n    //     io::printn(\"this can never happen);\n    // }\n}\n```\n\n## Shorthands to work with Optionals\n\n### Getting the Excuse\n\nRetrieving the `Excuse` with [`if (catch excuse = optional_value) {...}`](/language-common/optionals-essential/#checking-if-an-optional-is-empty)\nis not the only way to get the `Excuse` from an Optional, we can use the macro `@catch` instead.\nUnlike `if (catch)` this will never cause automatic [unwrapping](/language-common/optionals-essential/#-unwrapping-an-optional).\n\n```c3\nfn void main(String[] args)\n{\n    int? optional_value = io::FILE_NOT_FOUND?;\n\n    faultdef excuse = @catch(optional_value);\n    if (excuse)\n    {\n        io::printfn(\"Excuse found: %s\", excuse);\n    }\n}\n```\n\n### Checking if an Optional has a result without unwrapping\n\nThe `@ok` macro will return `true` if an Optional result is present and\n`false` if the Optional is empty.\nFunctionally this is equivalent to [`!@catch`](#getting-the-excuse), meaning no Excuse was found, for example:\n\n```c3\nfn void main(String[] args)\n{\n    int? optional_value = 7;\n\n    bool result_found = @ok(optional_value);\n    assert(result_found == !@catch(optional_value));\n}\n```\n\n## No void? variables\n\nThe `void?` type has no possible representation as a variable, and may\nonly be a function return type.\n\n:::note\nThe main function cannot return an optional.\n:::\n\nTo store the `Excuse` returned from a `void?` function without\n[`if (catch foo = optional_value)`](/language-common/optionals-essential/#checking-if-an-optional-is-empty),\nuse the [`@catch`](#getting-the-excuse) macro to convert the Optional to a `fault`:\n```c3\nfn void? test()\n{\n    return io::FILE_NOT_FOUND?;\n}\n\nfault excuse = @catch(test());\n```\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":3,"slug":"optionals-are-only-defined-in-certain-code","text":"Optionals are only defined in certain code"},{"depth":2,"slug":"handling-an-empty-optional","text":"Handling an empty Optional"},{"depth":3,"slug":"file-reading-example","text":"File reading example"},{"depth":3,"slug":"return-a-default-value-if-optional-is-empty","text":"Return a default value if Optional is empty"},{"depth":4,"slug":"modifying-the-returned-excuse","text":"Modifying the returned Excuse"},{"depth":3,"slug":"force-unwrapping-expressions","text":"Force unwrapping expressions"},{"depth":3,"slug":"find-empty-optional-without-reading-the-excuse","text":"Find empty Optional without reading the Excuse"},{"depth":3,"slug":"find-empty-optional-and-switch-on-excuse","text":"Find empty Optional and switch on Excuse"},{"depth":2,"slug":"run-code-if-the-optional-has-a-result","text":"Run code if the Optional has a result"},{"depth":2,"slug":"shorthands-to-work-with-optionals","text":"Shorthands to work with Optionals"},{"depth":3,"slug":"getting-the-excuse","text":"Getting the Excuse"},{"depth":3,"slug":"checking-if-an-optional-has-a-result-without-unwrapping","text":"Checking if an Optional has a result without unwrapping"},{"depth":2,"slug":"no-void-variables","text":"No void? variables"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
