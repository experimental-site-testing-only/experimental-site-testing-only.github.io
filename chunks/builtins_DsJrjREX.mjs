const id = "Misc Advanced/builtins.md";
						const collection = "docs";
						const slug = "misc-advanced/builtins";
						const body = "The compiler offers builtin constants and functions. Some are only available on certain targets. All builtins use the `$$`\nname prefix.\n\n## Builtin constants\n\nThese constants are generated by the compiler and can safely be used by the user.\n\n#### `$$BENCHMARK_NAMES`\nAn array of names of the benchmark functions.\n\n#### `$$BENCHMARK_FNS`\nAn array of addresses to the benchmark functions.\n\n#### `$$DATE`\nThe current date.\n\n#### `$$FILE`\nThe current file name.\n\n#### `$$FILEPATH`\nThe current file with path.\n\n#### `$$FUNC`\nThe current function name, will return \"<GLOBAL>\" on the global level.\n\n#### `$$FUNCTION`\nThe current function as an expression.\n\n#### `$$LINE`\nThe current line as an integer.\n\n#### `$$LINE_RAW`\nUsually the same as `$$LINE`, but in case of a macro inclusion it returns the line in the macro rather than\nthe line where the macro was included.\n\n#### `$$MODULE`\nThe current module name.\n\n#### `$$TIME`\nThe current time.\n\n\n## Compiler builtin functions\n\nThe `$$` namespace defines *compiler builtin functions*. \nThese special functions are __not guaranteed__ to exist on \nall platforms, and are ways to wrap compiler implemented, optimized implementations\nof some particular functionality. They are mainly intended for standard \nlibrary *internal* use. The standard library have macros \nthat wrap these builtins, so they should normally not be used on their own. \n\n#### `$$trap`\n\nEmits a trap instruction. \n\n#### `$$unreachable`\n\nInserts an \"unreachable\" annotation.\n\n#### `$$stacktrace`\n\nReturns the current \"callstack\" reference if available. OS and compiler dependent.\n\n#### `$$volatile_store`\n\nTakes a variable and a value and stores the value as a volatile store.\n\n#### `$$volatile_load`\n\nTakes a variable and returns the value using a volatile load.\n\n#### `$$memcpy`\n\nBuiltin memcpy instruction.\n\n#### `$$memset`\n\nBuiltin memset instruction.\n\n#### `$$prefetch`\n\nPrefetch a memory location.\n\n#### `$$sysclock`\n\nAccess to the cycle counter register (or similar low latency clock) on supported\narchitectures (e.g. RDTSC on x86), otherwise `$$sysclock` will yield 0.\n\n#### `$$syscall`\n\nMakes a syscall according to the platform convention on platforms where it is supported.\n\n### Math functions\n\nFunctions `$$ceil`, `$$trunc`, `$$sin`, `$$cos`, `$$log`, `$$log2`, `$$log10`, `$$rint`, `$$round`\n`$$sqrt`, `$$roundeven`, `$$floor`, `$$sqrt`, `$$pow`, `$$exp`, `$$fma` and `$$fabs`, `$$copysign`,\n`$$round`, `$$nearbyint`.\n\nCan be applied to float vectors or numbers. Returns the same type.\n\nFunctions `$$min`, `$$abs` and `$$max` can be applied to any integer or float number or vector.\n\nFunction $pow_int takes a float or floating vector + an integer and returns\nthe same type as the first parameter.\n\nSaturated addition, subtraction and left shift for integers and integer vectors:\n`$$sat_add`, `$$sat_shl`, `$$sat_sub`.\n\n### Bit functions\n\n#### `$$fshl` and `$$fshr`\n\nFunnel shift left and right, takes either two integers or two integer vectors.\n\n#### `$$ctz`, `$$clz`, `$$bitreverse`, `$$bswap`, `$$popcount`\n\nBit functions work on an integer or an integer vector.\n\n### Vector functions\n\n`$$reduce_add`, `$$reduce_mul`, `$$reduce_and`, `$$reduce_or`, `$$reduce_xor` work on integer vectors.\n\n`$$reduce_fadd`, `$$reduce_fmul` works on float vectors.\n\n`$$reduce_max`, `$$reduce_min` works on any vector.\n\n`$$reverse` reverses the values in any vector.\n\n`$$shufflevector` rearranges the values of two vectors using a fixed mask into\na resulting vector.\n\n";
						const data = {title:"Builtins",description:"Builtins",editUrl:true,head:[],template:"doc",sidebar:{order:226,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Misc Advanced/builtins.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
