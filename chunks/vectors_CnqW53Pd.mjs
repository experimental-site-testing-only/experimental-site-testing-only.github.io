const id = "Language Common/vectors.md";
						const collection = "docs";
						const slug = "language-common/vectors";
						const body = "\nVectors - where possible - based on underlying hardware vector implementations. A vector is similar to an array, but \nwith additional functionality. The restriction is that a vector may only consist of elements that are numerical\ntypes, boolean or pointers.\n\nA vector is declared similar to an array but uses `[<>]` rather than `[]`, e.g. `int[<4>]`.\n\n(If you are searching for the counterpart of C++'s `std::vector`, look instead at the standard\nlibrary [`List` type](/language-common/arrays/#dynamic-arrays-and-lists).)\n\n## Arithmetics on vectors\n\nVectors support all arithmetics and other operations supported by its underlying type. The operations are\nalways performed elementwise.\n\n```c3\nint[<2>] a = { 23, 11 };\nint[<2>] b = { 2, 1 };\nint[<2>] c = a * b;     // c = { 46, 11 }\n```\n\nFor integer and boolean types, bit operations such as `^ | & << >>` are available, and for pointers, pointer arithmetic\nis supported.\n\n### Scalar values\n\nScalar values will implicitly widen to vectors when used with vectors:\n\n```c3\nint[<2>] d = { 21, 14 };\nint[<2>] e = d / 7;      // e = { 3, 2 }\nint[<2>] f = 4;          // f = { 4, 4 }\n```\n\n## Additional operations\n\nThe `std::math` module contains a wealth of additional operations available on vectors using dot-method syntax.\n\n- `.sum()` - sum all vector elements.\n- `.product()` - multiply all vector elements.\n- `.max()` - get the maximum element.\n- `.min()` - get the minimum element.\n- `.dot(other)` - return the dot product with the other vector.\n- `.length(other)` - return the square root of the dot product (not available on integer vectors).\n- `.distance(other)` - return the length of the difference of the two vectors (not available on integer vectors).\n- `.normalize()` - return a normalized vector (not available on integer vectors).\n- `.comp_lt(other)` - return a boolean vector with a component wise \"<\" \n- `.comp_le(other)` - return a boolean vector with a component wise \"<=\"  \n- `.comp_eq(other)` - return a boolean vector with a component wise \"==\"  \n- `.comp_gt(other)` - return a boolean vector with a component wise \">\"  \n- `.comp_ge(other)` - return a boolean vector with a component wise \">=\"  \n- `.comp_ne(other)` - return a boolean vector with a component wise \"!=\"  \n\nDot methods available for scalar values, such as `ceil`, `fma` etc are in general also available for vectors.\n\n## Swizzling\n\nSwizzling using dot notation is supported, using x, y, z, w *or* r, g, b, a:\n\n```c3\nint[<3>] a = { 11, 22, 33 };\nint[<4>] b = a.xxzx;                         // b = { 11, 11, 33, 11 }\nint c = b.w;                                 // c = 11;\nchar[<4>] color = { 0x11, 0x22, 0x33, 0xFF };\nchar red = color.r;                          // red = 0x11\nb.xy = b.zw;\ncolor.rg += { 1, 2 };\n```\n\n:::note\nAssignment, like `color.rg += { 1, 2 }` is only available in 0.7.0 and later.\n:::\n\n## Array-like operations\n\nLike arrays, it's possible to make slices and iterate over vectors. \n:::note\nThe storage alignment of vectors are often different from arrays, which should be taken into account when storing vectors.\n:::\n";
						const data = {title:"Vectors",description:"Vectors",editUrl:true,head:[],template:"doc",sidebar:{order:63,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Language Common/vectors.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
