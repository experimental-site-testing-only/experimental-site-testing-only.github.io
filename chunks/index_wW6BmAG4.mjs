import { F as Fragment, _ as __astro_tag_component__, l as createVNode } from './astro/server_afRpe8AA.mjs';
import '@astrojs/internal-helpers/path';
import { $ as $$Image } from './_astro_assets_BVH1XDQ-.mjs';
import 'clsx';

const frontmatter = {
  "title": "Standard Library",
  "description": "Standard Library",
  "sidebar": {
    "order": 128
  }
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "stdcorebuiltin",
    "text": "std::core::builtin"
  }, {
    "depth": 3,
    "slug": "void-panicchar-message-char-file-char-function-uint-line",
    "text": "void panic(char* message, char *file, char *function, uint line)"
  }, {
    "depth": 3,
    "slug": "void-swapa-b",
    "text": "void @swap(&a, &b)"
  }, {
    "depth": 3,
    "slug": "anycastany-v-type",
    "text": "anycast(any v, $Type)"
  }, {
    "depth": 3,
    "slug": "void-unreachablestring--unreachable-statement-reached",
    "text": "void unreachable($string = \"Unreachable statement reached.\")"
  }, {
    "depth": 3,
    "slug": "bitcastvalue-type",
    "text": "bitcast(value, $Type)"
  }, {
    "depth": 3,
    "slug": "enum_by_nametype-enum_name",
    "text": "enum_by_name($Type, enum_name)"
  }, {
    "depth": 3,
    "slug": "void-scopevariable-body",
    "text": "void @scope(&variable; @body)"
  }, {
    "depth": 3,
    "slug": "less-greater-less_eq-greater_eq-equals",
    "text": "less, greater, less_eq, greater_eq, equals"
  }, {
    "depth": 3,
    "slug": "faults",
    "text": "Faults"
  }, {
    "depth": 2,
    "slug": "stdcoreenv",
    "text": "std::core::env"
  }, {
    "depth": 3,
    "slug": "constants",
    "text": "Constants"
  }, {
    "depth": 2,
    "slug": "stdcoremem",
    "text": "std::core::mem"
  }, {
    "depth": 3,
    "slug": "malloc-malloc_aligned",
    "text": "malloc, malloc_aligned"
  }, {
    "depth": 3,
    "slug": "newtype-initializer-new_alignedtype-initializer",
    "text": "new($Type, #initializer), new_aligned($Type, #initializer)"
  }, {
    "depth": 3,
    "slug": "alloctype-alloc_alignedtype",
    "text": "alloc($Type), alloc_aligned($Type)"
  }, {
    "depth": 3,
    "slug": "new_arraytype-usz-elements-new_array_alignedtype-usz-elements",
    "text": "new_array($Type, usz elements), new_array_aligned($Type, usz elements)"
  }, {
    "depth": 3,
    "slug": "alloc_arraytype-usz-elements-alloc_array_alignedtype-usz-elements",
    "text": "alloc_array($Type, usz elements), alloc_array_aligned($Type, usz elements)"
  }, {
    "depth": 3,
    "slug": "calloc-calloc_checked-calloc_aligned",
    "text": "calloc, calloc_checked, calloc_aligned"
  }, {
    "depth": 3,
    "slug": "realloc-realloc_checked-realloc_aligned",
    "text": "realloc, realloc_checked, realloc_aligned"
  }, {
    "depth": 3,
    "slug": "free-free_aligned",
    "text": "free, free_aligned"
  }, {
    "depth": 3,
    "slug": "scopedallocator-allocator-body",
    "text": "@scoped(Allocator allocator; @body())"
  }, {
    "depth": 3,
    "slug": "tscoped-body",
    "text": "@tscoped(; @body())"
  }, {
    "depth": 3,
    "slug": "void-tmallocusz-size-usz-alignment--0",
    "text": "void* tmalloc(usz size, usz alignment = 0)"
  }, {
    "depth": 3,
    "slug": "void-tcallocusz-size-usz-alignment--0",
    "text": "void* tcalloc(usz size, usz alignment = 0)"
  }, {
    "depth": 3,
    "slug": "void-treallocvoid-ptr-usz-size-usz-alignment--0",
    "text": "void* trealloc(void* ptr, usz size, usz alignment = 0)"
  }, {
    "depth": 3,
    "slug": "tnew-temp_alloc-temp_array-talloc_array",
    "text": "tnew, temp_alloc, temp_array, talloc_array"
  }, {
    "depth": 3,
    "slug": "void-poolbody",
    "text": "void @pool(;@body)"
  }, {
    "depth": 3,
    "slug": "volatile_loadx",
    "text": "@volatile_load(&x)"
  }, {
    "depth": 3,
    "slug": "volatile_storex-y",
    "text": "@volatile_store(&x, y)"
  }, {
    "depth": 3,
    "slug": "usz-aligned_offsetusz-offset-usz-alignment",
    "text": "usz aligned_offset(usz offset, usz alignment)"
  }, {
    "depth": 3,
    "slug": "usz-aligned_pointervoid-ptr-usz-alignment",
    "text": "usz aligned_pointer(void* ptr, usz alignment)"
  }, {
    "depth": 3,
    "slug": "bool-ptr_is_alignedvoid-ptr-usz-alignment",
    "text": "bool ptr_is_aligned(void* ptr, usz alignment)"
  }, {
    "depth": 3,
    "slug": "void-copyvoid-dst-void-src-usz-len-usz-dst_align--0-usz-src_align--0-bool-is_volatile--false",
    "text": "void copy(void* dst, void* src, usz len, usz $dst_align = 0, usz $src_align = 0, bool $is_volatile = false)"
  }, {
    "depth": 3,
    "slug": "void-setvoid-dst-char-val-usz-len-usz-dst_align--0-bool-is_volatile--false",
    "text": "void set(void* dst, char val, usz len, usz $dst_align = 0, bool $is_volatile = false)"
  }, {
    "depth": 3,
    "slug": "void-clearvoid-dst-usz-len-usz-dst_align--0-bool-is_volatile--false",
    "text": "void clear(void* dst, usz len, usz $dst_align = 0, bool $is_volatile = false)"
  }, {
    "depth": 3,
    "slug": "clonevalue",
    "text": "@clone(&value)"
  }, {
    "depth": 3,
    "slug": "tclonevalue",
    "text": "@tclone(&value)"
  }, {
    "depth": 2,
    "slug": "stdcoretypes",
    "text": "std::core::types"
  }, {
    "depth": 3,
    "slug": "bool-is_comparable_valuetype",
    "text": "bool is_comparable_value($Type)"
  }, {
    "depth": 3,
    "slug": "bool-is_equatable_valuevalue",
    "text": "bool is_equatable_value(value)"
  }, {
    "depth": 3,
    "slug": "bool-is_equatable_valuevalue-1",
    "text": "bool is_equatable_value(value)"
  }, {
    "depth": 3,
    "slug": "kind_is_inttypekind-kind",
    "text": "kind_is_int(TypeKind kind)"
  }, {
    "depth": 3,
    "slug": "any_to_intany-v-type",
    "text": "any_to_int(any* v, $Type)"
  }, {
    "depth": 2,
    "slug": "stdcorestrconv",
    "text": "std::core::str::conv"
  }, {
    "depth": 3,
    "slug": "usz-char32_to_utf8char32-c-char-output-usz-available",
    "text": "usz? char32_to_utf8(Char32 c, char* output, usz available)"
  }, {
    "depth": 3,
    "slug": "void-char32_to_utf16_unsafechar32-c-char16-output",
    "text": "void char32_to_utf16_unsafe(Char32 c, Char16** output)"
  }, {
    "depth": 2,
    "slug": "stdio",
    "text": "std::io"
  }, {
    "depth": 3,
    "slug": "string-readlinestream--iostdin-allocator-allocator--allocatorheap",
    "text": "String? readline(stream = io::stdin(), Allocator allocator = allocator::heap())"
  }, {
    "depth": 3,
    "slug": "string-treadlinestream--iostdin",
    "text": "String? treadline(stream = io::stdin())"
  }, {
    "depth": 3,
    "slug": "void-printx-void-printnx-",
    "text": "void print(x), void printn(x = \"\")"
  }, {
    "depth": 3,
    "slug": "void-eprintx-void-eprintnx",
    "text": "void eprint(x), void eprintn(x)"
  }, {
    "depth": 3,
    "slug": "usz-printfstring-format-args-maydiscard",
    "text": "usz? printf(String format, args...) @maydiscard"
  }, {
    "depth": 3,
    "slug": "usz-eprintfstring-format-args-maydiscard",
    "text": "usz? eprintf(String format, args...) @maydiscard"
  }, {
    "depth": 3,
    "slug": "char-bprintfchar-buffer-string-format-args-maydiscard",
    "text": "char[]? bprintf(char[] buffer, String format, args...) @maydiscard"
  }, {
    "depth": 3,
    "slug": "usz-fprintout-x-usz-fprintnout-x-",
    "text": "usz? fprint(out, x), usz? fprintn(out, x = \"\")"
  }, {
    "depth": 3,
    "slug": "usz-fprintfoutstream-out-string-format-args",
    "text": "usz? fprintf(OutStream out, String format, args...)"
  }, {
    "depth": 3,
    "slug": "void-putcharchar-c-inline",
    "text": "void putchar(char c) @inline"
  }, {
    "depth": 3,
    "slug": "usz-dstringappendfdstring-str-string-format-args-maydiscard",
    "text": "usz? DString.appendf(DString* str, String format, args...) @maydiscard"
  }, {
    "depth": 3,
    "slug": "file-stdout-file-stdin-file-stderr",
    "text": "File* stdout(), File* stdin(), File* stderr()"
  }, {
    "depth": 2,
    "slug": "stdiofile",
    "text": "std::io::file"
  }, {
    "depth": 3,
    "slug": "file-openstring-filename-string-mode",
    "text": "File? open(String filename, String mode)"
  }, {
    "depth": 3,
    "slug": "file-open_pathpath-path-string-mode",
    "text": "File? open_path(Path path, String mode)"
  }, {
    "depth": 3,
    "slug": "bool-is_filestring-path",
    "text": "bool is_file(String path)"
  }, {
    "depth": 3,
    "slug": "usz-get_sizestring-path",
    "text": "usz? get_size(String path)"
  }, {
    "depth": 3,
    "slug": "void-deletestring-filename",
    "text": "void? delete(String filename)"
  }, {
    "depth": 3,
    "slug": "void-filereopenself-string-filename-string-mode",
    "text": "void? File.reopen(&self, String filename, String mode)"
  }, {
    "depth": 3,
    "slug": "usz-fileseekself-isz-offset-seek-seek_mode--seekset",
    "text": "usz? File.seek(&self, isz offset, Seek seek_mode = Seek.SET)"
  }, {
    "depth": 3,
    "slug": "void-filewrite_byteself-char-c-dynamic",
    "text": "void? File.write_byte(&self, char c) @dynamic"
  }, {
    "depth": 3,
    "slug": "void-filecloseself-inline-dynamic",
    "text": "void? File.close(&self) @inline @dynamic"
  }, {
    "depth": 3,
    "slug": "bool-fileeofself-inline",
    "text": "bool File.eof(&self) @inline"
  }, {
    "depth": 3,
    "slug": "usz-filereadself-char-buffer",
    "text": "usz? File.read(&self, char[] buffer)"
  }, {
    "depth": 3,
    "slug": "usz-filewriteself-char-buffer",
    "text": "usz? File.write(&self, char[] buffer)"
  }, {
    "depth": 3,
    "slug": "char-fileread_byteself-dynamic",
    "text": "char? File.read_byte(&self) @dynamic"
  }, {
    "depth": 3,
    "slug": "char-load_bufferstring-filename-char-buffer",
    "text": "char[]? load_buffer(String filename, char[] buffer)"
  }, {
    "depth": 3,
    "slug": "char-load_newstring-filename-allocator-allocator--allocatorheap",
    "text": "char[]? load_new(String filename, Allocator allocator = allocator::heap())"
  }, {
    "depth": 3,
    "slug": "char-load_tempstring-filename",
    "text": "char[]? load_temp(String filename)"
  }, {
    "depth": 3,
    "slug": "void-fileflushself-dynamic",
    "text": "void? File.flush(&self) @dynamic"
  }, {
    "depth": 2,
    "slug": "stdcollectionslist-type",
    "text": "std::collections::list({ Type })"
  }, {
    "depth": 3,
    "slug": "listpushlist-list-type-element-append",
    "text": "List.push(List *list, Type element), append(...)"
  }, {
    "depth": 3,
    "slug": "type-listpoplist-list",
    "text": "Type List.pop(List* list)"
  }, {
    "depth": 3,
    "slug": "type-listpop_firstlist-list",
    "text": "Type List.pop_first(List *list)"
  }, {
    "depth": 3,
    "slug": "void-listremove_atlist-list-usz-index",
    "text": "void List.remove_at(List *list, usz index)"
  }, {
    "depth": 3,
    "slug": "void-listinsert_atlist-list-usz-index-type-type",
    "text": "void List.insert_at(List *list, usz index, Type type)"
  }, {
    "depth": 3,
    "slug": "void-listpush_frontlist-list-type-type",
    "text": "void List.push_front(List *list, Type type)"
  }, {
    "depth": 3,
    "slug": "void-listremove_lastlist-list",
    "text": "void List.remove_last(List* list)"
  }, {
    "depth": 3,
    "slug": "void-listremove_firstlist-list",
    "text": "void List.remove_first(List *list)"
  }, {
    "depth": 3,
    "slug": "type-listfirstlist-list",
    "text": "Type* List.first(List* list)"
  }, {
    "depth": 3,
    "slug": "type-listlastlist-list",
    "text": "Type* List.last(List *list)"
  }, {
    "depth": 3,
    "slug": "listis_emptylist-list",
    "text": "List.is_empty(List *list)"
  }, {
    "depth": 3,
    "slug": "usz-listlenlist-list",
    "text": "usz List.len(List *list)"
  }, {
    "depth": 3,
    "slug": "type-listgetlist-list-usz-index",
    "text": "Type List.get(List *list, usz index)"
  }, {
    "depth": 3,
    "slug": "void-listfreelist-list",
    "text": "void List.free(List *list)"
  }, {
    "depth": 3,
    "slug": "void-listswaplist-list-usz-i-usz-j",
    "text": "void List.swap(List *list, usz i, usz j)"
  }];
}
const __usesAstroImage = true;
function _createMdxContent(props) {
  const {Fragment} = props.components || ({});
  if (!Fragment) _missingMdxReference("Fragment");
  return createVNode(Fragment, {
    "set:html": "<p>The standard library is currently in development, so frequent changes will occur. Note that all std::core modules and\nsub modules are implicitly imported.</p>\n<h2 id=\"stdcorebuiltin\"><code dir=\"auto\">std::core::builtin</code></h2>\n<p>All functions and macros in this library can be used without path qualifiers.</p>\n<h3 id=\"void-panicchar-message-char-file-char-function-uint-line\"><code dir=\"auto\">void panic(char* message, char *file, char *function, uint line)</code></h3>\n<p>Default function called when the asserts fails.</p>\n<h3 id=\"void-swapa-b\"><code dir=\"auto\">void @swap(&#x26;a, &#x26;b)</code></h3>\n<p>Swap values in <code dir=\"auto\">a</code> and <code dir=\"auto\">b</code>.</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">5</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">swap</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a, b);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, a);</span><span style=\"--0:#809191;--1:#5E6578\"> // Prints 5</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int a = 3;int b = 5;@swap(a, b);io::printfn(&#x22;%d&#x22;, a); // Prints 5\"><div></div></button></div></figure></div>\n<h3 id=\"anycastany-v-type\"><code dir=\"auto\">anycast(any v, $Type)</code></h3>\n<p>Optionally cast the value <code dir=\"auto\">v</code> to type <code dir=\"auto\">$Type*</code> on failure returns <code dir=\"auto\">CastResult.TYPE_MISMATCH</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">any a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">b;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">float</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">anycast</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a, </span><span style=\"--0:#C792EA;--1:#8D46B4\">float</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\"> // Will return TYPE_MISMATCH</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> d </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">anycast</span><span style=\"--0:#D6DEEB;--1:#403F53\">(a, </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">     // Works!</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int b;any a = &#x26;b;float*? c = anycast(a, float); // Will return TYPE_MISMATCHint*? d = anycast(a, int);     // Works!\"><div></div></button></div></figure></div>\n<h3 id=\"void-unreachablestring--unreachable-statement-reached\"><code dir=\"auto\">void unreachable($string = \"Unreachable statement reached.\")</code></h3>\n<p>Mark a code path as unreachable.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (x)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">bar</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#809191;--1:#5E6578\">// Should never happen.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#82AAFF;--1:#3C63B3\">unreachable</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">x should have been 0 or 1</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"switch (x){    case 0:        foo();    case 1:        bar();    default:        // Should never happen.        unreachable(&#x22;x should have been 0 or 1&#x22;);}\"><div></div></button></div></figure></div>\n<p>On safe mode this will throw a runtime panic when reached. For release mode the\ncompiler will assume this case never happens.</p>\n<h3 id=\"bitcastvalue-type\"><code dir=\"auto\">bitcast(value, $Type)</code></h3>\n<p>Do a bitcast of a value to <code dir=\"auto\">$Type</code>, requires that the types are of the same memory size.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">float</span><span style=\"--0:#D6DEEB;--1:#403F53\"> x </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1.0</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> y </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">bitcast</span><span style=\"--0:#D6DEEB;--1:#403F53\">(x, </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\"> // y = 0x3f800000</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"float x = 1.0;int y = bitcast(x, int); // y = 0x3f800000\"><div></div></button></div></figure></div>\n<h3 id=\"enum_by_nametype-enum_name\"><code dir=\"auto\">enum_by_name($Type, enum_name)</code></h3>\n<p>Optionally returns the enum value with the given name. <code dir=\"auto\">$Type</code> must be an enum. Returns <code dir=\"auto\">SearchResult.MISSING</code>\non failure.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Foo { ABC, CDE, EFG }</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Foo f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">enum_by_name(Foo, </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">CDE</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">)</span><span style=\"--0:#C792EA;--1:#8D46B4\">!</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#809191;--1:#5E6578\">// same as Foo f = Foo.CDE;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"enum Foo { ABC, CDE, EFG }fn void? test(){    Foo f = enum_by_name(Foo, &#x22;CDE&#x22;)!;    // same as Foo f = Foo.CDE;}\"><div></div></button></div></figure></div>\n<h3 id=\"void-scopevariable-body\"><code dir=\"auto\">void @scope(&#x26;variable; @body)</code></h3>\n<p>Scopes a variable:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int a = 3;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">@scope(a)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">a = 4;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">a++;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">};</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">// Prints a = 3</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">io::printfn(\"a = %d\", a, b);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int a = 3;@scope(a){    a = 4;    a++;};// Prints a = 3io::printfn(&#x22;a = %d&#x22;, a, b);\"><div></div></button></div></figure></div>\n<h3 id=\"less-greater-less_eq-greater_eq-equals\"><code dir=\"auto\">less</code>, <code dir=\"auto\">greater</code>, <code dir=\"auto\">less_eq</code>, <code dir=\"auto\">greater_eq</code>, <code dir=\"auto\">equals</code></h3>\n<p>All macros take two values and compare them. Any type implementing <code dir=\"auto\">Type.less</code>\nor <code dir=\"auto\">Type.compare_to</code> may be compared (or if the type implements <code dir=\"auto\">&#x3C;</code>). Types\nimplementing <code dir=\"auto\">Type.equals</code> may use <code dir=\"auto\">equals</code> even if neither <code dir=\"auto\">less</code> nor <code dir=\"auto\">compare_to</code>\nare implemented.</p>\n<h3 id=\"faults\">Faults</h3>\n<ul>\n<li><code dir=\"auto\">IteratorResult</code> returned when reaching the end of an iterator.</li>\n<li><code dir=\"auto\">SearchResult</code> used when a search fails.</li>\n<li><code dir=\"auto\">CastResult</code> when an anycast fails.</li>\n</ul>\n<h2 id=\"stdcoreenv\"><code dir=\"auto\">std::core::env</code></h2>\n<h3 id=\"constants\">Constants</h3>\n<ul>\n<li><code dir=\"auto\">OS_TYPE</code> the OS type compiled for.</li>\n<li><code dir=\"auto\">COMPILER_OPT_LEVEL</code> the optimization level used.</li>\n<li><code dir=\"auto\">I128_SUPPORT</code> true if int128 support is available.</li>\n<li><code dir=\"auto\">COMPILER_SAFE_MODE</code> true if compiled with safety checks.</li>\n</ul>\n<h2 id=\"stdcoremem\"><code dir=\"auto\">std::core::mem</code></h2>\n<h3 id=\"malloc-malloc_aligned\"><code dir=\"auto\">malloc</code>, <code dir=\"auto\">malloc_aligned</code></h3>\n<p>Allocate the given number of bytes. <code dir=\"auto\">malloc</code> will panic on out of memory,\nwhereas <code dir=\"auto\">malloc_aligned</code> returns an optional value.\n<code dir=\"auto\">malloc_aligned</code> adds an alignment, which must be a power of 2. Any pointer\nallocated using <code dir=\"auto\">malloc_aligned</code> must be freed using <code dir=\"auto\">free_aligned</code> rather\nthe normal <code dir=\"auto\">free</code> or memory corruption may result.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">char</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> data </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">malloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">8</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">16</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">]</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> data2 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">malloc_aligned</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">16</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">), </span><span style=\"--0:#F78C6C;--1:#AA0982\">128</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"char* data = malloc(8);int[<16>]*? data2 = malloc_aligned(16 * int.sizeof), 128);\"><div></div></button></div></figure></div>\n<h3 id=\"newtype-initializer-new_alignedtype-initializer\"><code dir=\"auto\">new($Type, #initializer), new_aligned($Type, #initializer)</code></h3>\n<p>This allocates a single element of $Type, returning the pointer. An optional initializer may be added, which\nimmediately initializes the value to that of the initializer.</p>\n<p>If no initializer is provided, it is zero initialized. <code dir=\"auto\">new_aligned</code> works the same but for overaligned types, such allocations\nmust be freed using <code dir=\"auto\">free_aligned</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mem::</span><span style=\"--0:#7FDBCA;--1:#097174\">new</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mem::</span><span style=\"--0:#7FDBCA;--1:#097174\">new</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo, { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> });</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int* a = mem::new(int);Foo* foo = mem::new(Foo, { 1, 2 });\"><div></div></button></div></figure></div>\n<h3 id=\"alloctype-alloc_alignedtype\"><code dir=\"auto\">alloc($Type)</code>, <code dir=\"auto\">alloc_aligned($Type)</code></h3>\n<p>Allocates a single element of $Type, same as <code dir=\"auto\">new</code>, but without initializing the data.</p>\n<h3 id=\"new_arraytype-usz-elements-new_array_alignedtype-usz-elements\"><code dir=\"auto\">new_array($Type, usz elements)</code>, <code dir=\"auto\">new_array_aligned($Type, usz elements)</code></h3>\n<p>Allocates a slice of <code dir=\"auto\">elements</code> number of elements, returning\na slice of the given length. Elements are zero initialized. <code dir=\"auto\">new_array_aligned</code> is used for\ntypes that exceed standard alignment.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] ints </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mem::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">new_array</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">100</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\"> // Allocated int[100] on the heap, zero initialized.</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[] ints = mem::new_array(int, 100); // Allocated int[100] on the heap, zero initialized.\"><div></div></button></div></figure></div>\n<h3 id=\"alloc_arraytype-usz-elements-alloc_array_alignedtype-usz-elements\"><code dir=\"auto\">alloc_array($Type, usz elements)</code>, <code dir=\"auto\">alloc_array_aligned($Type, usz elements)</code></h3>\n<p>Same as <code dir=\"auto\">new_array</code> but without initialization.</p>\n<h3 id=\"calloc-calloc_checked-calloc_aligned\"><code dir=\"auto\">calloc</code>, <code dir=\"auto\">calloc_checked</code>, <code dir=\"auto\">calloc_aligned</code></h3>\n<p>Identical to the <code dir=\"auto\">malloc</code> variants, except the data is guaranteed to be zeroed out.</p>\n<h3 id=\"realloc-realloc_checked-realloc_aligned\"><code dir=\"auto\">realloc</code>, <code dir=\"auto\">realloc_checked</code>, <code dir=\"auto\">realloc_aligned</code></h3>\n<p>Resizes memory allocated using <code dir=\"auto\">malloc</code> or <code dir=\"auto\">calloc</code>. Any extra data is\nguaranteed to be zeroed out. <code dir=\"auto\">realloc_aligned</code> can only be used with\npointers created using <code dir=\"auto\">calloc_aligned</code> or <code dir=\"auto\">alloc_aligned</code>.</p>\n<h3 id=\"free-free_aligned\"><code dir=\"auto\">free</code>, <code dir=\"auto\">free_aligned</code></h3>\n<p>Frees memory allocated using <code dir=\"auto\">malloc</code> or <code dir=\"auto\">calloc</code>. Any memory allocated using “_aligned” variants\nmust be freed using <code dir=\"auto\">free_aligned</code>.</p>\n<h3 id=\"scopedallocator-allocator-body\"><code dir=\"auto\">@scoped(Allocator allocator; @body())</code></h3>\n<p>Swaps the current memory allocator for the duration of the call.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">DynamicArenaAllocator dynamic_arena;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">dynamic_arena.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">init</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">1024</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">mem::@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">scoped</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#7FDBCA;--1:#097174\">&#x26;</span><span style=\"--1:#403F53\"><span style=\"--0:#D7DBE0\">dynamic_arena</span><span style=\"--0:#D6DEEB\">)</span></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#809191;--1:#5E6578\">// This allocation uses the dynamic arena</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">malloc(Foo)</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">};</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Release any dynamic arena memory.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">dynamic_arena.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">destroy</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"DynamicArenaAllocator dynamic_arena;dynamic_arena.init(1024);mem::@scoped(&#x26;dynamic_arena){    // This allocation uses the dynamic arena    Foo* f = malloc(Foo);};// Release any dynamic arena memory.dynamic_arena.destroy();\"><div></div></button></div></figure></div>\n<h3 id=\"tscoped-body\"><code dir=\"auto\">@tscoped(; @body())</code></h3>\n<p>Same as @scoped, but uses the temporary allocator rather than any\narbitrary allocator.</p>\n<h3 id=\"void-tmallocusz-size-usz-alignment--0\"><code dir=\"auto\">void* tmalloc(usz size, usz alignment = 0)</code></h3>\n<p>Allocates memory using the temporary allocator. Panic on failure. It has type\nvariants similar to <code dir=\"auto\">malloc</code>, so <code dir=\"auto\">tmalloc(Type)</code> would create a <code dir=\"auto\">Type*</code> using\nthe temporary allocator.</p>\n<h3 id=\"void-tcallocusz-size-usz-alignment--0\"><code dir=\"auto\">void* tcalloc(usz size, usz alignment = 0)</code></h3>\n<p>Same as <code dir=\"auto\">tmalloc</code> but clears the memory.</p>\n<h3 id=\"void-treallocvoid-ptr-usz-size-usz-alignment--0\"><code dir=\"auto\">void* trealloc(void* ptr, usz size, usz alignment = 0)</code></h3>\n<p><code dir=\"auto\">realloc</code> but on memory received using <code dir=\"auto\">tcalloc</code> or <code dir=\"auto\">tmalloc</code>.</p>\n<h3 id=\"tnew-temp_alloc-temp_array-talloc_array\"><code dir=\"auto\">tnew</code>, <code dir=\"auto\">temp_alloc</code>, <code dir=\"auto\">temp_array</code>, <code dir=\"auto\">talloc_array</code></h3>\n<p>Same as the <code dir=\"auto\">new</code>, <code dir=\"auto\">alloc</code>, <code dir=\"auto\">new_array</code> and <code dir=\"auto\">alloc_array</code> respectively.</p>\n<h3 id=\"void-poolbody\"><code dir=\"auto\">void @pool(;@body)</code></h3>\n<p>Opens a temporary memory scope.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">pool</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// This allocation uses the dynamic arena</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">tmalloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">};</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"@pool(){    // This allocation uses the dynamic arena    Foo* f = tmalloc(Foo);};\"><div></div></button></div></figure></div>\n<h3 id=\"volatile_loadx\"><code dir=\"auto\">@volatile_load(&#x26;x)</code></h3>\n<p>Returns the value in <code dir=\"auto\">x</code> using a volatile load.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Both loads will always happen:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> y </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">volatile_load</span><span style=\"--0:#D6DEEB;--1:#403F53\">(my_global);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">y </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">volatile_load</span><span style=\"--0:#D6DEEB;--1:#403F53\">(my_global);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Both loads will always happen:int y = @volatile_load(my_global);y = @volatile_load(my_global);\"><div></div></button></div></figure></div>\n<h3 id=\"volatile_storex-y\"><code dir=\"auto\">@volatile_store(&#x26;x, y)</code></h3>\n<p>Store the value <code dir=\"auto\">y</code> in <code dir=\"auto\">x</code> using a volatile store.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Both stores will always happen:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">volatile_store</span><span style=\"--0:#D6DEEB;--1:#403F53\">(y, </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">volatile_store</span><span style=\"--0:#D6DEEB;--1:#403F53\">(y, </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Both stores will always happen:@volatile_store(y, 1);@volatile_store(y, 1);\"><div></div></button></div></figure></div>\n<h3 id=\"usz-aligned_offsetusz-offset-usz-alignment\"><code dir=\"auto\">usz aligned_offset(usz offset, usz alignment)</code></h3>\n<p>Returns an aligned size based on the current offset. The alignment\nmust be a power of two. E.g. <code dir=\"auto\">mem::aligned_offset(17, 8)</code> would return <code dir=\"auto\">24</code></p>\n<h3 id=\"usz-aligned_pointervoid-ptr-usz-alignment\"><code dir=\"auto\">usz aligned_pointer(void* ptr, usz alignment)</code></h3>\n<p>Returns a pointer aligned to the given alignment, using <code dir=\"auto\">aligned_offset</code>.</p>\n<h3 id=\"bool-ptr_is_alignedvoid-ptr-usz-alignment\"><code dir=\"auto\">bool ptr_is_aligned(void* ptr, usz alignment)</code></h3>\n<p>Return true if the pointer is aligned, false otherwise.</p>\n<h3 id=\"void-copyvoid-dst-void-src-usz-len-usz-dst_align--0-usz-src_align--0-bool-is_volatile--false\"><code dir=\"auto\">void copy(void* dst, void* src, usz len, usz $dst_align = 0, usz $src_align = 0, bool $is_volatile = false)</code></h3>\n<p>Copies bytes from one pointer to another. It may optionally be set as volatile,\nin which case the copy may not be optimized away. Furthermore the source\nand destination alignment may be used.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">tmalloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(data_size);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">mem::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">copy</span><span style=\"--0:#D6DEEB;--1:#403F53\">(f, </span><span style=\"--0:#C5E478;--1:#3C63B3\">slice</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">ptr</span><span style=\"--0:#D6DEEB;--1:#403F53\">, size);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Foo* f = tmalloc(data_size);mem::copy(f, slice.ptr, size);\"><div></div></button></div></figure></div>\n<h3 id=\"void-setvoid-dst-char-val-usz-len-usz-dst_align--0-bool-is_volatile--false\"><code dir=\"auto\">void set(void* dst, char val, usz len, usz $dst_align = 0, bool $is_volatile = false)</code></h3>\n<p>Sets bytes to a value. This operation may be aligned and/or volatile. See the <code dir=\"auto\">copy</code> method.</p>\n<h3 id=\"void-clearvoid-dst-usz-len-usz-dst_align--0-bool-is_volatile--false\"><code dir=\"auto\">void clear(void* dst, usz len, usz $dst_align = 0, bool $is_volatile = false)</code></h3>\n<p>Sets bytes to zero. This operation may be aligned and/or volatile. See the <code dir=\"auto\">copy</code> method.</p>\n<h3 id=\"clonevalue\"><code dir=\"auto\">@clone(&#x26;value)</code></h3>\n<p>Makes a shallow copy of a value using the regular allocator.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> ...</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">clone</span><span style=\"--0:#D6DEEB;--1:#403F53\">(f);</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Foo f = ...return @clone(f);\"><div></div></button></div></figure></div>\n<h3 id=\"tclonevalue\"><code dir=\"auto\">@tclone(&#x26;value)</code></h3>\n<p>Same as <code dir=\"auto\">@clone</code> but uses the temporary allocator.</p>\n<h2 id=\"stdcoretypes\"><code dir=\"auto\">std::core::types</code></h2>\n<h3 id=\"bool-is_comparable_valuetype\"><code dir=\"auto\">bool is_comparable_value($Type)</code></h3>\n<p>Return true if the type can be used with comparison operators.</p>\n<h3 id=\"bool-is_equatable_valuevalue\"><code dir=\"auto\">bool is_equatable_value(value)</code></h3>\n<p>Return <code dir=\"auto\">true</code> if the value can be compared using the <code dir=\"auto\">equals</code> macro.</p>\n<h3 id=\"bool-is_equatable_valuevalue-1\"><code dir=\"auto\">bool is_equatable_value(value)</code></h3>\n<p>Return <code dir=\"auto\">true</code> if the value can be compared using the comparison macros.</p>\n<h3 id=\"kind_is_inttypekind-kind\"><code dir=\"auto\">kind_is_int(TypeKind kind)</code></h3>\n<h3 id=\"any_to_intany-v-type\"><code dir=\"auto\">any_to_int(any* v, $Type)</code></h3>\n<p>Returns an optional value of <code dir=\"auto\">$Type</code> if the any value losslessly\nmay be converted into the given type. Returns a <code dir=\"auto\">ConversionResult</code> otherwise.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">any</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> v </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;&#x26;</span><span style=\"--0:#F78C6C;--1:#AA0982\">128</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">short</span><span style=\"--0:#D6DEEB;--1:#403F53\"> y </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">any_to_int</span><span style=\"--0:#D6DEEB;--1:#403F53\">(v, </span><span style=\"--0:#C792EA;--1:#8D46B4\">short</span><span style=\"--0:#D6DEEB;--1:#403F53\">)</span><span style=\"--0:#C792EA;--1:#8D46B4\">!!</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Works</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">ichar z </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">any_to_int</span><span style=\"--0:#D6DEEB;--1:#403F53\">(v, ichar)</span><span style=\"--0:#C792EA;--1:#8D46B4\">!!</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Panics VALUE_OUT_OF_RANGE</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"any* v = &#x26;&#x26;128;short y = any_to_int(v, short)!!; // Worksichar z = any_to_int(v, ichar)!!; // Panics VALUE_OUT_OF_RANGE\"><div></div></button></div></figure></div>\n<h2 id=\"stdcorestrconv\"><code dir=\"auto\">std::core::str::conv</code></h2>\n<h3 id=\"usz-char32_to_utf8char32-c-char-output-usz-available\"><code dir=\"auto\">usz? char32_to_utf8(Char32 c, char* output, usz available)</code></h3>\n<p>Convert a UTF32 codepoint to an UTF8 buffer. <code dir=\"auto\">size</code> has the number of\nwritable bytes left. It returns the number of bytes used, or\n<code dir=\"auto\">UnicodeResult.CONVERSION_FAILED</code> if the buffer is too small.</p>\n<h3 id=\"void-char32_to_utf16_unsafechar32-c-char16-output\"><code dir=\"auto\">void char32_to_utf16_unsafe(Char32 c, Char16** output)</code></h3>\n<p>Convert a UTF32 codepoint to an UTF16 buffer without bounds checking,\nmoving the output pointer 1 or 2 steps.</p>\n<h2 id=\"stdio\"><code dir=\"auto\">std::io</code></h2>\n<h3 id=\"string-readlinestream--iostdin-allocator-allocator--allocatorheap\"><code dir=\"auto\">String? readline(stream = io::stdin(), Allocator allocator = allocator::heap())</code></h3>\n<p>Read a <code dir=\"auto\">String?</code> from a file stream, which is standard input (stdin) by default, reads to the next newline character <code dir=\"auto\">\\n</code> or to the end of stream.\n<code dir=\"auto\">Readline</code> returns an <a href=\"/language-common/optionals-essential/#what-is-an-optional\">Optional</a> string.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">hello_name</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">String</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> name </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">readline</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (</span><span style=\"--0:#C792EA;--1:#8D46B4\">catch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> name)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Name was: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#ECC48D;--1:#9B504E\">.</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, name);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;fn void? hello_name(){    String? name = io::readline();    if (catch excuse = name)    {        return excuse?;    }    io::printfn(&#x22;Name was: %s.&#x22;, name);}\"><div></div></button></div></figure></div>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p><code dir=\"auto\">\\r</code> will be filtered from the String.</p></section></aside>\n<h3 id=\"string-treadlinestream--iostdin\"><code dir=\"auto\">String? treadline(stream = io::stdin())</code></h3>\n<p>Read a <code dir=\"auto\">String?</code> from a file stream which is standard input (stdin) by default, Reads to the next newline character <code dir=\"auto\">\\n</code> or to the end of stream. <code dir=\"auto\">Treadline</code> returns an <a href=\"/language-common/optionals-essential/#what-is-an-optional\">Optional</a> string. The temporary allocator is used by <code dir=\"auto\">Treadline</code>, in contrast the <code dir=\"auto\">readline</code> defaults to the heap allocator, but is configurable to other allocators.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">hello_name</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">String</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\"> name </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">io::treadline</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (catch excuse </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> name) {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> excuse</span><span style=\"--0:#C792EA;--1:#8D46B4\">?</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">io::printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Hello </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#ECC48D;--1:#9B504E\">! Hope you have a great day</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, name);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;fn void? hello_name(){    String? name = io::treadline();    if (catch excuse = name) {        return excuse?;    }    io::printfn(&#x22;Hello %s! Hope you have a great day&#x22;, name);}\"><div></div></button></div></figure></div>\n<aside aria-label=\"Note\" class=\"starlight-aside starlight-aside--note\"><p class=\"starlight-aside__title\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"starlight-aside__icon\"><path d=\"M12 11C11.7348 11 11.4804 11.1054 11.2929 11.2929C11.1054 11.4804 11 11.7348 11 12V16C11 16.2652 11.1054 16.5196 11.2929 16.7071C11.4804 16.8946 11.7348 17 12 17C12.2652 17 12.5196 16.8946 12.7071 16.7071C12.8946 16.5196 13 16.2652 13 16V12C13 11.7348 12.8946 11.4804 12.7071 11.2929C12.5196 11.1054 12.2652 11 12 11ZM12.38 7.08C12.1365 6.97998 11.8635 6.97998 11.62 7.08C11.4973 7.12759 11.3851 7.19896 11.29 7.29C11.2017 7.3872 11.1306 7.49882 11.08 7.62C11.024 7.73868 10.9966 7.86882 11 8C10.9992 8.13161 11.0245 8.26207 11.0742 8.38391C11.124 8.50574 11.1973 8.61656 11.29 8.71C11.3872 8.79833 11.4988 8.86936 11.62 8.92C11.7715 8.98224 11.936 9.00632 12.099 8.99011C12.2619 8.97391 12.4184 8.91792 12.5547 8.82707C12.691 8.73622 12.8029 8.61328 12.8805 8.46907C12.9582 8.32486 12.9992 8.16378 13 8C12.9963 7.73523 12.8927 7.48163 12.71 7.29C12.6149 7.19896 12.5028 7.12759 12.38 7.08ZM12 2C10.0222 2 8.08879 2.58649 6.4443 3.6853C4.79981 4.78412 3.51809 6.3459 2.76121 8.17317C2.00433 10.0004 1.8063 12.0111 2.19215 13.9509C2.578 15.8907 3.53041 17.6725 4.92894 19.0711C6.32746 20.4696 8.10929 21.422 10.0491 21.8079C11.9889 22.1937 13.9996 21.9957 15.8268 21.2388C17.6541 20.4819 19.2159 19.2002 20.3147 17.5557C21.4135 15.9112 22 13.9778 22 12C22 10.6868 21.7413 9.38642 21.2388 8.17317C20.7363 6.95991 19.9997 5.85752 19.0711 4.92893C18.1425 4.00035 17.0401 3.26375 15.8268 2.7612C14.6136 2.25866 13.3132 2 12 2ZM12 20C10.4178 20 8.87104 19.5308 7.55544 18.6518C6.23985 17.7727 5.21447 16.5233 4.60897 15.0615C4.00347 13.5997 3.84504 11.9911 4.15372 10.4393C4.4624 8.88743 5.22433 7.46197 6.34315 6.34315C7.46197 5.22433 8.88743 4.4624 10.4393 4.15372C11.9911 3.84504 13.5997 4.00346 15.0615 4.60896C16.5233 5.21447 17.7727 6.23984 18.6518 7.55544C19.5308 8.87103 20 10.4177 20 12C20 14.1217 19.1572 16.1566 17.6569 17.6569C16.1566 19.1571 14.1217 20 12 20Z\"></path></svg>Note</p><section class=\"starlight-aside__content\"><p><code dir=\"auto\">\\r</code> will be filtered from the String.</p></section></aside>\n<h3 id=\"void-printx-void-printnx-\"><code dir=\"auto\">void print(x)</code>, <code dir=\"auto\">void printn(x = \"\")</code></h3>\n<p>Print a value to stdout works for the majority of types, including structs, which can be helpful for debugging.\nThe <code dir=\"auto\">printn</code> variant appends a newline.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Heat</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">WARM</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">WARMER</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">REALLY_WARM</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] vec </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Heat weather </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> WARM;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">5</span><span style=\"--0:#D6DEEB;--1:#403F53\">] fib </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">String dialogue </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">secret</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">print</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Hello</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">   // Hello</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">print</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">20</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">        // 20</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">print</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">2.2</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">       // 2.200000</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">print</span><span style=\"--0:#D6DEEB;--1:#403F53\">(vec);</span><span style=\"--0:#809191;--1:#5E6578\">       // [&#x3C;4, 2>]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">print</span><span style=\"--0:#D6DEEB;--1:#403F53\">(weather);</span><span style=\"--0:#809191;--1:#5E6578\">   // WARM</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">print</span><span style=\"--0:#D6DEEB;--1:#403F53\">(fib);</span><span style=\"--0:#809191;--1:#5E6578\">       // [0, 1, 1, 2, 3]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">print</span><span style=\"--0:#D6DEEB;--1:#403F53\">(dialogue);</span><span style=\"--0:#809191;--1:#5E6578\">  // secret</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;enum Heat{    WARM,    WARMER,    REALLY_WARM,}fn void main(){    int[<2>] vec = { 4, 2 };    Heat weather = WARM;    int[5] fib = { 0, 1, 1, 2, 3 };    String dialogue = &#x22;secret&#x22;;    io::print(&#x22;Hello&#x22;);   // Hello    io::print(20);        // 20    io::print(2.2);       // 2.200000    io::print(vec);       // [<4, 2>]    io::print(weather);   // WARM    io::print(fib);       // [0, 1, 1, 2, 3]    io::print(dialogue);  // secret}\"><div></div></button></div></figure></div>\n<h3 id=\"void-eprintx-void-eprintnx\"><code dir=\"auto\">void eprint(x)</code>, <code dir=\"auto\">void eprintn(x)</code></h3>\n<p>Print any value to stderr.\nThe <code dir=\"auto\">eprintn</code> variant appends a newline.</p>\n<p>See <code dir=\"auto\">print</code> for usage.</p>\n<h3 id=\"usz-printfstring-format-args-maydiscard\"><code dir=\"auto\">usz? printf(String format, args...) @maydiscard</code></h3>\n<p>Regular printf functionality: <code dir=\"auto\">%s</code>, <code dir=\"auto\">%x</code>, <code dir=\"auto\">%d</code>, <code dir=\"auto\">%f</code> and <code dir=\"auto\">%p</code> are supported.\nWill also print enums and vectors. Prints to stdout.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::io;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">enum</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Heat</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">WARM</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">WARMER</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">REALLY_WARM</span><span style=\"--0:#D6DEEB;--1:#403F53\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] vec </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Heat weather </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> REALLY_WARM;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">String dialogue </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Hello</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, dialogue);</span><span style=\"--0:#809191;--1:#5E6578\">  // Hello</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">20</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">        // 20</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%f</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">2.2</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">       // 2.200000</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, vec);</span><span style=\"--0:#809191;--1:#5E6578\">       // [&#x3C;4, 2>]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, weather);</span><span style=\"--0:#809191;--1:#5E6578\">   // REALLY_WARM</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::io;enum Heat{    WARM,    WARMER,    REALLY_WARM,}fn void main(){    int[<2>] vec = { 4, 2 };    Heat weather = REALLY_WARM;    String dialogue = &#x22;Hello&#x22;;    io::printfn(&#x22;%s&#x22;, dialogue);  // Hello    io::printfn(&#x22;%d&#x22;, 20);        // 20    io::printfn(&#x22;%f&#x22;, 2.2);       // 2.200000    io::printfn(&#x22;%s&#x22;, vec);       // [<4, 2>]    io::printfn(&#x22;%s&#x22;, weather);   // REALLY_WARM}\"><div></div></button></div></figure></div>\n<p>Also available as <code dir=\"auto\">printfn</code> which appends a newline.</p>\n<h3 id=\"usz-eprintfstring-format-args-maydiscard\"><code dir=\"auto\">usz? eprintf(String format, args...) @maydiscard</code></h3>\n<p>Regular printf functionality: <code dir=\"auto\">%s</code>, <code dir=\"auto\">%x</code>, <code dir=\"auto\">%d</code>, <code dir=\"auto\">%f</code> and <code dir=\"auto\">%p</code> are supported.\nWill also print enums and vectors. Prints to stderr.</p>\n<p>Also available as <code dir=\"auto\">eprintfn</code> which appends a newline.</p>\n<p>See <code dir=\"auto\">printf</code> for usage</p>\n<h3 id=\"char-bprintfchar-buffer-string-format-args-maydiscard\"><code dir=\"auto\">char[]? bprintf(char[] buffer, String format, args...) @maydiscard</code></h3>\n<p>Prints using a ‘printf’-style formatting string, to a string buffer.</p>\n<p>Returns a slice of the <code dir=\"auto\">buffer</code> argument with the resulting length.</p>\n<h3 id=\"usz-fprintout-x-usz-fprintnout-x-\"><code dir=\"auto\">usz? fprint(out, x)</code>, <code dir=\"auto\">usz? fprintn(out, x = \"\")</code></h3>\n<p>Print a value to a stream. <code dir=\"auto\">out</code> must implement <code dir=\"auto\">OutStream</code>.\nThe <code dir=\"auto\">fprintn</code> variant appends a newline.</p>\n<h3 id=\"usz-fprintfoutstream-out-string-format-args\"><code dir=\"auto\">usz? fprintf(OutStream out, String format, args...)</code></h3>\n<p>Prints to the specified OutStream using a ‘printf’-style formatting string.</p>\n<p>Returns the number of characters printed.</p>\n<p><code dir=\"auto\">fprintfn</code> appends a newline.</p>\n<h3 id=\"void-putcharchar-c-inline\"><code dir=\"auto\">void putchar(char c) @inline</code></h3>\n<p>Libc <code dir=\"auto\">putchar</code>, prints a single character to stdout.</p>\n<h3 id=\"usz-dstringappendfdstring-str-string-format-args-maydiscard\"><code dir=\"auto\">usz? DString.appendf(DString* str, String format, args...) @maydiscard</code></h3>\n<p>Same as printf but on dynamic strings.</p>\n<h3 id=\"file-stdout-file-stdin-file-stderr\"><code dir=\"auto\">File* stdout()</code>, <code dir=\"auto\">File* stdin()</code>, <code dir=\"auto\">File* stderr()</code></h3>\n<p>Return stdout, stdin and stderr respectively.</p>\n<h2 id=\"stdiofile\"><code dir=\"auto\">std::io::file</code></h2>\n<h3 id=\"file-openstring-filename-string-mode\"><code dir=\"auto\">File? open(String filename, String mode)</code></h3>\n<p>Open a file with the given file name with the given mode (r, w etc)</p>\n<h3 id=\"file-open_pathpath-path-string-mode\"><code dir=\"auto\">File? open_path(Path path, String mode)</code></h3>\n<p>Open a file pointed to by a Path struct, with the given mode.</p>\n<h3 id=\"bool-is_filestring-path\"><code dir=\"auto\">bool is_file(String path)</code></h3>\n<p>See whether the given path is a file.</p>\n<h3 id=\"usz-get_sizestring-path\"><code dir=\"auto\">usz? get_size(String path)</code></h3>\n<p>Get the size of a file.</p>\n<h3 id=\"void-deletestring-filename\"><code dir=\"auto\">void? delete(String filename)</code></h3>\n<p>Delete a file.</p>\n<h3 id=\"void-filereopenself-string-filename-string-mode\"><code dir=\"auto\">void? File.reopen(&#x26;self, String filename, String mode)</code></h3>\n<p>Reopen a file with a new filename and mode.</p>\n<h3 id=\"usz-fileseekself-isz-offset-seek-seek_mode--seekset\"><code dir=\"auto\">usz? File.seek(&#x26;self, isz offset, Seek seek_mode = Seek.SET)</code></h3>\n<p>Seek in a file. Based on the libc function.</p>\n<h3 id=\"void-filewrite_byteself-char-c-dynamic\"><code dir=\"auto\">void? File.write_byte(&#x26;self, char c) @dynamic</code></h3>\n<p>Write a single byte to a file.</p>\n<h3 id=\"void-filecloseself-inline-dynamic\"><code dir=\"auto\">void? File.close(&#x26;self) @inline @dynamic</code></h3>\n<p>Close a file, based on the libc function.</p>\n<h3 id=\"bool-fileeofself-inline\"><code dir=\"auto\">bool File.eof(&#x26;self) @inline</code></h3>\n<p>True if EOF has been reached. Based on the libc function.</p>\n<h3 id=\"usz-filereadself-char-buffer\"><code dir=\"auto\">usz? File.read(&#x26;self, char[] buffer)</code></h3>\n<p>Read into a buffer, based on the libc function.</p>\n<h3 id=\"usz-filewriteself-char-buffer\"><code dir=\"auto\">usz? File.write(&#x26;self, char[] buffer)</code></h3>\n<p>Write to a buffer, based on the libc function.</p>\n<h3 id=\"char-fileread_byteself-dynamic\"><code dir=\"auto\">char? File.read_byte(&#x26;self) @dynamic</code></h3>\n<p>Read a single byte from a file.</p>\n<h3 id=\"char-load_bufferstring-filename-char-buffer\"><code dir=\"auto\">char[]? load_buffer(String filename, char[] buffer)</code></h3>\n<p>Load up to buffer.len characters into the buffer.</p>\n<p>Returns IoError.OVERFLOW if the file is longer than the buffer.</p>\n<h3 id=\"char-load_newstring-filename-allocator-allocator--allocatorheap\"><code dir=\"auto\">char[]? load_new(String filename, Allocator allocator = allocator::heap())</code></h3>\n<p>Load the entire file into a new buffer.</p>\n<h3 id=\"char-load_tempstring-filename\"><code dir=\"auto\">char[]? load_temp(String filename)</code></h3>\n<p>Load the entire file into a buffer allocated using the temporary allocator.</p>\n<h3 id=\"void-fileflushself-dynamic\"><code dir=\"auto\">void? File.flush(&#x26;self) @dynamic</code></h3>\n<p>Flush a file, based on the libc function.</p>\n<h2 id=\"stdcollectionslist-type\"><code dir=\"auto\">std::collections::list({ Type })</code></h2>\n<p>Generic list module, elements are of <code dir=\"auto\">Type</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">import std::collections::list;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">alias MyIntList </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> List{ </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">...</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">MyIntList list;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">list.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">init</span><span style=\"--0:#D6DEEB;--1:#403F53\">(mem);</span><span style=\"--0:#809191;--1:#5E6578\"> // heap allocated</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">list.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">push</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">123</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">list.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">free</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"import std::collections::list;alias MyIntList = List{ int };...MyIntList list;list.init(mem); // heap allocatedlist.push(123);list.free();\"><div></div></button></div></figure></div>\n<h3 id=\"listpushlist-list-type-element-append\"><code dir=\"auto\">List.push(List *list, Type element)</code>, <code dir=\"auto\">append(...)</code></h3>\n<p>Append a single value to the list.</p>\n<h3 id=\"type-listpoplist-list\"><code dir=\"auto\">Type List.pop(List* list)</code></h3>\n<p>Removes and returns the last entry in the list.</p>\n<h3 id=\"type-listpop_firstlist-list\"><code dir=\"auto\">Type List.pop_first(List *list)</code></h3>\n<p>Removes the first entry in the list.</p>\n<h3 id=\"void-listremove_atlist-list-usz-index\"><code dir=\"auto\">void List.remove_at(List *list, usz index)</code></h3>\n<p>Removes the entry at <code dir=\"auto\">index</code>.</p>\n<h3 id=\"void-listinsert_atlist-list-usz-index-type-type\"><code dir=\"auto\">void List.insert_at(List *list, usz index, Type type)</code></h3>\n<p>Inserts a value at <code dir=\"auto\">index</code>.</p>\n<h3 id=\"void-listpush_frontlist-list-type-type\"><code dir=\"auto\">void List.push_front(List *list, Type type)</code></h3>\n<p>Inserts a value to the front of the list.</p>\n<h3 id=\"void-listremove_lastlist-list\"><code dir=\"auto\">void List.remove_last(List* list)</code></h3>\n<p>Remove the last value of the list.</p>\n<h3 id=\"void-listremove_firstlist-list\"><code dir=\"auto\">void List.remove_first(List *list)</code></h3>\n<p>Remove the first element in the list.</p>\n<h3 id=\"type-listfirstlist-list\"><code dir=\"auto\">Type* List.first(List* list)</code></h3>\n<p>Return the first element in the list if available.</p>\n<h3 id=\"type-listlastlist-list\"><code dir=\"auto\">Type* List.last(List *list)</code></h3>\n<p>Return the last element in the list if available.</p>\n<h3 id=\"listis_emptylist-list\"><code dir=\"auto\">List.is_empty(List *list)</code></h3>\n<p>Return <code dir=\"auto\">true</code> if the list is empty.</p>\n<h3 id=\"usz-listlenlist-list\"><code dir=\"auto\">usz List.len(List *list)</code></h3>\n<p>Return the number of elements in the list.</p>\n<h3 id=\"type-listgetlist-list-usz-index\"><code dir=\"auto\">Type List.get(List *list, usz index)</code></h3>\n<p>Return the value at <code dir=\"auto\">index</code>.</p>\n<h3 id=\"void-listfreelist-list\"><code dir=\"auto\">void List.free(List *list)</code></h3>\n<p>Free all memory associated with this list.</p>\n<h3 id=\"void-listswaplist-list-usz-i-usz-j\"><code dir=\"auto\">void List.swap(List *list, usz i, usz j)</code></h3>\n<p>Swap two elements in the list.</p>"
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + ("component" ) + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
const url = "src/content/docs/Standard%20Library/index.mdx";
const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Standard Library/index.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components, "astro-image":  props.components?.img ?? $$Image },
});
Content[Symbol.for('mdx-component')] = true;
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);
Content.moduleId = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Standard Library/index.mdx";
__astro_tag_component__(Content, 'astro:jsx');

export { Content, __usesAstroImage, Content as default, file, frontmatter, getHeadings, url };
