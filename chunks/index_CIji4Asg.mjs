import { F as Fragment, _ as __astro_tag_component__, l as createVNode } from './astro/server_afRpe8AA.mjs';
import '@astrojs/internal-helpers/path';
import { $ as $$Image } from './_astro_assets_BVH1XDQ-.mjs';
import 'clsx';

const frontmatter = {
  "title": "Frequently Asked Questions",
  "description": "Frequently asked questions about C3",
  "sidebar": {
    "order": 700
  }
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "standard-library",
    "text": "Standard library"
  }, {
    "depth": 2,
    "slug": "language-features",
    "text": "Language features"
  }, {
    "depth": 2,
    "slug": "memory-management",
    "text": "Memory management"
  }, {
    "depth": 2,
    "slug": "interfacing-with-c-code",
    "text": "Interfacing with C code"
  }, {
    "depth": 2,
    "slug": "patterns",
    "text": "Patterns"
  }, {
    "depth": 2,
    "slug": "platform-support",
    "text": "Platform support"
  }, {
    "depth": 2,
    "slug": "syntax--language-design",
    "text": "Syntax & Language design"
  }, {
    "depth": 2,
    "slug": "cross-compiling-to-windows-from-linux",
    "text": "Cross-compiling To Windows From Linux"
  }];
}
const __usesAstroImage = true;
function _createMdxContent(props) {
  const {Fragment} = props.components || ({});
  if (!Fragment) _missingMdxReference("Fragment");
  return createVNode(Fragment, {
    "set:html": "<h2 id=\"standard-library\">Standard library</h2>\n<p><strong>Q:</strong> What are the most fundamental modules in the standard library?</p>\n<p><strong>A:</strong> By default C3 will implicitly import anything in <code dir=\"auto\">std::core</code> into\nyour files. It contains string functions, allocators and conveniences for\ndoing type introspection. The latter is in particular useful when writing\ncontracts for macros:</p>\n<ul>\n<li><code dir=\"auto\">std::core::array</code> functions for working with arrays.</li>\n<li><code dir=\"auto\">std::core::builtin</code> contains functions that are to be used without a module\nprefix, <code dir=\"auto\">unreachable()</code>, <code dir=\"auto\">bitcast()</code>, <code dir=\"auto\">@catch()</code> and <code dir=\"auto\">@ok()</code>\nare especially important.</li>\n<li><code dir=\"auto\">std::core::cinterop</code> contains types which will match the C types on the platform.</li>\n<li><code dir=\"auto\">std::core::dstring</code> Has the dynamic string type.</li>\n<li><code dir=\"auto\">std::core::mem</code> contains <code dir=\"auto\">malloc</code> etc, as well as functions for atomic\nand volatile load / store.</li>\n<li><code dir=\"auto\">std::core::string</code> has all string functionality, including conversions,\nsplitting and searching strings.</li>\n</ul>\n<p>Aside from the <code dir=\"auto\">std::core</code> module, <code dir=\"auto\">std::collections</code> is important as it\nholds various containers. Of those the generic <code dir=\"auto\">List</code> type in <code dir=\"auto\">std::collections::list</code>\nand the <code dir=\"auto\">HashMap</code> in <code dir=\"auto\">std::collections::map</code> are very frequently used.</p>\n<p>IO is a must, and <code dir=\"auto\">std::io</code> contains <code dir=\"auto\">std::io::file</code> for working with files,\n<code dir=\"auto\">std::io::path</code> for working with paths. <code dir=\"auto\">std::io</code> itself contains\nfunctionality to writing to streams in various ways. Useful streams can\nbe found in the <code dir=\"auto\">stream</code> sub folder.</p>\n<p>Also of interest could be <code dir=\"auto\">std::net</code> for sockets. <code dir=\"auto\">std::threads</code> for\nplatform independent threads, <code dir=\"auto\">std::time</code> for dates and timers, <code dir=\"auto\">libc</code> for\ninvoking libc functions. <code dir=\"auto\">std::os</code> for working with OS specific code and\n<code dir=\"auto\">std::math</code> for math functions and vector methods.</p>\n<p><strong>Q:</strong> How do strings work?</p>\n<p>(see <a href=\"/language-common/strings\">Strings</a> for more info.)</p>\n<p><strong>A:</strong> C3 defines a native string type <code dir=\"auto\">String</code>, which is a distinct <code dir=\"auto\">char[]</code>. Because\n<code dir=\"auto\">char[]</code> is essentially a pointer + length, some care has to be taken to\nensure that the pointer is properly managed.</p>\n<p>For dynamic strings, or as a string builder, use <code dir=\"auto\">DString</code>. To get a String from\na DString you can either get a <em>view</em> using <code dir=\"auto\">str_view()</code> or make a copy using <code dir=\"auto\">copy_str()</code>.\nIn the former case, the String may become invalid if DString is then mutated.</p>\n<p><code dir=\"auto\">ZString</code> is a distinct zero terminated <code dir=\"auto\">char*</code>. It is used to model zero-terminated\nstrings like in C. It is mostly useful interfacing with C.</p>\n<p><code dir=\"auto\">WString</code> is a <code dir=\"auto\">Char16*</code>, useful on those platforms, like Win32, where this\nis the common unicode format. Like ZString, it is mostly useful when interfacing\nwith C.</p>\n<h2 id=\"language-features\">Language features</h2>\n<p><strong>Q:</strong> How do I use slices?</p>\n<p>(see <a href=\"/language-common/arrays/#slice\">Arrays/Slice</a> for more info.)</p>\n<p><strong>A:</strong> Slices are typically preferred in any situation where one in C would pass\na pointer + length. It is a struct containing a pointer + a length.</p>\n<p>Given an array, pointer or another slice you use either <code dir=\"auto\">[start..end]</code>\nor <code dir=\"auto\">[start:len]</code> to create it:</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">100</span><span style=\"--0:#D6DEEB;--1:#403F53\">] a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#FFFFFF;--1:#9B504E\">3..6</span><span style=\"--0:#D6DEEB;--1:#403F53\">];</span><span style=\"--0:#809191;--1:#5E6578\"> // Or a[3:4]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">b</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">] </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">          // Same as a[3] = 1</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[100] a;int[] b = a[3..6]; // Or a[3:4]b[0] = 1;          // Same as a[3] = 1\"><div></div></button></div></figure></div>\n<p>You can also just pass a pointer to an array:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">a;</span><span style=\"--0:#809191;--1:#5E6578\"> // Same as b = a[0..99];</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"b = &#x26;a; // Same as b = a[0..99];\"><div></div></button></div></figure></div>\n<p>The start and/or end may be omitted:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[.</span><span style=\"--0:#F78C6C;--1:#AA0982\">.6</span><span style=\"--0:#D6DEEB;--1:#403F53\">];</span><span style=\"--0:#809191;--1:#5E6578\"> // a[0..6]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#FFFFFF;--1:#9B504E\">1..</span><span style=\"--0:#D6DEEB;--1:#403F53\">];</span><span style=\"--0:#809191;--1:#5E6578\"> // a[1..99]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[..];</span><span style=\"--0:#809191;--1:#5E6578\">  // a[0..99];</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"a[..6]; // a[0..6]a[1..]; // a[1..99]a[..];  // a[0..99];\"><div></div></button></div></figure></div>\n<p>It is possible to use ranges to assign:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#FFFFFF;--1:#9B504E\">1..2</span><span style=\"--0:#D6DEEB;--1:#403F53\">] </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">5</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">         // Assign 5 to a[1] and a[2]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#FFFFFF;--1:#9B504E\">1..3</span><span style=\"--0:#D6DEEB;--1:#403F53\">] </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#FFFFFF;--1:#9B504E\">11..13</span><span style=\"--0:#D6DEEB;--1:#403F53\">];</span><span style=\"--0:#809191;--1:#5E6578\"> // Copy 11-13 to 1-3</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"a[1..2] = 5;         // Assign 5 to a[1] and a[2]a[1..3] = a[11..13]; // Copy 11-13 to 1-3\"><div></div></button></div></figure></div>\n<p>It is important to remember that the <em>lifetime</em> of a slice is the same\nas the lifetime of its underlying pointer:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] </span><span style=\"--0:#82AAFF;--1:#3C63B3\">buggy_code</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\">] a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[] b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#FFFFFF;--1:#9B504E\">0..1</span><span style=\"--0:#D6DEEB;--1:#403F53\">];</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span><span style=\"--0:#809191;--1:#5E6578\"> // returning a pointer to a!</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn int[] buggy_code(){    int[3] a;    int[] b = a[0..1];    return b; // returning a pointer to a!}\"><div></div></button></div></figure></div>\n<p><strong>Q:</strong> How do I pass varargs to another function that takes varargs?</p>\n<p><strong>A:</strong> Use the splat operator, <code dir=\"auto\">...</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">(String format, args...)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">  </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">io::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">printfn</span><span style=\"--0:#D6DEEB;--1:#403F53\">(format, ...args);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">main</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">  </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Format: </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%s</span><span style=\"--0:#ECC48D;--1:#9B504E\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">%d</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Foo</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">123</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void test(String format, args...){  io::printfn(format, ...args);}fn void main(){  test(&#x22;Format: %s %d&#x22;, &#x22;Foo&#x22;, 123);}\"><div></div></button></div></figure></div>\n<p><strong>Q:</strong> What are vectors?</p>\n<p>(see <a href=\"/language-common/vectors\">Vectors</a> for more info.)</p>\n<p><strong>A:</strong> Vectors are similar to arrays, but declared with <code dir=\"auto\">[&#x3C; >]</code> rather than <code dir=\"auto\">[ ]</code>, the element type may also only\nbe of integer, float, bool or pointer types. Vectors are backed by SIMD types on supported platforms. Arithmetics\navailable on the element type is available on the vector and is done element wise:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] pos </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] speed </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">5</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">pos </span><span style=\"--0:#C792EA;--1:#8D46B4\">+=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> speed;</span><span style=\"--0:#809191;--1:#5E6578\">              // pos is now { 6, 10 }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<2>] pos = { 1, 3 };int[<2>] speed = { 5, 7 };pos += speed;              // pos is now { 6, 10 }\"><div></div></button></div></figure></div>\n<p>Swizzling is also supported:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] test </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">pos</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">yxx</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\">    // test is now { 10, 6, 6 }</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<3>] test = pos.yxx;    // test is now { 10, 6, 6 }\"><div></div></button></div></figure></div>\n<p>Any scalar value will be expanded to the vector size:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Same as speed = speed * { 2, 2 }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">speed </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> speed </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Same as speed = speed * { 2, 2 }speed = speed * 2;\"><div></div></button></div></figure></div>\n<h2 id=\"memory-management\">Memory management</h2>\n<p><strong>Q:</strong> How do I work with memory?</p>\n<p><strong>A:</strong> There is <code dir=\"auto\">malloc</code>, <code dir=\"auto\">calloc</code> and <code dir=\"auto\">free</code> just like in C. The main difference is that these will invoke whatever\nthe current heap allocator is, which does not need to be the allocator provided by libc. You can get the current heap\nallocator using <code dir=\"auto\">allocator::heap()</code> and do allocations directly. There is also a temporary allocator.</p>\n<p>Convenience functions are available for allocating particular types: <code dir=\"auto\">mem::new(Type)</code> would allocate a single <code dir=\"auto\">Type</code>\non the heap and zero initialize it. <code dir=\"auto\">mem::alloc(Type)</code> does the same but without zero initialization.</p>\n<p>Alternatively, <code dir=\"auto\">mem::new</code> can take a second initializer argument:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f1 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">malloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">                   // No initialization</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f2 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">calloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span><span style=\"--0:#809191;--1:#5E6578\">                   // Zero initialization</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f3 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mem::</span><span style=\"--0:#7FDBCA;--1:#097174\">new</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo);</span><span style=\"--0:#809191;--1:#5E6578\">                        // Zero initialization</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f4 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mem::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">alloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo);</span><span style=\"--0:#809191;--1:#5E6578\">                      // No initialization</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> f5 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mem::</span><span style=\"--0:#7FDBCA;--1:#097174\">new</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo, { </span><span style=\"--0:#F78C6C;--1:#AA0982\">4</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">10.0</span><span style=\"--0:#D6DEEB;--1:#403F53\">, .a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">123</span><span style=\"--0:#D6DEEB;--1:#403F53\"> });</span><span style=\"--0:#809191;--1:#5E6578\"> // Initialized to argument</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Foo* f1 = malloc(Foo.sizeof);                   // No initializationFoo* f2 = calloc(Foo.sizeof);                   // Zero initializationFoo* f3 = mem::new(Foo);                        // Zero initializationFoo* f4 = mem::alloc(Foo);                      // No initializationFoo* f5 = mem::new(Foo, { 4, 10.0, .a = 123 }); // Initialized to argument\"><div></div></button></div></figure></div>\n<p>For arrays <code dir=\"auto\">mem::new_array</code> and <code dir=\"auto\">mem::alloc_array</code> works in corresponding ways:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foos1 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">malloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> len);</span><span style=\"--0:#809191;--1:#5E6578\">    // No initialization</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foos2 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">calloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C5E478;--1:#3C63B3\">Foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">sizeof</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> len);</span><span style=\"--0:#809191;--1:#5E6578\">    // Zero initialization</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo[] foos3 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mem::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">new_array</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo, len);</span><span style=\"--0:#809191;--1:#5E6578\">   // Zero initialization</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Foo[] foos4 </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> mem::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">alloc_array</span><span style=\"--0:#D6DEEB;--1:#403F53\">(Foo, len);</span><span style=\"--0:#809191;--1:#5E6578\"> // No initialization</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"Foo* foos1 = malloc(Foo.sizeof * len);    // No initializationFoo* foos2 = calloc(Foo.sizeof * len);    // Zero initializationFoo[] foos3 = mem::new_array(Foo, len);   // Zero initializationFoo[] foos4 = mem::alloc_array(Foo, len); // No initialization\"><div></div></button></div></figure></div>\n<p>Regardless of how they are allocated, they can be freed using <code dir=\"auto\">free()</code></p>\n<p><strong>Q:</strong> How does the temporary allocator work?</p>\n<p><strong>A:</strong> The temporary allocator is a kind of stack allocator. <code dir=\"auto\">tmalloc</code>, <code dir=\"auto\">tcalloc</code> and <code dir=\"auto\">trealloc</code> correspond to\n<code dir=\"auto\">malloc</code>, <code dir=\"auto\">calloc</code> and <code dir=\"auto\">realloc</code>. There is no <code dir=\"auto\">free</code>, as temporary allocations are free when pool of temporary\nobjects are released. You use the <code dir=\"auto\">@pool()</code> macro to create a temporary allocation scope. When execution exits\nthis scope, the temporary objects are all freed:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">pool</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">void*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> some_mem </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">tmalloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">128</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(some_mem);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">};</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Temporary allocations are automatically freed here.</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"@pool(){    void* some_mem = tmalloc(128);    foo(some_mem);};// Temporary allocations are automatically freed here.\"><div></div></button></div></figure></div>\n<p>Similar to the heap allocator, there is also <code dir=\"auto\">mem::temp_new</code>, <code dir=\"auto\">mem::temp_alloc</code>, <code dir=\"auto\">mem::temp_new_array</code> and <code dir=\"auto\">mem::temp_alloc_array</code>,\nwhich all work like their heap counterparts.</p>\n<p><strong>Q:</strong> How can I return a temporarily allocated object from inside a temporary allocation scope?</p>\n<p><strong>A:</strong> You need to pass in a copy of the temp allocator <em>outside</em> of <code dir=\"auto\">@pool</code> and allocate explicitly\nusing that allocator. In addition, you need to pass this temp allocator to <code dir=\"auto\">@pool</code> to make the\nnew temp allocator aware of the external temp allocator:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Store the temp allocator</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">Allocator temp </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> allocator::</span><span style=\"--0:#82AAFF;--1:#3C63B3\">temp</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">pool</span><span style=\"--0:#D6DEEB;--1:#403F53\">(temp)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Note, 'allocator::temp() != temp' here!</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">void*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> some_mem </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">tmalloc</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#F78C6C;--1:#AA0982\">128</span><span style=\"--0:#D6DEEB;--1:#403F53\">);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Allocate this on the external temp allocator</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> allocator::</span><span style=\"--0:#7FDBCA;--1:#097174\">new</span><span style=\"--0:#D6DEEB;--1:#403F53\">(temp, Foo);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C5E478;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#7FDBCA;--1:#097174\">z</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">foo</span><span style=\"--0:#D6DEEB;--1:#403F53\">(some_mem);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Now \"some_mem\" will be released,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// but the memory pointed to by \"foo\" is still valid.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> foo;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">};</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// Store the temp allocatorAllocator temp = allocator::temp();@pool(temp){    // Note, &#x27;allocator::temp() != temp&#x27; here!    void* some_mem = tmalloc(128);    // Allocate this on the external temp allocator    Foo* foo = allocator::new(temp, Foo);    foo.z = foo(some_mem);    // Now &#x22;some_mem&#x22; will be released,    // but the memory pointed to by &#x22;foo&#x22; is still valid.    return foo;};\"><div></div></button></div></figure></div>\n<h2 id=\"interfacing-with-c-code\">Interfacing with C code</h2>\n<p>(see <a href=\"/language-common/cinterop\">C Interoperability</a> for more info.)</p>\n<p><strong>Q:</strong> How do I call a C function from C3?</p>\n<p><strong>A:</strong> Just copy the C function definition and prefix it with <code dir=\"auto\">extern</code> (and don’t forget the <code dir=\"auto\">fn</code> as well).</p>\n<p>Imagine for example that you have the function <code dir=\"auto\">double test(int a, void* b)</code>. To call it from C3 just declare\n<code dir=\"auto\">extern fn double test(CInt a, void* b)</code> in the C3 code.</p>\n<p><strong>Q:</strong> My C function / global has a name that doesn’t conform to the C3 name requirements, just <code dir=\"auto\">extern fn</code> doesn’t\nwork.</p>\n<p><strong>A:</strong> In this case you need to give the function a C3-compatible name and then use the <code dir=\"auto\">@extern</code> attribute to\nindicate its actual external name. For example, the function <code dir=\"auto\">int *ABC(void *x)</code> could be declared in the C3 code as\n<code dir=\"auto\">extern fn int* abc(void* x) @extern(\"ABC\")</code>.</p>\n<p>There are many examples of this in the <code dir=\"auto\">std::os</code> modules.</p>\n<h2 id=\"patterns\">Patterns</h2>\n<p><strong>Q:</strong> When do I put functionality in method and when is it a free function?</p>\n<p><strong>A:</strong> In the C3 standard library, free functions are preferred unless the function is only acting on the particular\ntype. Some exceptions exist, but prefer things like <code dir=\"auto\">io::fprintf(file, \"Hello %s\", name)</code> over\n<code dir=\"auto\">file.fprintf(\"Hello %s\", name)</code>. The former also has the advantage that it’s easier to extend to work with many\ntypes.</p>\n<p><strong>Q:</strong> Are there any naming conventions in the standard library what one should know about?</p>\n<p><strong>A:</strong> Yes. A function or method with <code dir=\"auto\">new</code> in the name will in general do one or more allocations and can take an\noptional allocator. A function or method with <code dir=\"auto\">temp</code> in the name will usually allocate using the temp allocator.\nThe method <code dir=\"auto\">free</code> will free all memory associated with a type. <code dir=\"auto\">destroy</code> is similar to <code dir=\"auto\">free</code> but also indicates\nthat other resources (such as file handles) are released. In some cases <code dir=\"auto\">close</code> is used instead of <code dir=\"auto\">destroy</code>.</p>\n<p>Function and variable names use <code dir=\"auto\">snake_case</code> (all lower case with <code dir=\"auto\">_</code> separating words).</p>\n<p><strong>Q:</strong> How do I create overloaded methods?</p>\n<p><strong>A:</strong> This can be achieved with macro methods.</p>\n<p>Imagine you have two methods:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Obj</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">func1</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">self, String... args) @private {}</span><span style=\"--0:#809191;--1:#5E6578\"> // varargs variant</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Obj</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">func2</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">self, Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> pf) @private {}</span><span style=\"--0:#809191;--1:#5E6578\"> // Foo pointer variant</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void Obj.func1(&#x26;self, String... args) @private {} // varargs variantfn void Obj.func2(&#x26;self, Foo* pf) @private {} // Foo pointer variant\"><div></div></button></div></figure></div>\n<p>We can now create a macro method on <code dir=\"auto\">Obj</code> which compiles to different calls depending on arguments:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// The macro must be vararg, since the functions take different amount of arguments</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">macro </span><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">Obj</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">func</span><span style=\"--0:#D6DEEB;--1:#403F53\">(</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">self, ...)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">    </span></span><span style=\"--0:#809191;--1:#5E6578\">// Does it have a single argument of type 'Foo*'?</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $vacount </span><span style=\"--0:#C792EA;--1:#8D46B4\">==</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x26;&#x26;&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">typeis</span><span style=\"--0:#D6DEEB;--1:#403F53\">($</span><span style=\"--0:#C5E478;--1:#3C63B3\">vaarg</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">], Foo</span><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">):</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">        </span></span><span style=\"--0:#809191;--1:#5E6578\">// If so, dispatch to func2</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">self</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">func2</span><span style=\"--0:#D6DEEB;--1:#403F53\">($</span><span style=\"--0:#C5E478;--1:#3C63B3\">vaarg</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">]);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">else</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">        </span></span><span style=\"--0:#809191;--1:#5E6578\">// Otherwise, dispatch all varargs to func1</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">self</span><span style=\"--0:#D6DEEB;--1:#403F53\">.</span><span style=\"--0:#82AAFF;--1:#3C63B3\">func1</span><span style=\"--0:#D6DEEB;--1:#403F53\">($vasplat);</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$endif</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// The macro must be vararg, since the functions take different amount of argumentsmacro void Obj.func(&#x26;self, ...){    // Does it have a single argument of type &#x27;Foo*&#x27;?    $if $vacount == 1 &#x26;&#x26;&#x26; @typeis($vaarg[0], Foo*):        // If so, dispatch to func2        return self.func2($vaarg[0]);    $else        // Otherwise, dispatch all varargs to func1        return self.func1($vasplat);    $endif}\"><div></div></button></div></figure></div>\n<p>The above would make it possible to use both <code dir=\"auto\">obj.func(\"Abc\", \"Def\")</code> and <code dir=\"auto\">obj.func(&#x26;my_foo)</code>.\n(The use of <code dir=\"auto\">&#x26;&#x26;&#x26;</code> is the same as <code dir=\"auto\">&#x26;&#x26;</code> except the right hand side is <em>lazily</em> evaluated,\nin this case, it only is checked if $vacount is <code dir=\"auto\">1</code>)</p>\n<h2 id=\"platform-support\">Platform support</h2>\n<p><strong>Q:</strong> How do I use WASM?</p>\n<p><strong>A:</strong> Currently WASM support is really incomplete.</p>\n<p>You can try this:</p>\n<p><code dir=\"auto\">compile --reloc=none --target wasm32 -g0 --link-libc=no --no-entry mywasm.c3</code></p>\n<p>Unless you are compiling with something that already runs initializers,\nyou will need to call the function <code dir=\"auto\">runtime::wasm_initialize()</code> early in your\nmain <em>or</em> call it externally (for example from JS) with the name <code dir=\"auto\">_initialize()</code>,\notherwise globals might not be set up properly.</p>\n<p>This should yield an <code dir=\"auto\">out.wasm</code> file, but there is no CI running on the WASM code\nand no one is really using it yet, so the quality is low.</p>\n<p>We do want WASM to be working really well, so if you’re interested in\nwriting something in WASM - please reach out to the developer team and we’ll\nhelp you get things working.</p>\n<p><strong>Q:</strong> How do I conditionally compile based on compiler flags?</p>\n<p><strong>A:</strong> You can pass <em>feature flags</em> on the command line using <code dir=\"auto\">-D SOME_FLAG</code> or using the <code dir=\"auto\">features</code> key\nin the project file.</p>\n<p>You can then test for them using <code dir=\"auto\">$feature(FLAG_NAME)</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> my_var @</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\">($</span><span style=\"--0:#82AAFF;--1:#3C63B3\">feature</span><span style=\"--0:#D6DEEB;--1:#403F53\">(USE_MY_VAR));</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">fn </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">if</span><span style=\"--0:#D6DEEB;--1:#403F53\"> $</span><span style=\"--0:#82AAFF;--1:#3C63B3\">feature</span><span style=\"--0:#D6DEEB;--1:#403F53\">(USE_MY_VAR):</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> my_var;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$</span><span style=\"--0:#C792EA;--1:#8D46B4\">else</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">    </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">$endif</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int my_var @if($feature(USE_MY_VAR));fn int test(){    $if $feature(USE_MY_VAR):        return my_var;    $else        return 0;    $endif}\"><div></div></button></div></figure></div>\n<h2 id=\"syntax--language-design\">Syntax &#x26; Language design</h2>\n<p><strong>Q:</strong> Why does C3 require that types start with upper case but functions with lower case?</p>\n<p><strong>A:</strong> C grammar is ambiguous. Usually compilers implement the so-called lexer hack, but other methods\nexist as well, such as delayed parsing. It is also possible to make it unambiguous using infinite lookahead.</p>\n<p>However, all of those methods makes it much harder for tools to search the source code accurately. By making\nthe naming convention part of the grammar, C3 is straightforward to parse with a single token lookahead.</p>\n<p><strong>Q:</strong> Why are there no closures and only non-capturing lambdas?</p>\n<p><strong>A:</strong> With closures, life-time management of captured variables become important to track. This can become\narbitrarily complex, and without RAII or any other memory management technique it is fairly difficult to\nmake code safe. Non-capturing lambdas on the other hand are fairly safe.</p>\n<p><strong>Q:</strong> Why is it called C3 and not something better?</p>\n<p><strong>A:</strong> Naming a programming language isn’t easy. Most programming languages have pretty bad names, and\nwhile C3 isn’t the best, no real better alternative has come along.</p>\n<p><strong>Q:</strong> Why are there no static methods?</p>\n<p><strong>A:</strong> Static methods creates a tension between free functions in modules and functions namespaced by the type.\nJava for example, resolves this by not having free functions at all. C3 solves it by not having static methods (nor\nstatic variables). Consequently more functions becomes part of the module rather than the type.</p>\n<p><strong>Q:</strong> Why do macros with trailing bodies require <code dir=\"auto\">;</code> at the end?</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">@</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">()</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#809191;--1:#5E6578\">   </span></span><span style=\"--0:#809191;--1:#5E6578\">// code</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">};</span><span style=\"--0:#809191;--1:#5E6578\"> // &#x3C;- Why is this needed?</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"@test(){   // code}; // <- Why is this needed?\"><div></div></button></div></figure></div>\n<p><strong>A:</strong> All macro calls, including those with a trailing body, are expressions, so it would be ambiguous\nto let them terminate a statement without a much more complicated grammar. An example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c3\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// How can the parser determine that the</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// last `}` ends the expression? (And does it?)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() {} </span><span style=\"--0:#C792EA;--1:#8D46B4\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() {}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">123</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// In comparison, the grammar for this is easy:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() {} </span><span style=\"--0:#C792EA;--1:#8D46B4\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> @</span><span style=\"--0:#82AAFF;--1:#3C63B3\">test</span><span style=\"--0:#D6DEEB;--1:#403F53\">() {};</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">123</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"// How can the parser determine that the// last &#x60;}&#x60; ends the expression? (And does it?)int a = @test() {} + @test() {}*b = 123;// In comparison, the grammar for this is easy:int a = @test() {} + @test() {};*b = 123;\"><div></div></button></div></figure></div>\n<p>C3 strives for a simple grammar, and so the trade-off having to use <code dir=\"auto\">;</code> was a fairly\nlow prices to pay for this feature.</p>\n<p><strong>Q:</strong> Why do only macros have ref arguments?</p>\n<p><strong>A:</strong> Ref arguments break the general contract of a call: what looks like a pass-by-value\nmay suddenly be passed by reference. This makes code reading much harder, but is popular\nin C++ because: (1) No need for <code dir=\"auto\">-></code> (2) It prevents passing of null pointers. Neither\nof these are required in C3 (<code dir=\"auto\">-></code> is not needed, and <code dir=\"auto\">&#x26;</code> in the parameter contract will\nprevent nulls).</p>\n<p>This leaves the case where there is a benefit for the user to create an implicit <code dir=\"auto\">&#x26;</code>\non a call. These cases should be rare, and in C3, it’s not a problem creating a wrapper\nmacro in those cases.</p>\n<p>Note that macros that violate the call contract, such as ones using ref arguments, need\nto have the <code dir=\"auto\">@</code> name prefix to indicate that it is indeed possibly violating\n“value is passed by value” semantics.</p>\n<h2 id=\"cross-compiling-to-windows-from-linux\">Cross-compiling To Windows From Linux</h2>\n<p><strong>Q:</strong> How do I cross-compile my C3 program For Windows On Linux?</p>\n<p><strong>A:</strong> With the C3 compiler you can specify which target you would like to cross-compile to.\nFor Windows the following target would be needed:</p>\n<p><code dir=\"auto\">c3c compile main.c3 --target windows-x64</code></p>\n<p><em>You need the MSVC SDK Files, which includes the Windows SDK to be able to cross-compile to Windows.</em></p>\n<p>To get the MSVC SDK Files, head to your C3 directory and run the following command:</p>\n<p><code dir=\"auto\">python3 msvc_build_libraries.py</code></p>\n<p>Running this command should generate a msvc_sdk directory in your main C3 directory.</p>\n<p>If running this command returns an error, your Linux distribution is more than likely missing the requried packages needed for generating this msvc folder</p>\n<p>Run the following command depending on your distro:</p>\n<ul>\n<li><strong>Ubuntu:</strong> <code dir=\"auto\">sudo apt install msitools</code></li>\n<li><strong>Arch Linux:</strong> <code dir=\"auto\">pacman -S msitools</code></li>\n<li><strong>Fedora:</strong> <code dir=\"auto\">dnf install msitools</code></li>\n</ul>"
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = props.components || ({});
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  }) : _createMdxContent(props);
}
function _missingMdxReference(id, component) {
  throw new Error("Expected " + ("component" ) + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
const url = "src/content/docs/Previous%20Versions/v0_6_8/FAQ/index.mdx";
const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/FAQ/index.mdx";
const Content = (props = {}) => MDXContent({
  ...props,
  components: { Fragment: Fragment, ...props.components, "astro-image":  props.components?.img ?? $$Image },
});
Content[Symbol.for('mdx-component')] = true;
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);
Content.moduleId = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/FAQ/index.mdx";
__astro_tag_component__(Content, 'astro:jsx');

export { Content, __usesAstroImage, Content as default, file, frontmatter, getHeadings, url };
