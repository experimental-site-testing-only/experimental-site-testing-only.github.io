import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_afRpe8AA.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p><em>THIS SPECIFICATION IS UNDER DEVELOPMENT</em></p>\n<h2 id=\"notation\">Notation</h2>\n<p>The syntax is specified using Extended Backus-Naur Form (EBNF):</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.j8ofn.css\"><script type=\"module\" src=\"/_astro/ec.8zarh.js\"></script><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">production  ::= PRODUCTION_NAME '::=' expression?</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">expression  ::= alternative (\"|\" alternative)*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">alternative ::= term term*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">term        ::= PRODUCTION_NAME | TOKEN | set | group | option | repetition</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">set         ::= '[' (range | CHAR) (rang | CHAR)* ']'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">range       ::= CHAR '-' CHAR</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">group       ::= '(' expression ')'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">option      ::= expression '?'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">repetition  ::= expression '*'</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"production  ::= PRODUCTION_NAME &#x27;::=&#x27; expression?expression  ::= alternative (&#x22;|&#x22; alternative)*alternative ::= term term*term        ::= PRODUCTION_NAME | TOKEN | set | group | option | repetitionset         ::= &#x27;[&#x27; (range | CHAR) (rang | CHAR)* &#x27;]&#x27;range       ::= CHAR &#x27;-&#x27; CHARgroup       ::= &#x27;(&#x27; expression &#x27;)&#x27;option      ::= expression &#x27;?&#x27;repetition  ::= expression &#x27;*&#x27;\"><div></div></button></div></figure></div>\n<p>Productions are expressions constructed from terms and the following operators, in increasing precedence:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">|   alternation</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">()  grouping</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">?  option (0 or 1 times)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">*  repetition (0 to n times)</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"|   alternation()  grouping?  option (0 or 1 times)*  repetition (0 to n times)\"><div></div></button></div></figure></div>\n<p>Uppercase production names are used to identify lexical tokens. Non-terminals are in lower case. Lexical tokens are\nenclosed in single quotes ”.</p>\n<p>The form <code dir=\"auto\">a..b</code> represents the set of characters from a through b as alternatives.</p>\n<h2 id=\"source-code-representation\">Source code representation</h2>\n<p>A program consists of one or more <em>translation units</em> stored in files written in the Unicode character set,\nstored as a sequence of bytes using the UTF-8 encoding. Except for comments and the contents of character and string\nliterals, all input elements are formed only from the ASCII subset (U+0000 to U+007F) of Unicode.</p>\n<p>A raw byte stream is translated into a sequence of tokens which white space and comments are discarded. Doc\ncomments may optionally be discarded as well. The resulting input elements form the tokens that are the terminal symbols\nof the syntactic grammar.</p>\n<h3 id=\"lexical-translations\">Lexical Translations</h3>\n<p>A raw byte stream is translated into a sequence of tokens which white space and comments are discarded. Doc\ncomments may optionally be discarded as well. The resulting input elements form the tokens that are the terminal symbols\nof the syntactic grammar.</p>\n<p>The longest possible translation is used at each step, even if the result does not ultimately make a correct program\nwhile another lexical translation would.</p>\n<blockquote>\n<p>Example: <code dir=\"auto\">a--b</code> is translated as <code dir=\"auto\">a</code>, <code dir=\"auto\">--</code>, <code dir=\"auto\">b</code>, which does not form a grammatically correct expression, even though the tokenization <code dir=\"auto\">a</code>, <code dir=\"auto\">-</code>, <code dir=\"auto\">-</code>, <code dir=\"auto\">b</code> could form a grammatically correct expression.</p>\n</blockquote>\n<h3 id=\"line-terminators\">Line Terminators</h3>\n<p>The C3 compiler divides the sequence of input bytes into lines by recognizing <em>line terminators</em></p>\n<p>Lines are terminated by the ASCII LF character (U+000A), also known as “newline”. A line termination specifies the\ntermination of the // form of a comment.</p>\n<h3 id=\"input-elements-and-tokens\">Input Elements and Tokens</h3>\n<p>An input element may be:</p>\n<ol>\n<li>White space</li>\n<li>Comment</li>\n<li>Doc Contract</li>\n<li>Token</li>\n</ol>\n<p>A token may be:</p>\n<ol>\n<li>Identifier</li>\n<li>Keyword</li>\n<li>Literal</li>\n<li>Separator</li>\n<li>Operator</li>\n</ol>\n<p>A Doc Contract consists of:</p>\n<ol>\n<li>A stream of descriptive text</li>\n<li>A list of directive Tokens</li>\n</ol>\n<p>Those input elements that are not white space or comments are tokens. The tokens are the terminal symbols of the\nsyntactic grammar. Whitespace and comments can serve to separate tokens that might be tokenized in another manner. For\nexample the characters <code dir=\"auto\">+</code> and <code dir=\"auto\">=</code> may form the operator token <code dir=\"auto\">+=</code> only if there is no intervening white space or\ncomment.</p>\n<h3 id=\"white-space\">White Space</h3>\n<p>White space is defined as the ASCII horizontal tab character (U+0009), form feed character (U+000A), vertical tab (\nU+000B), carriage return (U+000D), space character (U+0020) and the line terminator character (U+000D).</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">WHITESPACE      ::= [ \\t\\f\\v\\r\\n]</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"WHITESPACE      ::= [ \\t\\f\\v\\r\\n]\"><div></div></button></div></figure></div>\n<h3 id=\"letters-and-digits\">Letters and digits</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">UC_LETTER       ::= [A-Z]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">LC_LETTER       ::= [a-z]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">LETTER          ::= UC_LETTER | LC_LETTER</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">DIGIT           ::= [0-9]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">HEX_DIGIT       ::= [0-9a-fA-F]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">BINARY_DIGIT    ::= [01]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">OCTAL_DIGIT     ::= [0-7]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">LC_LETTER_US    ::= LC_LETTER | \"_\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">UC_LETTER_US    ::= UC_LETTER | \"_\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ALPHANUM        ::= LETTER | DIGIT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ALPHANUM_US     ::= ALPHANUM | \"_\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">UC_ALPHANUM_US  ::= UC_LETTER_US | DIGIT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">LC_ALPHANUM_US  ::= LC_LETTER_US | DIGIT</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"UC_LETTER       ::= [A-Z]LC_LETTER       ::= [a-z]LETTER          ::= UC_LETTER | LC_LETTERDIGIT           ::= [0-9]HEX_DIGIT       ::= [0-9a-fA-F]BINARY_DIGIT    ::= [01]OCTAL_DIGIT     ::= [0-7]LC_LETTER_US    ::= LC_LETTER | &#x22;_&#x22;UC_LETTER_US    ::= UC_LETTER | &#x22;_&#x22;ALPHANUM        ::= LETTER | DIGITALPHANUM_US     ::= ALPHANUM | &#x22;_&#x22;UC_ALPHANUM_US  ::= UC_LETTER_US | DIGITLC_ALPHANUM_US  ::= LC_LETTER_US | DIGIT\"><div></div></button></div></figure></div>\n<h3 id=\"comments\">Comments</h3>\n<p>There are three types of regular comments:</p>\n<ol>\n<li><code dir=\"auto\">// text</code> a line comment. The text between <code dir=\"auto\">//</code> and line end is ignored.</li>\n<li><code dir=\"auto\">/* text */</code> block comments. The text between <code dir=\"auto\">/*</code> and <code dir=\"auto\">*/</code> is ignored. It has nesting behaviour, so for every <code dir=\"auto\">/*</code>\ndiscovered between the first <code dir=\"auto\">/*</code> and the last <code dir=\"auto\">*/</code> a corresponding <code dir=\"auto\">*/</code> must be found.</li>\n</ol>\n<h3 id=\"doc-contract\">Doc contract</h3>\n<ol>\n<li><code dir=\"auto\">&#x3C;* text *></code> doc block comment. The text between <code dir=\"auto\">&#x3C;*</code> and <code dir=\"auto\">*></code> is optionally parsed using the doc comment\nsyntactic grammar. A compiler may choose to read <code dir=\"auto\">&#x3C;* text *></code> as a regular comment.</li>\n</ol>\n<h3 id=\"identifiers\">Identifiers</h3>\n<p>Identifiers name program entities such as variables and types. An identifier is a sequence of one or more letters and\ndigits.\nThe first character in an identifier must be a letter or underscore.</p>\n<p>C3 has three types of identifiers: const identifiers - containing only underscore and upper-case letters,\ntype identifiers - starting with an upper case letter followed by at least one underscore letter and regular\nidentifiers, starting with a lower case letter.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">IDENTIFIER      ::=  \"_\"* LC_LETTER ALPHANUM_US*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">CONST_IDENT     ::=  \"_\"* UC_LETTER UC_ALPHANUM_US*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">TYPE_IDENT      ::=  \"_\"* UC_LETTER UC_ALPHANUM_US* LC_LETTER ALPHANUM_US*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">CT_IDENT        ::=  \"$\" IDENTIFIER</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">CT_CONST_IDENT  ::=  \"$\" CONST_IDENT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">CT_TYPE_IDENT   ::=  \"$\" TYPE_IDENT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">AT_TYPE_IDENT   ::=  \"@\" TYPE_IDENT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">PATH_SEGMENT    ::= \"_\"* LC_LETTER LC_ALPHANUM_US*</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"IDENTIFIER      ::=  &#x22;_&#x22;* LC_LETTER ALPHANUM_US*CONST_IDENT     ::=  &#x22;_&#x22;* UC_LETTER UC_ALPHANUM_US*TYPE_IDENT      ::=  &#x22;_&#x22;* UC_LETTER UC_ALPHANUM_US* LC_LETTER ALPHANUM_US*CT_IDENT        ::=  &#x22;$&#x22; IDENTIFIERCT_CONST_IDENT  ::=  &#x22;$&#x22; CONST_IDENTCT_TYPE_IDENT   ::=  &#x22;$&#x22; TYPE_IDENTAT_TYPE_IDENT   ::=  &#x22;@&#x22; TYPE_IDENTPATH_SEGMENT    ::= &#x22;_&#x22;* LC_LETTER LC_ALPHANUM_US*\"><div></div></button></div></figure></div>\n<h3 id=\"keywords\">Keywords</h3>\n<p>The following keywords are reserved and may not be used as identifiers:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">asm         any         anyfault</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">assert      attribute   break</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">case        catch       const</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">continue    default     defer</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">def         do          else</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">enum        extern      false</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">fault       fn          if</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">import      inline      macro</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">module      nextcase    null</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">public      return      struct</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">switch      true        try</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">typeid      var         void</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">while</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">bool        int128      double</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">float       long        ulong</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int         uint        byte</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">short       ushort      char</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">isz         usz         float16</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">float128    uint128     bfloat16</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">$assert     $case       $default</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">$echo       $else       $error</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">$endfor     $endforeach $endif</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">$endswitch  $for        $foreach</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">$if         $switch     $typef</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">$vaarg      $vaconst    $vacount</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">$vaexpr     $vatype</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"asm         any         anyfaultassert      attribute   breakcase        catch       constcontinue    default     deferdef         do          elseenum        extern      falsefault       fn          ifimport      inline      macromodule      nextcase    nullpublic      return      structswitch      true        trytypeid      var         voidwhilebool        int128      doublefloat       long        ulongint         uint        byteshort       ushort      charisz         usz         float16float128    uint128     bfloat16$assert     $case       $default$echo       $else       $error$endfor     $endforeach $endif$endswitch  $for        $foreach$if         $switch     $typef$vaarg      $vaconst    $vacount$vaexpr     $vatype\"><div></div></button></div></figure></div>\n<h3 id=\"operators-and-punctuation\">Operators and punctuation</h3>\n<p>The following character sequences represent operators and punctuation.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">&#x26;       @       ~       |       ^       :</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">,       /       $       .       ;       )</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">>       &#x3C;       #       {       }       -</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">(       )       *       [       ]       %</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">>=      &#x3C;=      +       +=      -=      !</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">?       ?:      &#x26;&#x26;      ??      &#x26;=      |=</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">^=      /=      ..      ==      ({      })</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">[&#x3C;      >]      (&#x3C;      >)      ++      --</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">%=      !=      ||      ::      &#x3C;&#x3C;      >></span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">!!      ...     &#x3C;&#x3C;=     >>=</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"&#x26;       @       ~       |       ^       :,       /       $       .       ;       )>       <       #       {       }       -(       )       *       [       ]       %>=      <=      +       +=      -=      !?       ?:      &#x26;&#x26;      ??      &#x26;=      |=^=      /=      ..      ==      ({      })[<      >]      (<      >)      ++      --%=      !=      ||      ::      <<      >>!!      ...     <<=     >>=\"><div></div></button></div></figure></div>\n<h3 id=\"integer-literals\">Integer literals</h3>\n<p>An integer literal is a sequence of digits representing an integer constant.\nAn optional prefix sets a non-decimal base: 0b or 0B for binary,\n0o, or 0O for octal, and 0x or 0X for hexadecimal.\nA single 0 is considered a decimal zero.\nIn hexadecimal literals, letters a through f and A through F represent values 10 through 15.</p>\n<p>For readability, an underscore character _ may appear after a base prefix\nor between successive digits; such underscores do not change the literal’s value.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">INTEGER         ::= DECIMAL_LIT | BINARY_LIT | OCTAL_LIT | HEX_LIT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">DECIMAL_LIT     ::= '0' | [1-9] ('_'* DECIMAL_DIGITS)?</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">BINARY_LIT      ::= '0' [bB] '_'* BINARY_DIGITS</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">OCTAL_LIT       ::= '0' [oO] '_'* OCTAL_DIGITS</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">HEX_LIT         ::= '0' [xX] '_'* HEX_DIGITS</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">BINARY_DIGIT    ::= [01]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">HEX_DIGIT       ::= [0-9a-fA-F]</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">DECIMAL_DIGITS  ::= DIGIT ('_'* DIGIT)*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">BINARY_DIGITS   ::= BINARY_DIGIT ('_'* BINARY_DIGIT)*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">OCTAL_DIGITS    ::= OCTAL_DIGIT ('_'* OCTAL_DIGIT)*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">HEX_DIGITS      ::= HEX_DIGIT ('_'* HEX_DIGIT)*</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"INTEGER         ::= DECIMAL_LIT | BINARY_LIT | OCTAL_LIT | HEX_LITDECIMAL_LIT     ::= &#x27;0&#x27; | [1-9] (&#x27;_&#x27;* DECIMAL_DIGITS)?BINARY_LIT      ::= &#x27;0&#x27; [bB] &#x27;_&#x27;* BINARY_DIGITSOCTAL_LIT       ::= &#x27;0&#x27; [oO] &#x27;_&#x27;* OCTAL_DIGITSHEX_LIT         ::= &#x27;0&#x27; [xX] &#x27;_&#x27;* HEX_DIGITSBINARY_DIGIT    ::= [01]HEX_DIGIT       ::= [0-9a-fA-F]DECIMAL_DIGITS  ::= DIGIT (&#x27;_&#x27;* DIGIT)*BINARY_DIGITS   ::= BINARY_DIGIT (&#x27;_&#x27;* BINARY_DIGIT)*OCTAL_DIGITS    ::= OCTAL_DIGIT (&#x27;_&#x27;* OCTAL_DIGIT)*HEX_DIGITS      ::= HEX_DIGIT (&#x27;_&#x27;* HEX_DIGIT)*\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">42</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">4_2</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">0_600</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">0o600</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">0O600           // second character is capital letter 'O'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">0xBadFace</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">0xBad_Face</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">0x_67_7a_2f_cc_40_c6</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">170141183460469231731687303715884105727</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">170_141183_460469_231731_687303_715884_105727</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">0600            // Invalid, non zero decimal number may not start with 0</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">_42             // an identifier, not an integer literal</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">42_             // invalid: _ must separate successive digits</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">0_xBadFace      // invalid: _ must separate successive digits</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"424_20_6000o6000O600           // second character is capital letter &#x27;O&#x27;0xBadFace0xBad_Face0x_67_7a_2f_cc_40_c6170141183460469231731687303715884105727170_141183_460469_231731_687303_715884_1057270600            // Invalid, non zero decimal number may not start with 0_42             // an identifier, not an integer literal42_             // invalid: _ must separate successive digits0_xBadFace      // invalid: _ must separate successive digits\"><div></div></button></div></figure></div>\n<h3 id=\"floating-point-literals\">Floating point literals</h3>\n<p>A floating-point literal is a decimal or hexadecimal representation of a floating-point constant.</p>\n<p>A decimal floating-point literal consists of an integer part (decimal digits), a decimal point,\na fractional part (decimal digits), and an exponent part (e or E followed by an optional\nsign and decimal digits). One of the integer part or the fractional part may be elided;\none of the decimal point or the exponent part may be elided. An exponent value exp scales\nthe mantissa (integer and fractional part) by powers of 10.</p>\n<p>A hexadecimal floating-point literal consists of a 0x or 0X prefix, an integer part\n(hexadecimal digits), a radix point, a fractional part (hexadecimal digits),\nand an exponent part (p or P followed by an optional sign and decimal digits).\nOne of the integer part or the fractional part may be elided; the radix point\nmay be elided as well, but the exponent part is required.\nAn exponent value exp scales the mantissa (integer and fractional part) by powers of 2.</p>\n<p>For readability, an underscore character _ may appear after a base prefix or between successive digits;\nsuch underscores do not change the literal value.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">FLOAT_LIT       ::= DEC_FLOAT_LIT | HEX_FLOAT_LIT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">DEC_FLOAT_LIT   ::= DECIMAL_DIGITS '.' DECIMAL_DIGITS? DEC_EXPONENT?</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| DECIMAL_DIGITS DEC_EXPONENT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| '.' DECIMAL_DIGITS DEC_EXPONENT?</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">DEC_EXPONENT    ::= [eE] [+-]? DECIMAL_DIGITS</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">HEX_FLOAT_LIT   ::= '0' [xX] HEX_MANTISSA HEX_EXPONENT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">HEX_MANTISSA    ::= HEX_DIGITS '.' HEX_DIGITS?</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| HEX_DIGITS</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| '.' HEX_DIGITS</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">HEX_EXPONENT    ::= [pP] [+-] DECIMAL_DIGITS</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"FLOAT_LIT       ::= DEC_FLOAT_LIT | HEX_FLOAT_LITDEC_FLOAT_LIT   ::= DECIMAL_DIGITS &#x27;.&#x27; DECIMAL_DIGITS? DEC_EXPONENT?                    | DECIMAL_DIGITS DEC_EXPONENT                    | &#x27;.&#x27; DECIMAL_DIGITS DEC_EXPONENT?DEC_EXPONENT    ::= [eE] [+-]? DECIMAL_DIGITSHEX_FLOAT_LIT   ::= &#x27;0&#x27; [xX] HEX_MANTISSA HEX_EXPONENTHEX_MANTISSA    ::= HEX_DIGITS &#x27;.&#x27; HEX_DIGITS?                    | HEX_DIGITS                    | &#x27;.&#x27; HEX_DIGITSHEX_EXPONENT    ::= [pP] [+-] DECIMAL_DIGITS\"><div></div></button></div></figure></div>\n<h3 id=\"characters\">Characters</h3>\n<p>Characters are the fundamental components of strings and character literals.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">CHAR_ELEMENT    ::= [\\x20-\\x26] | [\\x28-\\x5B] | [\\x5D-\\x7F]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">CHAR_LIT_BYTE   ::= CHAR_ELEMENT | \\x5C CHAR_ESCAPE</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">CHAR_ESCAPE     ::= [abefnrtv\\'\\\"\\\\]</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| 'x' HEX_DIGIT HEX_DIGIT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">UNICODE_CHAR    ::= unicode_char</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| 'U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                          </span></span><span style=\"--0:#d6deeb;--1:#403f53\">HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"CHAR_ELEMENT    ::= [\\x20-\\x26] | [\\x28-\\x5B] | [\\x5D-\\x7F]CHAR_LIT_BYTE   ::= CHAR_ELEMENT | \\x5C CHAR_ESCAPECHAR_ESCAPE     ::= [abefnrtv\\&#x27;\\&#x22;\\\\]                    | &#x27;x&#x27; HEX_DIGIT HEX_DIGITUNICODE_CHAR    ::= unicode_char                    | &#x27;u&#x27; HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT                    | &#x27;U&#x27; HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT                          HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT\"><div></div></button></div></figure></div>\n<h3 id=\"backslash-escapes\">Backslash escapes</h3>\n<p>The following backslash escapes are available for characters and string literals:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"text\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\0      0x00 zero value</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\a      0x07 alert/bell</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\b      0x08 backspace</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\e      0x1B escape</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\f      0x0C form feed</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\n      0x0A newline</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\r      0x0D carriage return</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\t      0x09 horizontal tab</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\v      0x0B vertical tab</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\\\      0x5C backslash</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\'      0x27 single quote '</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\\"      0x22 double quote \"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\x      Escapes a single byte hex value</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\u      Escapes a two byte unicode hex value</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">\\U      Escapes a four byte unicode hex value</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"\\0      0x00 zero value\\a      0x07 alert/bell\\b      0x08 backspace\\e      0x1B escape\\f      0x0C form feed\\n      0x0A newline\\r      0x0D carriage return\\t      0x09 horizontal tab\\v      0x0B vertical tab\\\\      0x5C backslash\\&#x27;      0x27 single quote &#x27;\\&#x22;      0x22 double quote &#x22;\\x      Escapes a single byte hex value\\u      Escapes a two byte unicode hex value\\U      Escapes a four byte unicode hex value\"><div></div></button></div></figure></div>\n<h3 id=\"string-literals\">String literals</h3>\n<p>A string literal represents a string constant obtained from concatenating a sequence of characters.\nString literals are character sequences between double quotes, as in “bar”. Within the quotes,\nany character may appear except newline and unescaped double quote. The text between the\nquotes forms the value of the literal, with backslash escapes interpreted as they are in\nrune literals, with the same restrictions. The two-digit hexadecimal (\\xnn) escapes represent\nindividual bytes of the resulting string; all other escapes represent the (possibly multibyte)\nUTF-8 encoding of individual characters. Thus inside a string literal <code dir=\"auto\">\\xFF</code> represent a single\nbyte of value <code dir=\"auto\">0xFF</code> = 255, while <code dir=\"auto\">ÿ</code>, <code dir=\"auto\">\\u00FF</code>, <code dir=\"auto\">\\U000000FF</code> and <code dir=\"auto\">\\xc3\\xbf</code> represent the two bytes\n<code dir=\"auto\">0xc3 0xbf</code> of the UTF-8 encoding of character <code dir=\"auto\">U+00FF</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">STRING_LIT      ::= \\x22 (CHAR_LIT_BYTE | UNICODE_CHAR)* \\x22</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"STRING_LIT      ::= \\x22 (CHAR_LIT_BYTE | UNICODE_CHAR)* \\x22\"><div></div></button></div></figure></div>\n<h4 id=\"compile-time-string-concatenation\">Compile time string concatenation</h4>\n<p>Strings will concatenate if declared in sequence.</p>\n<p>Example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String s </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">abc</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">def</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">ghi</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// This is equivalent to:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">String s </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">abcdefghi</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"String s = &#x22;abc&#x22; &#x22;def&#x22; &#x22;ghi&#x22;;// This is equivalent to:String s = &#x22;abcdefghi&#x22;;\"><div></div></button></div></figure></div>\n<h3 id=\"raw-string-literals\">Raw string literals</h3>\n<p>Raw string literals are enclosed between “ and consist of the raw UTF8 in the source\ncode between the ”`”. A sequence of two ”`” will be interpreted as a single escaped ”`” that does\nnot terminate the literal.</p>\n<h4 id=\"compile-time-concatenation\">Compile time concatenation</h4>\n<p>Raw strings will concatenate with other regular strings and raw strings (\nsee <a href=\"#compile-time-string-concatenation\">string literal compile time concatenation</a>).</p>\n<h4 id=\"source-code-pre-filtering\">Source code pre-filtering</h4>\n<p>The source code will pre-filter <code dir=\"auto\">\\r</code> (<code dir=\"auto\">0x0D</code>) from the source code. This means that it is also implicitly\nfiltered out of raw strings.</p>\n<h3 id=\"character-literals\">Character literals</h3>\n<p>A character literal is enclosed in <code dir=\"auto\">'</code> and may either consist of 1, 2, 4, 8, 16 bytes.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">CHARACTER_LIT   ::= \"'\" (CHAR_LIT_BYTE+) | UNICODE_CHAR \"'\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"CHARACTER_LIT   ::= &#x22;&#x27;&#x22; (CHAR_LIT_BYTE+) | UNICODE_CHAR &#x22;&#x27;&#x22;\"><div></div></button></div></figure></div>\n<h2 id=\"types\">Types</h2>\n<p>Types consist of built-in types and user-defined types (enums, structs, unions, bitstructs, fault and distinct).</p>\n<h3 id=\"boolean-types\">Boolean types</h3>\n<p><code dir=\"auto\">bool</code> may have the two values <code dir=\"auto\">true</code> and <code dir=\"auto\">false</code>. It holds a single bit of information but is\nstored in a <code dir=\"auto\">char</code> type.</p>\n<h3 id=\"integer-types\">Integer types</h3>\n<p>The built-in integer types:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"text\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">char      unsigned 8-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ichar     signed 8-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ushort    unsigned 16-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">short     signed 16-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">uint      unsigned 32-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int       signed 32-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ulong     unsigned 64-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">long      signed 64-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">uint128   unsigned 128-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int128    singed 128-bit</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"char      unsigned 8-bitichar     signed 8-bitushort    unsigned 16-bitshort     signed 16-bituint      unsigned 32-bitint       signed 32-bitulong     unsigned 64-bitlong      signed 64-bituint128   unsigned 128-bitint128    singed 128-bit\"><div></div></button></div></figure></div>\n<p>In addition, the following type aliases exist:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"text\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">uptr      unsigned pointer size</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">iptr      signed pointer size</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">usz       unsigned pointer offset / object size</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">isz       signed pointer offset  / object size</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"uptr      unsigned pointer sizeiptr      signed pointer sizeusz       unsigned pointer offset / object sizeisz       signed pointer offset  / object size\"><div></div></button></div></figure></div>\n<h3 id=\"floating-point-types\">Floating point types</h3>\n<p>Built-in floating point types:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">float16   IEEE 16-bit*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">bfloat16  Brainfloat*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">float     IEEE 32-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">double    IEEE 64-bit</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">float128  IEEE 128-bit*</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"float16   IEEE 16-bit*bfloat16  Brainfloat*float     IEEE 32-bitdouble    IEEE 64-bitfloat128  IEEE 128-bit*\"><div></div></button></div></figure></div>\n<p>(* optionally supported)</p>\n<h3 id=\"vector-types\">Vector types</h3>\n<p>A vector lowers to the platform’s vector types where available. A vector has a base type and a width.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">vector_type        ::= type \"[&#x3C;\" length \">]\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"vector_type        ::= type &#x22;[<&#x22; length &#x22;>]&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"vector-base-type\">Vector base type</h4>\n<p>The base type of a vector must be boolean, an integer or a floating point type.</p>\n<h4 id=\"min-width\">Min width</h4>\n<p>The vector width must be at least 1.</p>\n<h4 id=\"element-access\">Element access</h4>\n<p>Vector elements are accessed using <code dir=\"auto\">[]</code>. It is possible to take the address of a single element.</p>\n<h4 id=\"alignment\">Alignment</h4>\n<p>Alignment of vectors are platform dependent, but is at least the alignment of its element type.</p>\n<h4 id=\"vector-operations\">Vector operations</h4>\n<p>Vectors support the same arithmetics as its underlying type, and will perform the operation\nelement-wise.</p>\n<p>Example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">3</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#D6DEEB;--1:#403F53\">, </span><span style=\"--0:#F78C6C;--1:#AA0982\">7</span><span style=\"--0:#D6DEEB;--1:#403F53\"> };</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// Equivalent to</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#C792EA;--1:#8D46B4\">&#x3C;</span><span style=\"--0:#F78C6C;--1:#AA0982\">2</span><span style=\"--0:#C792EA;--1:#8D46B4\">></span><span style=\"--0:#D6DEEB;--1:#403F53\">] c </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> { </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">] </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">b</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">], </span><span style=\"--0:#C5E478;--1:#3C63B3\">a</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">] </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C5E478;--1:#3C63B3\">b</span><span style=\"--0:#D6DEEB;--1:#403F53\">[</span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">] };</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int[<2>] a = { 1, 3 };int[<2>] b = { 2, 7 };int[<2>] c = a * b;// Equivalent toint[<2>] c = { a[0] * b[0], a[1] * b[1] };\"><div></div></button></div></figure></div>\n<h3 id=\"array-types\">Array types</h3>\n<p>An array has the alignment of its elements. An array must have at least one element.</p>\n<h3 id=\"slice-types\">Slice types</h3>\n<p>The slice consist of a pointer, followed by an usz length, having the alignment of pointers.</p>\n<h3 id=\"pointer-types\">Pointer types</h3>\n<p>A pointer is the address to memory.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"text\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">pointer_type       ::= type \"*\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"pointer_type       ::= type &#x22;*&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"pointee-type\">Pointee type</h4>\n<p>The type of the memory pointed to is the <strong>pointee type</strong>. It may be any runtime type.</p>\n<h4 id=\"iptr-and-uptr\"><code dir=\"auto\">iptr</code> and <code dir=\"auto\">uptr</code></h4>\n<p>A pointer may be losslessly cast to an <code dir=\"auto\">iptr</code> or <code dir=\"auto\">uptr</code>. An <code dir=\"auto\">iptr</code> or <code dir=\"auto\">uptr</code> may be cast to a pointer of any type.</p>\n<h4 id=\"the-wildcard-pointer-void\">The wildcard pointer <code dir=\"auto\">void*</code></h4>\n<p>The <code dir=\"auto\">void*</code> may implicitly cast into any other pointer type. The <code dir=\"auto\">void*</code>\n[implicitly casts into any other pointer.</p>\n<p>A void* pointer may never be dereferenced.</p>\n<h4 id=\"pointer-arithmetic-on-void\">Pointer arithmetic on <code dir=\"auto\">void*</code></h4>\n<p>Performing pointer arithmetics on void* will assume that the element size is 1. This includes\npointer arithmetics using subscripting.</p>\n<h4 id=\"subscripting\">Subscripting</h4>\n<p>Subscripting a pointer is equal to performing pointer arithmetics using the index, followed by a deref.\nSubscripts on pointers may be negative and will never do bounds checks.</p>\n<h4 id=\"deref\">Deref</h4>\n<p>Dereferencing a pointer will return the value in the memory location interpreted as the <strong>pointee type</strong>.</p>\n<h4 id=\"\"></h4>\n<h3 id=\"struct-types\">Struct types</h3>\n<p>A struct may not have zero members.</p>\n<h4 id=\"alignment-1\">Alignment</h4>\n<p>A non-packed struct has the alignment of the member that has the highest alignment. A packed struct\nhas alignment 1. See <a href=\"#attributes\">align attribute</a> for details on changing the alignment.</p>\n<h3 id=\"union-types\">Union types</h3>\n<p>A union may not have zero members.</p>\n<h4 id=\"alignment-2\">Alignment</h4>\n<p>A union has the alignment of the member that has the highest alignment. See <a href=\"#attributes\">align attribute</a> for\ndetails on changing the alignment.</p>\n<h3 id=\"fault-types\">Fault types</h3>\n<p>A fault is an extensible enum which can be used to create an Excuse for an empty <a href=\"/language-common/optionals-essential/#what-is-an-optional\">optional</a>.</p>\n<h4 id=\"alignment-3\">Alignment</h4>\n<p>A fault type has the same alignment as a pointer. See <a href=\"#attributes\">align attribute</a> for details on changing the\nalignment.</p>\n<h3 id=\"enum-types\">Enum types</h3>\n<h3 id=\"function-types\">Function types</h3>\n<h3 id=\"typeid-type\">Typeid type</h3>\n<p>The typeid is a pointer sized value which uniquely identifies a type.</p>\n<h3 id=\"any-type\">Any type</h3>\n<p>The <code dir=\"auto\">any</code> is a fat pointer (2 pointers wide) holding a pointer to a value and its corresponding <a href=\"#typeid-type\">typeid</a>.\nIt cannot be dereferenced.</p>\n<h4 id=\"fields\">Fields</h4>\n<p><code dir=\"auto\">.ptr</code> returns a <code dir=\"auto\">void*</code> pointer to the underlying value <code dir=\"auto\">.type</code> returns the <a href=\"#typeid-type\">typeid</a>\nof the underlying value.</p>\n<h4 id=\"switching-over-any\">Switching over <code dir=\"auto\">any</code></h4>\n<p>Switching over an <code dir=\"auto\">any</code> value creates an <a href=\"#any-switch\">any switch</a>.</p>\n<h3 id=\"anyfault-type\">Anyfault type</h3>\n<h2 id=\"declarations-and-scope\">Declarations and scope</h2>\n<h2 id=\"expressions\">Expressions</h2>\n<h3 id=\"assignment-expression\">Assignment expression</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">assignment_expr    ::= ct_type_assign | unary_expr assignment_op expr</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ct_type_assign     ::= ct_type_ident \"=\" type</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">assignment_op      ::= \"=\" | \"+=\" | \"-=\" | \"*=\" | \"/=\" | \"%=\" | \"&#x3C;&#x3C;=\" | \">>=\" | \"&#x26;=\" | \"^=\" | \"|=\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"assignment_expr    ::= ct_type_assign | unary_expr assignment_op exprct_type_assign     ::= ct_type_ident &#x22;=&#x22; typeassignment_op      ::= &#x22;=&#x22; | &#x22;+=&#x22; | &#x22;-=&#x22; | &#x22;*=&#x22; | &#x22;/=&#x22; | &#x22;%=&#x22; | &#x22;<<=&#x22; | &#x22;>>=&#x22; | &#x22;&#x26;=&#x22; | &#x22;^=&#x22; | &#x22;|=&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"type-assign\">Type assign</h4>\n<p>This assigns a new type to a compile time type variable. The value of the expression is the type assigned.</p>\n<h4 id=\"combined-assign\">Combined assign</h4>\n<p>All assignment operations except for <code dir=\"auto\">=</code> are combined assign operation. They first perform the operation indicated\nby the leftmost character(s) in the operator (e.g <code dir=\"auto\">+</code> for <code dir=\"auto\">+=</code>, <code dir=\"auto\">&#x3C;&#x3C;</code> for <code dir=\"auto\">&#x3C;&#x3C;=</code> etc) with the lhs and the rhs.\nThe result is then assigned to the left hand side. The result of the operation is the new value of the left\nhand side.</p>\n<h4 id=\"implicit-conversion\">Implicit conversion</h4>\n<p>If the left hand side is a pointer and the operation is <code dir=\"auto\">+=</code> or <code dir=\"auto\">-=</code> an attempt to implicitly convert to\n<code dir=\"auto\">isz</code>/<code dir=\"auto\">usz</code> will be tried.</p>\n<p>For all other types and operations, <strong>an implicit conversion</strong> of rhs to the type of lhs will be tried.</p>\n<h3 id=\"ternary-elvis-and-or-else-expressions\">Ternary, elvis and or-else expressions</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ternary_group_expr ::= suffix_group_expr | ternary_expr | elvis_expr | orelse_expr</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ternary_expr       ::= or_expr \"?\" expr \":\" ternary_group_expr</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">elvis_expr         ::= suffix_expr \"?:\" ternary_group_expr</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">orelse_expr        ::= suffix_expr \"??\" ternary_group_expr</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"ternary_group_expr ::= suffix_group_expr | ternary_expr | elvis_expr | orelse_exprternary_expr       ::= or_expr &#x22;?&#x22; expr &#x22;:&#x22; ternary_group_exprelvis_expr         ::= suffix_expr &#x22;?:&#x22; ternary_group_exprorelse_expr        ::= suffix_expr &#x22;??&#x22; ternary_group_expr\"><div></div></button></div></figure></div>\n<h4 id=\"ternary-evaluation\">Ternary evaluation</h4>\n<p>The most left-hand expression is evaluated to a boolean. If it is true, the value of the middle\nexpression is returned, otherwise the last expression is returned.</p>\n<p>Only the most left-hand expression and the returned expressions are evaluated.</p>\n<p>The middle and last expression are implicitly converted to their <strong>unified type</strong>.</p>\n<p>The resulting type is the <strong>unified type</strong>.</p>\n<h4 id=\"elvis-evaluation\">Elvis evaluation</h4>\n<p>Lhs and rhs are implicitly converted to their <strong>unified type</strong>.</p>\n<p>The lhs is evaluated, it is then converted to a boolean, if the result it true, return the lhs value\nbefore its boolean conversion. Otherwise return the right hand side.</p>\n<p>The right hand side is only evaluated if the lhs evaluates to false.</p>\n<p>The resulting type is the <strong>unified type</strong>.</p>\n<h4 id=\"orelse-evaluation\">Orelse evaluation</h4>\n<p>The lhs must be optional. The non-optional type for lhs and rhs are calculated.\nThe <strong>unified type</strong> of the result is calculated. Lhs are converted to the unified type\npreserving their optionality.</p>\n<p>At runtime, lhs is evaluated. If it evaluates to an optional, rhs is returned instead.</p>\n<p>Rhs is only evaluated if lhs evaluates to an optional.</p>\n<p>The resulting type of the orelse is the post conversion type of the rhs.</p>\n<h3 id=\"suffix-expression\">Suffix expression</h3>\n<p>Suffix expressions convert a fault to an optional.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">suffix_group_exp   ::= or_group_expr | suffix_expr</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">suffix_expr        ::= or_group_expr \"?\" \"!\"?</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"suffix_group_exp   ::= or_group_expr | suffix_exprsuffix_expr        ::= or_group_expr &#x22;?&#x22; &#x22;!&#x22;?\"><div></div></button></div></figure></div>\n<h4 id=\"effect-of\">Effect of <code dir=\"auto\">?</code></h4>\n<p>The <code dir=\"auto\">?</code> will convert the expression into an optional. The left hand side must be a fault type.\nIf an optional <code dir=\"auto\">!</code> follows, this optional is immediately returned, as if by a <code dir=\"auto\">return &#x3C;expr>?</code> statement.</p>\n<h4 id=\"type-of-the-expression\">Type of the expression</h4>\n<p>The type is a <strong>wildcard optional</strong>. If <code dir=\"auto\">!</code> is added, it is a <strong>wildcard</strong> type.</p>\n<h3 id=\"rethrow-expression\">Rethrow expression</h3>\n<p>If the expression is optional, implicitly return with the optional value.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">rethrow_expr       ::= expr \"!\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"rethrow_expr       ::= expr &#x22;!&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"the-expression-to-rethrow\">The expression to rethrow</h4>\n<p>The expression must have an optional type, otherwise this is a compile time error.</p>\n<h4 id=\"type\">Type</h4>\n<p>The type of “rethrow” is the inner expr type without optional.</p>\n<h3 id=\"relational-expression\">Relational expression</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">rel_group_expr     ::= add_group_expr | relational_expr</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">relational_expr    ::= rel_group_expr relational_op add_group_expr</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">relational_op      ::= \"&#x3C;\" | \">\" | \"&#x3C;=\" | \">=\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"rel_group_expr     ::= add_group_expr | relational_exprrelational_expr    ::= rel_group_expr relational_op add_group_exprrelational_op      ::= &#x22;<&#x22; | &#x22;>&#x22; | &#x22;<=&#x22; | &#x22;>=&#x22;\"><div></div></button></div></figure></div>\n<p>TODO</p>\n<h3 id=\"and-expression\">And expression</h3>\n<p>This binary expression evaluates the lhs, and if the result is <code dir=\"auto\">true</code> evaluates the rhs. The\nresult is true if both lhs and rhs are true.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">and_group_expr     ::= rel_group_expr | and_expr</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">and_expr           ::= and_group_expr \"&#x26;&#x26;\" rel_group_expr</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"and_group_expr     ::= rel_group_expr | and_exprand_expr           ::= and_group_expr &#x22;&#x26;&#x26;&#x22; rel_group_expr\"><div></div></button></div></figure></div>\n<h4 id=\"type-1\">Type</h4>\n<p>The type of the and-expression is <code dir=\"auto\">bool</code>.</p>\n<h3 id=\"or-expression\">Or expression</h3>\n<p>This binary expression evaluates the lhs, and if the result is <code dir=\"auto\">false</code> evaluates the rhs. The\nresult is true if lhs or rhs is true.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">or_group_expr      ::= and_group_expr | or_expr</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">or_expr            ::= or_group_expr \"||\" and_group_expr</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"or_group_expr      ::= and_group_expr | or_expror_expr            ::= or_group_expr &#x22;||&#x22; and_group_expr\"><div></div></button></div></figure></div>\n<h4 id=\"constant-folded-arithmetics\">Constant folded arithmetics</h4>\n<p>Constant folding will happen for constant integers and floating. Vectors operations will\nnot be constant-folded.</p>\n<p>Constant folded operations are: multiplication, division, addition, subtraction,\nbit shifts, bit negation, bitwise and, or and xor, comparison, logical and/or,\nand negation.</p>\n<h4 id=\"type-2\">Type</h4>\n<p>The type of the or-expression is <code dir=\"auto\">bool</code>.</p>\n<h3 id=\"casts\">Casts</h3>\n<h3 id=\"pointer-casts\">Pointer casts</h3>\n<h4 id=\"integer-to-pointer-cast\">Integer to pointer cast</h4>\n<p>Any integer of pointer size or larger may be explicitly cast to a pointer. An integer to pointer cast is considered\nnon-constant, except in the special case where the integer == 0. In that case, the result is constant <code dir=\"auto\">null</code>.</p>\n<p>Example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">byte a = 1;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int* b = (int*)a; // Invalid, pointer type is > 8 bits.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int* c = (int*)1; // Valid, but runtime value.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int* d = (int*)0; // Valid and constant value.</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"byte a = 1;int* b = (int*)a; // Invalid, pointer type is > 8 bits.int* c = (int*)1; // Valid, but runtime value.int* d = (int*)0; // Valid and constant value.\"><div></div></button></div></figure></div>\n<h4 id=\"pointer-to-integer-cast\">Pointer to integer cast</h4>\n<p>A pointer may be cast to any integer, truncating the pointer value if the size of the pointer is larger than the pointer\nsize. A pointer to integer cast is considered non-constant, except in the special case of a null pointer, where it is\nequal to the integer value 0.</p>\n<p>Example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">fn void test() { ... }</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">def VoidFunc = fn void test();</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">VoidFunc a = &#x26;test;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int b = (int)null;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int c = (int)a; // Invalid, not constant</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int d = (int)((int*)1); // Invalid, not constant</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"fn void test() { ... }def VoidFunc = fn void test();VoidFunc a = &#x26;test;int b = (int)null;int c = (int)a; // Invalid, not constantint d = (int)((int*)1); // Invalid, not constant\"><div></div></button></div></figure></div>\n<h3 id=\"subscript-operator\">Subscript operator</h3>\n<p>The subscript operator may take as its left side a pointer, array or slice. The index may be of any integer\ntype. TODO\n<em>NOTE</em> The subscript operator is not symmetrical as in C. For example in C3 <code dir=\"auto\">array[n] = 33</code> is allowed, but\nnot <code dir=\"auto\">n[array] = 33</code>. This is a change from C.</p>\n<h3 id=\"operands\">Operands</h3>\n<h3 id=\"compound-literals\">Compound Literals</h3>\n<p>Compound literals have the format</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">compound_literal   ::= (type) initializer_list</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">initializer_list   ::= '{' (initializer_param (',' initializer_param)* ','?)? '}'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">initializer_param  ::= expression | designator '=' expression</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">designator         ::= array_designator | range_designator | field_designator</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">array_designator   ::= '[' expression ']'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">range_designator   ::= '[' range_expression ']'</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">field_designator   ::= IDENTIFIER</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">range_expression   ::= (range_index)? '..' (range_index)?</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">range_index        ::= expression | '^' expression</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"compound_literal   ::= (type) initializer_listinitializer_list   ::= &#x27;{&#x27; (initializer_param (&#x27;,&#x27; initializer_param)* &#x27;,&#x27;?)? &#x27;}&#x27;initializer_param  ::= expression | designator &#x27;=&#x27; expressiondesignator         ::= array_designator | range_designator | field_designatorarray_designator   ::= &#x27;[&#x27; expression &#x27;]&#x27;range_designator   ::= &#x27;[&#x27; range_expression &#x27;]&#x27;field_designator   ::= IDENTIFIERrange_expression   ::= (range_index)? &#x27;..&#x27; (range_index)?range_index        ::= expression | &#x27;^&#x27; expression\"><div></div></button></div></figure></div>\n<p>Taking the address of a compound literal will yield a pointer to stack allocated temporary.</p>\n<h3 id=\"function-calls\">Function calls</h3>\n<h4 id=\"function-argument-resolution\">Function argument resolution</h4>\n<p>Call slots are in order: regular slots, vaarg slot, name-only slots.</p>\n<p>No regular slots may appear after the vaarg slot, however there may be named parameters with default values\nafter the vaarg slot if it’s not a raw vaarg.</p>\n<p>These “name-only” slots need to have a parameter name and a default value, and may only be called as named\narguments.</p>\n<p>Named arguments may never be <em>splat</em> expressions.</p>\n<ol>\n<li>Step through all the arguments, resolve the named arguments and determine if there are any regular arguments.</li>\n<li>If there are regular arguments, then named arguments may only be in name-only slots, otherwise it is an error.</li>\n<li>If there are named arguments in the regular slots, all slots not provided arguments must have default values.</li>\n<li>Proceed with evaluation of arguments from left to right in call invocation order.</li>\n<li>Regular arguments are placed in the regular slots from left to right.</li>\n<li>If a regular argument is a <em>splat</em> expression, evaluate it <em>without inference</em> and determine if it is an array, vector, untyped list or slice with a known size, otherwise it is an error.</li>\n<li>A regular argument <em>splat</em> will be expanded into as many slots as its length, this may expand into vaarg arguments.</li>\n<li>In the vaarg slot, <em>splatting</em> a slice will <em>forward</em> it.</li>\n<li>In the vaarg slot, <em>splatting</em> an array, vector or untyped list will expand its elements as if they were provided as arguments.</li>\n<li>A named argument may never appear more than once.</li>\n<li>The vaarg slot may never be accessed using named arguments.</li>\n</ol>\n<h4 id=\"varargs\">Varargs</h4>\n<p>For varargs, a <code dir=\"auto\">bool</code> or <em>any integer</em> smaller than what the C ABI specifies for the c <code dir=\"auto\">int</code> type is cast to <code dir=\"auto\">int</code>. Any\nfloat smaller than a double is cast to <code dir=\"auto\">double</code>. Compile time floats will be cast to double. Compile time integers will\nbe cast to c <code dir=\"auto\">int</code> type.</p>\n<h2 id=\"statements\">Statements</h2>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">stmt               ::= compound_stmt | non_compound_stmt</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">non_compound_stmt  ::= assert_stmt | if_stmt | while_stmt | do_stmt | foreach_stmt | foreach_r_stmt</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                       </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| for_stmt | return_stmt | break_stmt | continue_stmt | var_stmt</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                       </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| declaration_stmt | defer_stmt | nextcase_stmt | asm_block_stmt</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                       </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| ct_echo_stmt | ct_error_stmt | ct_assert_stmt | ct_if_stmt | ct_switch_stmt</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                       </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| ct_for_stmt | ct_foreach_stmt | expr_stmt</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"stmt               ::= compound_stmt | non_compound_stmtnon_compound_stmt  ::= assert_stmt | if_stmt | while_stmt | do_stmt | foreach_stmt | foreach_r_stmt                       | for_stmt | return_stmt | break_stmt | continue_stmt | var_stmt                       | declaration_stmt | defer_stmt | nextcase_stmt | asm_block_stmt                       | ct_echo_stmt | ct_error_stmt | ct_assert_stmt | ct_if_stmt | ct_switch_stmt                       | ct_for_stmt | ct_foreach_stmt | expr_stmt\"><div></div></button></div></figure></div>\n<h3 id=\"asm-block-statement\">Asm block statement</h3>\n<p>An asm block is either a string expression or a brace enclosed list of asm statements.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">asm_block_stmt      ::= \"asm\" (\"(\" constant_expr \")\" | \"{\" asm_stmt* \"}\")</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">asm_stmt            ::= asm_instr asm_exprs? \";\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">asm_instr           ::= (\"int\" | IDENTIFIER) (\".\" IDENTIFIER)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">asm_expr            ::= CT_IDENT | CT_CONST_IDENT | \"&#x26;\"? IDENTIFIER | CONST_IDENT | FLOAT_LITERAL</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">                        </span></span><span style=\"--0:#d6deeb;--1:#403f53\">| INTEGER | \"(\" expr \")\" | \"[\" asm_addr \"]\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">asm_addr            ::= asm_expr (additive_op asm_expr asm_addr_trail?)?</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">asm_addr_trail      ::= \"*\" INTEGER (additive_op INTEGER)? | (shift_op | additive_op) INTEGER</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"asm_block_stmt      ::= &#x22;asm&#x22; (&#x22;(&#x22; constant_expr &#x22;)&#x22; | &#x22;{&#x22; asm_stmt* &#x22;}&#x22;)asm_stmt            ::= asm_instr asm_exprs? &#x22;;&#x22;asm_instr           ::= (&#x22;int&#x22; | IDENTIFIER) (&#x22;.&#x22; IDENTIFIER)asm_expr            ::= CT_IDENT | CT_CONST_IDENT | &#x22;&#x26;&#x22;? IDENTIFIER | CONST_IDENT | FLOAT_LITERAL                        | INTEGER | &#x22;(&#x22; expr &#x22;)&#x22; | &#x22;[&#x22; asm_addr &#x22;]&#x22;asm_addr            ::= asm_expr (additive_op asm_expr asm_addr_trail?)?asm_addr_trail      ::= &#x22;*&#x22; INTEGER (additive_op INTEGER)? | (shift_op | additive_op) INTEGER\"><div></div></button></div></figure></div>\n<p>TODO</p>\n<h3 id=\"assert-statement\">Assert statement</h3>\n<p>The assert statement will evaluate the expression and call the panic function if it evaluates\nto false.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">assert_stmt        ::= \"assert\" \"(\" expr (\",\" assert_message)? \")\" \";\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">assert_message     ::= constant_expr (\",\" expr)*</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"assert_stmt        ::= &#x22;assert&#x22; &#x22;(&#x22; expr (&#x22;,&#x22; assert_message)? &#x22;)&#x22; &#x22;;&#x22;assert_message     ::= constant_expr (&#x22;,&#x22; expr)*\"><div></div></button></div></figure></div>\n<h4 id=\"conditional-inclusion\">Conditional inclusion</h4>\n<p><code dir=\"auto\">assert</code> statements are only included in “safe” builds. They may turn into <strong>assume directives</strong> for\nthe compiler on “fast” builds.</p>\n<h4 id=\"assert-message\">Assert message</h4>\n<p>The assert message is optional. It can be followed by an arbitrary number of expressions, in which case\nthe message is understood to be a format string, and the following arguments are passed as values to the\nformat function.</p>\n<p>The assert message must be a compile time constant. There are no restriction on the format argument expressions.</p>\n<h4 id=\"panic-function\">Panic function</h4>\n<p>If the assert message has no format arguments or no assert message is included,\nthen the regular panic function is called. If it has format arguments then <code dir=\"auto\">panicf</code> is called instead.</p>\n<p>In the case the <code dir=\"auto\">panicf</code> function does not exist (for example, compiling without the standard library),\nthen the format and the format arguments will be ignored and the <code dir=\"auto\">assert</code> will be treated\nas if no assert message was available.</p>\n<h3 id=\"break-statement\">Break statement</h3>\n<p>A break statement exits a <code dir=\"auto\">while</code>, <code dir=\"auto\">for</code>, <code dir=\"auto\">do</code>, <code dir=\"auto\">foreach</code> or <code dir=\"auto\">switch</code> scope. A labelled break\nmay also exit a labelled <code dir=\"auto\">if</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">break_stmt         ::= \"break\" label? \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"break_stmt         ::= &#x22;break&#x22; label? &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"break-labels\">Break labels</h4>\n<p>If a break has a label, then it will instead exit an outer scope with the label.</p>\n<h4 id=\"unreachable-code\">Unreachable code</h4>\n<p>Any statement following break in the same scope is considered unreachable.</p>\n<h3 id=\"compile-time-echo-statement\">Compile time echo statement</h3>\n<p>During parsing, the compiler will output the text in the statement when it is semantically checked.\nThe statement will be turned into a NOP statement after checking.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ct_echo_stmt       ::= \"$echo\" constant_expr \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"ct_echo_stmt       ::= &#x22;$echo&#x22; constant_expr &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"the-message\">The message</h4>\n<p>The message must be a compile time constant string.</p>\n<h3 id=\"compile-time-assert-statement\">Compile time assert statement</h3>\n<p>During parsing, the compiler will check the compile time expression\nand create a compile time error with the optional message. After\nevaluation, the <code dir=\"auto\">$assert</code> becomes a <strong>NOP</strong> statement.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ct_assert_stmt     ::= \"$assert\" constant_expr (\":\" constant_expr) \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"ct_assert_stmt     ::= &#x22;$assert&#x22; constant_expr (&#x22;:&#x22; constant_expr) &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"evaluated-expression\">Evaluated expression</h4>\n<p>The checked expression must evaluate to a boolean compile time constant.</p>\n<h4 id=\"error-message\">Error message</h4>\n<p>The second parameter, which is optional, must evaluate to a constant string.</p>\n<h3 id=\"compile-time-error-statement\">Compile time error statement</h3>\n<p>During parsing, when semantically checked this statement will output\na compile time error with the message given.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ct_error_stmt      ::= \"$error\" constant_expr \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"ct_error_stmt      ::= &#x22;$error&#x22; constant_expr &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"error-message-1\">Error message</h4>\n<p>The parameter must evaluate to a constant string.</p>\n<h3 id=\"compile-time-if-statement\">Compile time if statement</h3>\n<p>If the cond expression is true, the then-branch is processed by the compiler. If it\nevaluates to false, the else-branch is processed if it exists.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ct_if_stmt         ::= \"$if\" constant_expr \":\" stmt* (\"$else\" stmt*)? \"$endif\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"ct_if_stmt         ::= &#x22;$if&#x22; constant_expr &#x22;:&#x22; stmt* (&#x22;$else&#x22; stmt*)? &#x22;$endif&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"cond-expression\">Cond expression</h4>\n<p>The cond expression must be possible to evaluate to true or false at compile time.</p>\n<h4 id=\"scopes\">Scopes</h4>\n<p>The “then” and “else” branches will add a compile time scope that is exited when reaching <code dir=\"auto\">$endif</code>.\nIt adds no runtime scope.</p>\n<h4 id=\"evaluation\">Evaluation</h4>\n<p>Statements in the branch not picked will not be semantically checked.</p>\n<h3 id=\"compile-time-switch-statement\">Compile time switch statement</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ct_switch_stmt     ::= \"$switch\" (\"(\" ct_expr_or_type \")\")? ct_case_stmt+ \"$endswitch\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ct_case_stmt       ::= (\"$default\" | \"$case\" ct_expr_or_type) \":\" stmt*</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"ct_switch_stmt     ::= &#x22;$switch&#x22; (&#x22;(&#x22; ct_expr_or_type &#x22;)&#x22;)? ct_case_stmt+ &#x22;$endswitch&#x22;ct_case_stmt       ::= (&#x22;$default&#x22; | &#x22;$case&#x22; ct_expr_or_type) &#x22;:&#x22; stmt*\"><div></div></button></div></figure></div>\n<h4 id=\"no-cond-expression-switch\">No cond expression switch</h4>\n<p>If the cond expression is missing, evaluation will go through each case until one case expression\nevaluates to true.</p>\n<h4 id=\"type-expressions\">Type expressions</h4>\n<p>If a cond expression is a type, then all case statement expressions must be types as well.</p>\n<h4 id=\"ranged-cases\">Ranged cases</h4>\n<p>Compile time switch does not support ranged cases.</p>\n<h4 id=\"fallthrough\">Fallthrough</h4>\n<p>If a case clause has no statements, then when executing the case, rather than exiting the switch,\nthe next case clause immediately following it will be used. If that one should also be missing statements,\nthe procedure will be repeated until a case clause with statements is encountered,\nor the end of the switch is reached.</p>\n<h4 id=\"break-and-nextcase\">Break and nextcase</h4>\n<p>Compile time switches do not support <code dir=\"auto\">break</code> nor <code dir=\"auto\">nextcase</code>.</p>\n<h4 id=\"evaluation-of-statements\">Evaluation of statements</h4>\n<p>Only the case which is first matched has its statements processed by the compiler. All other statements\nare ignored and will not be semantically checked.</p>\n<h3 id=\"continue-statement\">Continue statement</h3>\n<p>A continue statement jumps to the cond expression of a <code dir=\"auto\">while</code>, <code dir=\"auto\">for</code>, <code dir=\"auto\">do</code> or <code dir=\"auto\">foreach</code></p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">continue_stmt      ::= \"continue\" label? \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"continue_stmt      ::= &#x22;continue&#x22; label? &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"continue-labels\">Continue labels</h4>\n<p>If a <code dir=\"auto\">continue</code> has a label, then it will jump to the cond of the while/for/do in the outer scope\nwith the corresponding label.</p>\n<h4 id=\"unreachable-code-1\">Unreachable code</h4>\n<p>Any statement following <code dir=\"auto\">continue</code> in the same scope is considered unreachable.</p>\n<h3 id=\"declaration-statement\">Declaration statement</h3>\n<p>A declaration statement adds a new runtime or compile time variable to the current scope. It is available after the\ndeclaration statement.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">declaration_stmt   ::= const_declaration | local_decl_storage? optional_type decls_after_type \";\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">local_decl_storage ::= \"tlocal\" | \"static\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">decls_after_type   ::= local_decl_after_type (\",\" local_decl_after_type)*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">decl_after_type    ::= CT_IDENT (\"=\" constant_expr)? | IDENTIFIER opt_attributes (\"=\" expr)?</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"declaration_stmt   ::= const_declaration | local_decl_storage? optional_type decls_after_type &#x22;;&#x22;local_decl_storage ::= &#x22;tlocal&#x22; | &#x22;static&#x22;decls_after_type   ::= local_decl_after_type (&#x22;,&#x22; local_decl_after_type)*decl_after_type    ::= CT_IDENT (&#x22;=&#x22; constant_expr)? | IDENTIFIER opt_attributes (&#x22;=&#x22; expr)?\"><div></div></button></div></figure></div>\n<h4 id=\"thread-local-storage\">Thread local storage</h4>\n<p>Using <code dir=\"auto\">tlocal</code> allocates the runtime variable as a <strong>thread local</strong> variable. In effect this is the same as declaring\nthe variable as a global <code dir=\"auto\">tlocal</code> variable, but the visibility is limited to the function. <code dir=\"auto\">tlocal</code> may not be\ncombined with <code dir=\"auto\">static</code>.</p>\n<p>The initializer for a <code dir=\"auto\">tlocal</code> variable must be a valid global init expression.</p>\n<h4 id=\"static-storage\">Static storage</h4>\n<p>Using <code dir=\"auto\">static</code> allocates the runtime variable as a function <strong>global</strong> variable. In effect this is the same as declaring\na global, but visibility is limited to the function. <code dir=\"auto\">static</code> may not be combined with <code dir=\"auto\">tlocal</code>.</p>\n<p>The initializer for a <code dir=\"auto\">static</code> variable must be a valid global init expression.</p>\n<h4 id=\"scopes-1\">Scopes</h4>\n<p>Runtime variables are added to the runtime scope, compile time variables to the compile time scope. See **var statements\n**.</p>\n<h4 id=\"multiple-declarations\">Multiple declarations</h4>\n<p>If more than one variable is declared, no init expressions are allowed for any of the variables.</p>\n<h4 id=\"no-init-expression\">No init expression</h4>\n<p>If no init expression is provided, the variable is <strong>zero initialized</strong>.</p>\n<h4 id=\"opt-out-of-zero-initialization\">Opt-out of zero initialization</h4>\n<p>Using the @noinit attribute opts out of <strong>zero initialization</strong>.</p>\n<h4 id=\"self-referencing-initialization\">Self referencing initialization</h4>\n<p>An init expression may refer to the <strong>address</strong> of the same variable that is declared, but not the <strong>value</strong> of the\nvariable.</p>\n<p>Example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">void</span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">&#x26;</span><span style=\"--0:#D6DEEB;--1:#403F53\">a;</span><span style=\"--0:#809191;--1:#5E6578\">  // Valid</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#7FDBCA;--1:#097174\">+</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">1</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span><span style=\"--0:#809191;--1:#5E6578\"> // Invalid</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"void* a = &#x26;a;  // Validint a = a + 1; // Invalid\"><div></div></button></div></figure></div>\n<h3 id=\"defer-statement\">Defer statement</h3>\n<p>The defer statements are executed at (runtime) scope exit, whether through <code dir=\"auto\">return</code>, <code dir=\"auto\">break</code>, <code dir=\"auto\">continue</code> or rethrow.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">defer_stmt         ::= \"defer\" (\"try\" | \"catch\")? stmt</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"defer_stmt         ::= &#x22;defer&#x22; (&#x22;try&#x22; | &#x22;catch&#x22;)? stmt\"><div></div></button></div></figure></div>\n<h4 id=\"defer-in-defer\">Defer in defer</h4>\n<p>The defer body (statement) may not be a defer statement. However, if the body is a compound statement then\nthis may have any number of defer statements.</p>\n<h4 id=\"static-and-tlocal-variables-in-defer\">Static and tlocal variables in defer</h4>\n<p>Static and tlocal variables are allowed in a defer statement. Only a single variable is instantiated regardless of\nthe number of inlining locations.</p>\n<h4 id=\"defer-and-return\">Defer and return</h4>\n<p>If the <code dir=\"auto\">return</code> has an expression, then it is evaluated before the defer statements (due to exit from the current\nfunction scope),\nare executed.</p>\n<p>Example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">defer a</span><span style=\"--0:#C792EA;--1:#8D46B4\">++</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#809191;--1:#5E6578\">// This is equivalent to</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#F78C6C;--1:#AA0982\">0</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> temp </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> a;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">a</span><span style=\"--0:#C792EA;--1:#8D46B4\">++</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">return</span><span style=\"--0:#D6DEEB;--1:#403F53\"> temp;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int a = 0;defer a++;return a;// This is equivalent toint a = 0;int temp = a;a++;return temp;\"><div></div></button></div></figure></div>\n<h4 id=\"defer-and-jump-statements\">Defer and jump statements</h4>\n<p>A defer body may not contain a <code dir=\"auto\">break</code>, <code dir=\"auto\">continue</code>, <code dir=\"auto\">return</code> or rethrow that would exit the statement.</p>\n<h4 id=\"defer-execution\">Defer execution</h4>\n<p>Defer statements are executed in the reverse order of their declaration, starting from the last declared\ndefer statement.</p>\n<h4 id=\"defer-try\"><code dir=\"auto\">defer try</code></h4>\n<p>A <code dir=\"auto\">defer try</code> type of defer will only execute if the scope is left through normal fallthrough, <code dir=\"auto\">break</code>,\n<code dir=\"auto\">continue</code> or a <code dir=\"auto\">return</code> with a result.</p>\n<p>It will not execute if the exit is through a rethrow or a <code dir=\"auto\">return</code> with an optional value.</p>\n<h4 id=\"defer-catch\"><code dir=\"auto\">defer catch</code></h4>\n<p>A <code dir=\"auto\">defer catch</code> type of defer will only execute if the scope is left through a rethrow or a <code dir=\"auto\">return</code> with an optional\nvalue</p>\n<p>It will not execute if the exit is a normal fallthrough, <code dir=\"auto\">break</code>, <code dir=\"auto\">continue</code> or a <code dir=\"auto\">return</code> with a result.</p>\n<h4 id=\"non-regular-returns---longjmp-panic-and-other-errors\">Non-regular returns - longjmp, panic and other errors</h4>\n<p>Defers will not execute when doing <code dir=\"auto\">longjmp</code> terminating through a <code dir=\"auto\">panic</code> or other error. They\nare only invoked on regular scope exits.</p>\n<h3 id=\"expr-statement\">Expr statement</h3>\n<p>An expression statement evaluates an expression.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">expr_stmt          ::= expr \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"expr_stmt          ::= expr &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"no-discard\">No discard</h4>\n<p>If the expression is a function or macro call either returning an optional <em>or</em> annotated <code dir=\"auto\">@nodiscard</code>, then\nthe expression is a compile time error. A function or macro returning an optional can use the <code dir=\"auto\">@maydiscard</code>\nattribute to suppress this error.</p>\n<h3 id=\"if-statement\">If statement</h3>\n<p>An if statement will evaluate the cond expression, then execute the first statement (the “then clause”) in the if-body\nif it evaluates to “true”, otherwise execute the else clause. If no else clause exists, then the\nnext statement is executed.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">if_stmt            ::= \"if\" (label \":\")? \"(\" cond_expr \")\" if_body</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">if_body            ::= non_compound_stmt | compound_stmt else_clause? | \"{\" switch_body \"}\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">else_clause        ::= \"else\" (if_stmt | compound_stmt)</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"if_stmt            ::= &#x22;if&#x22; (label &#x22;:&#x22;)? &#x22;(&#x22; cond_expr &#x22;)&#x22; if_bodyif_body            ::= non_compound_stmt | compound_stmt else_clause? | &#x22;{&#x22; switch_body &#x22;}&#x22;else_clause        ::= &#x22;else&#x22; (if_stmt | compound_stmt)\"><div></div></button></div></figure></div>\n<h4 id=\"scopes-2\">Scopes</h4>\n<p>Both the “then” clause and the else clause open new scopes, even if they are non-compound statements.\nThe cond expression scope is valid until the exit of the entire statement, so any declarations in the\ncond expression are available both in then and else clauses. Declarations in the “then” clause is not available\nin the else clause and vice versa.</p>\n<h4 id=\"special-parsing-of-the-then-clause\">Special parsing of the “then” clause</h4>\n<p>If the then-clause isn’t a compound statement, then it must follow on the same row as the cond expression.\nIt may not appear on a consecutive row.</p>\n<h4 id=\"break\">Break</h4>\n<p>It is possible to use labelled break to break out of an if statement. Note that an unlabelled <code dir=\"auto\">break</code> may not\nbe used.</p>\n<h4 id=\"if-try\">If-try</h4>\n<p>The cond expression may be a try-unwrap chain. In this case, the unwrapped variables are\nscoped to the “then” clause only.</p>\n<h4 id=\"if-catch\">If-catch</h4>\n<p>The cond expression may be a catch-unwrap. The unwrap is scoped to the “then” clause only.\nIf one or more variables are in the catch, then the “else” clause have these variables\nimplicitly unwrapped.</p>\n<p>Example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int! a = foo();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int! b = foo();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">if (catch a, b)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">// Do something</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">else</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">    </span></span><span style=\"--0:#d6deeb;--1:#403f53\">int x = a + b; // Valid, a and b are implicitly unwrapped.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int! a = foo();int! b = foo();if (catch a, b){    // Do something}else{    int x = a + b; // Valid, a and b are implicitly unwrapped.}\"><div></div></button></div></figure></div>\n<h4 id=\"if-catch-implicit-unwrap\">If-catch implicit unwrap</h4>\n<p>If an if-catch’s “then”-clause will jump out of the outer scope in all code paths and\nthe catch is on one or more variables, then this variable(s) will be implicitly unwrapped in the outer scope\nafter the if-statement.</p>\n<p>Example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int! a = foo();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">if (catch a)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#d6deeb;--1:#403f53\">  </span></span><span style=\"--0:#d6deeb;--1:#403f53\">return;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">}</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int x = a; // Valid, a is implicitly unwrapped.</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"int! a = foo();if (catch a){  return;}int x = a; // Valid, a is implicitly unwrapped.\"><div></div></button></div></figure></div>\n<h3 id=\"nextcase-statement\">Nextcase statement</h3>\n<p>Nextcase will jump to another <code dir=\"auto\">switch</code> case.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">nextcase_stmt      ::= \"nextcase\" ((label \":\")? (expr | \"default\"))? \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"nextcase_stmt      ::= &#x22;nextcase&#x22; ((label &#x22;:&#x22;)? (expr | &#x22;default&#x22;))? &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"labels\">Labels</h4>\n<p>When a nextcase has a label, the jump is to the switch in an outer scope with the corresponding label.</p>\n<h4 id=\"no-expression-jumps\">No expression jumps</h4>\n<p>A <code dir=\"auto\">nextcase</code> without any expression jumps to the next case clause in the current switch. It is not possible\nto use no expression <code dir=\"auto\">nextcase</code> with labels.</p>\n<h4 id=\"jumps-to-default\">Jumps to default</h4>\n<p>Using <code dir=\"auto\">default</code> jumps to the default clause of a switch.</p>\n<h4 id=\"missing-case\">Missing case</h4>\n<p>If the switch has constant case values, and the nextcase expression is constant, then the value of\nthe expression must match a case clause. Not matching a case is a compile time error.</p>\n<p>If one or more cases are non-constant and/or the nextcase expression is non-constant, then no compile time check is\nmade.</p>\n<h4 id=\"variable-expression\">Variable expression</h4>\n<p>If the nextcase has a non-constant expression, or the cases are not all constant, then first the nextcase expression\nis evaluated. Next, execution will proceed <em>as if</em> the switch was invoked again, but with the nextcase expression as the\nswitch cond expression. See <strong>switch statement</strong>.</p>\n<p>If the switch does not have a cond expression, nextcase with an expression is not allowed.</p>\n<h4 id=\"unreachable-code-2\">Unreachable code</h4>\n<p>Any statement in the same scope after a <code dir=\"auto\">nextcase</code> are considered <strong>unreachable</strong>.</p>\n<h3 id=\"switch-statement\">Switch statement</h3>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">switch_stmt        ::= \"switch\" (label \":\")? (\"(\" cond_expr \")\")? switch body</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">switch_body        ::= \"{\" case_clause* \"}\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">case_clause        ::= default_stmt | case_stmt</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">default_stmt       ::= \"default\" \":\" stmt*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">case_stmt          ::= \"case\" label? expr (\"..\" expr)? \":\" stmt*</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"switch_stmt        ::= &#x22;switch&#x22; (label &#x22;:&#x22;)? (&#x22;(&#x22; cond_expr &#x22;)&#x22;)? switch bodyswitch_body        ::= &#x22;{&#x22; case_clause* &#x22;}&#x22;case_clause        ::= default_stmt | case_stmtdefault_stmt       ::= &#x22;default&#x22; &#x22;:&#x22; stmt*case_stmt          ::= &#x22;case&#x22; label? expr (&#x22;..&#x22; expr)? &#x22;:&#x22; stmt*\"><div></div></button></div></figure></div>\n<h4 id=\"regular-switch\">Regular switch</h4>\n<p>If the cond expression exists and all case statements have constant expression, then first the\ncond expression is evaluated, next the case corresponding to the expression’s value will be jumped to\nand the statement will be executed. After reaching the end of the statements and a new case clause <em>or</em> the\nend of the switch body, the execution will jump to the first statement after the switch.</p>\n<h4 id=\"if-switch\">If-switch</h4>\n<p>If the cond expression is missing or the case statements are non-constant expressions, then each case clause will\nbe evaluated in order after the cond expression has been evaluated (if it exists):</p>\n<ol>\n<li>If a cond expression exists, calculate the case expression and execute the case if it is matching the\ncond expression. A default statement has no expression and will always be considered matching the cond expression\nreached.</li>\n<li>If no con expression exists, calculate the case expression and execute the case if the expression evaluates to\n“true” when implicitly converted to boolean. A default statement will always be considered having the “true” result.</li>\n</ol>\n<h4 id=\"any-switch\">Any-switch</h4>\n<p>If the cond expression is an <code dir=\"auto\">any</code> type, the switch is handled as if switching was done over the <code dir=\"auto\">type</code>\nfield of the <code dir=\"auto\">any</code>. This field has the type of <a href=\"#typeid-type\">typeid</a>, and the cases follows the rules\nfor <a href=\"#switching-over-typeid\">switching over typeid</a>.</p>\n<p>If the cond expression is a variable, then this variable is implicitly converted to a pointer with\nthe pointee type given by the case statement.</p>\n<p>Example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"c\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">any a </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">abc</span><span style=\"--0:#D6DEEB;--1:#403F53\">();</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">switch</span><span style=\"--0:#D6DEEB;--1:#403F53\"> (a)</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">{</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">int</span><span style=\"--0:#D6DEEB;--1:#403F53\"> b </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">a;</span><span style=\"--0:#809191;--1:#5E6578\">   // a is int*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#C792EA;--1:#8D46B4\">float</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#C792EA;--1:#8D46B4\">float</span><span style=\"--0:#D6DEEB;--1:#403F53\"> z </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">a;</span><span style=\"--0:#809191;--1:#5E6578\"> // a is float*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">case</span><span style=\"--0:#D6DEEB;--1:#403F53\"> Bar:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#D6DEEB;--1:#403F53\">        </span></span><span style=\"--0:#D6DEEB;--1:#403F53\">Bar f </span><span style=\"--0:#C792EA;--1:#8D46B4\">=</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">*</span><span style=\"--0:#D6DEEB;--1:#403F53\">a;</span><span style=\"--0:#809191;--1:#5E6578\">   // a is Bar*</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">    </span><span style=\"--0:#C792EA;--1:#8D46B4\">default</span><span style=\"--0:#D6DEEB;--1:#403F53\">:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\">        </span><span style=\"--0:#809191;--1:#5E6578\">// a is not unwrapped</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#D6DEEB;--1:#403F53\">}</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"any a = abc();switch (a){    case int:        int b = *a;   // a is int*    case float:        float z = *a; // a is float*    case Bar:        Bar f = *a;   // a is Bar*    default:        // a is not unwrapped}\"><div></div></button></div></figure></div>\n<h4 id=\"ranged-cases-1\">Ranged cases</h4>\n<p>Cases may be ranged. The start and end of the range must both be constant integer values. The start must\nbe less or equal to the end value. Using non-integers or non-constant values is a compile time error.</p>\n<h4 id=\"fallthrough-1\">Fallthrough</h4>\n<p>If a case clause has no statements, then when executing the case, rather than exiting the switch, the next case clause\nimmediately following it will be executed. If that one should also be missing statement, the procedure\nwill be repeated until a case clause with statements is encountered (and executed), or the end of the switch is reached.</p>\n<h4 id=\"exhaustive-switch\">Exhaustive switch</h4>\n<p>If a switch case has a default clause <em>or</em> it is switching over an enum and there exists a case for each enum value\nthen the switch is exhaustive.</p>\n<h4 id=\"break-1\">Break</h4>\n<p>If an unlabelled break, or a break with the switch’s label is encountered,\nthen the execution will jump out of the switch and proceed directly after the end of the switch body.</p>\n<h4 id=\"unreachable-code-3\">Unreachable code</h4>\n<p>If a switch is exhaustive and all case clauses end with a jump instruction, containing no break statement out\nof the current switch, then the code directly following the switch will be considered <strong>unreachable</strong>.</p>\n<h4 id=\"switching-over-typeid\">Switching over typeid</h4>\n<p>If the switch cond expression is a typeid, then case declarations may use only the type name after the case,\nwhich will be interpreted as having an implicit <code dir=\"auto\">.typeid</code>. Example: <code dir=\"auto\">case int:</code> will be interpreted as if\nwritten <code dir=\"auto\">case int.typeid</code>.</p>\n<h4 id=\"nextcase-without-expression\">Nextcase without expression</h4>\n<p>Without a value <code dir=\"auto\">nextcase</code> will jump to the beginning of the next case clause. It is not allowed to\nput <code dir=\"auto\">nextcase</code> without an expression if there are no following case clauses.</p>\n<h4 id=\"nextcase-with-expression\">Nextcase with expression</h4>\n<p>Nextcase with an expression will evaluate the expression and then jump <em>as if</em> the switch was entered with\nthe cond expression corresponding to the value of the nextcase expression. Nextcase with an expression cannot\nbe used on a switch without a cond expression.</p>\n<h4 id=\"do-statement\">Do statement</h4>\n<p>The do statement first evaluates its body (inner statement), then evaluates the cond expression.\nIf the cond expression evaluates to true, jumps back into the body and repeats the process.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">do_stmt            ::= \"do\" label? compound_stmt (\"while\" \"(\" cond_expr \")\")? \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"do_stmt            ::= &#x22;do&#x22; label? compound_stmt (&#x22;while&#x22; &#x22;(&#x22; cond_expr &#x22;)&#x22;)? &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"unreachable-code-4\">Unreachable code</h4>\n<p>The statement after a <code dir=\"auto\">do</code> is considered unreachable if the cond expression cannot ever be false\nand there is no <code dir=\"auto\">break</code> out of the do.</p>\n<h4 id=\"break-2\">Break</h4>\n<p><code dir=\"auto\">break</code> will exit the do with execution continuing on the following statement.</p>\n<h4 id=\"continue\">Continue</h4>\n<p><code dir=\"auto\">continue</code> will jump directly to the evaluation of the cond, as if the end of the statement had been reached.</p>\n<h4 id=\"do-block\">Do block</h4>\n<p>If no <code dir=\"auto\">while</code> part exists, it will only execute the block once, as if it ended with <code dir=\"auto\">while (false)</code>, this is\ncalled a “do block”</p>\n<h3 id=\"for-statement\">For statement</h3>\n<p>The <code dir=\"auto\">for</code> statement will perform the (optional) init expression. The cond expression will then be tested. If\nit evaluates to <code dir=\"auto\">true</code> then the body will execute, followed by the incr expression. After execution will\njump back to the cond expression and execution will repeat until the cond expression evaluates to <code dir=\"auto\">false</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">for_stmt           ::= \"for\" label? \"(\" init_expr \";\" cond_expr? \";\" incr_expr \")\" stmt</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">init_expr          ::= decl_expr_list?</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">incr_expr          ::= expr_list?</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"for_stmt           ::= &#x22;for&#x22; label? &#x22;(&#x22; init_expr &#x22;;&#x22; cond_expr? &#x22;;&#x22; incr_expr &#x22;)&#x22; stmtinit_expr          ::= decl_expr_list?incr_expr          ::= expr_list?\"><div></div></button></div></figure></div>\n<h4 id=\"init-expression\">Init expression</h4>\n<p>The init expression is only executed once before the rest of the for loop is executed.\nAny declarations in the init expression will be in scope until the for loop exits.</p>\n<p>The init expression may optionally be omitted.</p>\n<h4 id=\"incr-expression\">Incr expression</h4>\n<p>The incr expression is evaluated before evaluating the cond expr every time except for the first one.</p>\n<p>The incr expression may optionally be omitted.</p>\n<h4 id=\"cond-expression-1\">Cond expression</h4>\n<p>The cond expression is evaluated every loop. Any declaration in the cond expression is scoped to the\ncurrent loop, i.e. it will be reinitialized at the start of every loop.</p>\n<p>The cond expression may optionally be omitted. This is equivalent to setting the cond expression to\nalways return <code dir=\"auto\">true</code>.</p>\n<h4 id=\"unreachable-code-5\">Unreachable code</h4>\n<p>The statement after a <code dir=\"auto\">for</code> is considered unreachable if the cond expression cannot ever be false, or is\nomitted and there is no <code dir=\"auto\">break</code> out of the loop.</p>\n<h4 id=\"break-3\">Break</h4>\n<p><code dir=\"auto\">break</code> will exit the <code dir=\"auto\">for</code> with execution continuing on the following statement after the <code dir=\"auto\">for</code>.</p>\n<h4 id=\"continue-1\">Continue</h4>\n<p><code dir=\"auto\">continue</code> will jump directly to the evaluation of the cond, as if the end of the statement had been reached.</p>\n<h4 id=\"equivalence-of-while-and-for\">Equivalence of <code dir=\"auto\">while</code> and <code dir=\"auto\">for</code></h4>\n<p>A <code dir=\"auto\">while</code> loop is functionally equivalent to a <code dir=\"auto\">for</code> loop without init and incr expressions.</p>\n<h3 id=\"foreach-and-foreach_r-statements\"><code dir=\"auto\">foreach</code> and <code dir=\"auto\">foreach_r</code> statements</h3>\n<p>The <code dir=\"auto\">foreach</code> statement will loop over a sequence of values. The <code dir=\"auto\">foreach_r</code> is equivalent to\n<code dir=\"auto\">foreach</code> but the order of traversal is reversed.\n<code dir=\"auto\">foreach</code> starts with element <code dir=\"auto\">0</code> and proceeds step by step to element <code dir=\"auto\">len - 1</code>.\n<code dir=\"auto\">foreach_r</code> starts starts with element <code dir=\"auto\">len - 1</code> and proceeds step by step to element <code dir=\"auto\">0</code>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">foreach_stmt       ::= \"foreach\" label? \"(\" foreach_vars \":\" expr \")\" stmt</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">foreach_r_stmt     ::= \"foreach_r\" label? \"(\" foreach_vars \":\" expr \")\" stmt</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">foreach_vars       ::= (foreach_index \",\")? foreach_var</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">foreach_var        ::= type? \"&#x26;\"? IDENTIFIER</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"foreach_stmt       ::= &#x22;foreach&#x22; label? &#x22;(&#x22; foreach_vars &#x22;:&#x22; expr &#x22;)&#x22; stmtforeach_r_stmt     ::= &#x22;foreach_r&#x22; label? &#x22;(&#x22; foreach_vars &#x22;:&#x22; expr &#x22;)&#x22; stmtforeach_vars       ::= (foreach_index &#x22;,&#x22;)? foreach_varforeach_var        ::= type? &#x22;&#x26;&#x22;? IDENTIFIER\"><div></div></button></div></figure></div>\n<h4 id=\"break-4\">Break</h4>\n<p><code dir=\"auto\">break</code> will exit the foreach statement with execution continuing on the following statement after.</p>\n<h4 id=\"continue-2\">Continue</h4>\n<p><code dir=\"auto\">continue</code> will cause the next iteration to commence, as if the end of the statement had been reached.</p>\n<h4 id=\"iteration-by-value-or-reference\">Iteration by value or reference</h4>\n<p>Normally iteration are by value. Each element is copied into the foreach variable. If <code dir=\"auto\">&#x26;</code>\nis added before the variable name, the elements will be retrieved by reference instead, and consequently\nthe type of the variable will be a pointer to the element type instead.</p>\n<h4 id=\"foreach-variable\">Foreach variable</h4>\n<p>The foreach variable may omit the type. In this case the type is inferred. If the type differs from the element\ntype, then an implicit conversion will be attempted. Failing this is a compile time error.</p>\n<h4 id=\"foreach-index\">Foreach index</h4>\n<p>If a variable name is added before the foreach variable, then this variable will receive the index of the element.\nFor <code dir=\"auto\">foreach_r</code> this mean that the first value of the index will be <code dir=\"auto\">len - 1</code>.</p>\n<p>The index type defaults to <code dir=\"auto\">usz</code>.</p>\n<p>If an optional type is added to the index, the index will be converted to this type. The type must be an\ninteger type. The conversion happens as if the conversion was a direct cast. If the actual index value\nwould exceed the maximum representable value of the type, this does not affect the actual iteration, but\nmay cause the index value to take on an incorrect value due to the cast.</p>\n<p>For example, if the optional index type is <code dir=\"auto\">char</code> and the actual index is <code dir=\"auto\">256</code>, then the index value would show <code dir=\"auto\">0</code>\nas <code dir=\"auto\">(char)256</code> evaluates to zero.</p>\n<p>Modifying the index variable will not affect the foreach iteration.</p>\n<h4 id=\"foreach-support\">Foreach support</h4>\n<p>Foreach is natively supported for any slice, array, pointer to an array, vector and pointer to a vector.\nThese types support both iteration by value and reference.</p>\n<p>In addition, a type with <strong>operator overload</strong> for <code dir=\"auto\">len</code> and <code dir=\"auto\">[]</code> will support iteration by value,\nand a type with <strong>operator overload</strong> for <code dir=\"auto\">len</code> and <code dir=\"auto\">&#x26;[]</code> will support iteration by reference.</p>\n<h3 id=\"return-statement\">Return statement</h3>\n<p>The return statement evaluates its expression (if present) and returns the result.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">return_stmt        ::= \"return\" expr? \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"return_stmt        ::= &#x22;return&#x22; expr? &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"jumps-in-return-statements\">Jumps in return statements</h4>\n<p>If the expression should in itself cause an implicit return, for example due to the rethrow operator <code dir=\"auto\">!</code>, then this\njump will happen before the return.</p>\n<p>An example:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">return foo()!;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">// is equivalent to:</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">int temp = foo()!;</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">return temp;</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"return foo()!;// is equivalent to:int temp = foo()!;return temp;\"><div></div></button></div></figure></div>\n<h4 id=\"empty-returns\">Empty returns</h4>\n<p>An empty return is equivalent to a return with a void type. Consequently constructs like <code dir=\"auto\">foo(); return;</code>\nand <code dir=\"auto\">return (void)foo();</code>\nare equivalent.</p>\n<h4 id=\"unreachable-code-6\">Unreachable code</h4>\n<p>Any statement directly following a return in the same scope are considered unreachable.</p>\n<h3 id=\"while-statement\">While statement</h3>\n<p>The while statement evaluates the cond expression and executes the statement if it evaluates to true.\nAfter this the cond expression is evaluated again and the process is repeated until cond expression returns false.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">while_stmt         ::= \"while\" label? \"(\" cond_expr \")\" stmt</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"while_stmt         ::= &#x22;while&#x22; label? &#x22;(&#x22; cond_expr &#x22;)&#x22; stmt\"><div></div></button></div></figure></div>\n<h4 id=\"unreachable-code-7\">Unreachable code</h4>\n<p>The statement after a while is considered unreachable if the cond expression cannot ever be false\nand there is no <code dir=\"auto\">break</code> out of the while.</p>\n<h4 id=\"break-5\">Break</h4>\n<p><code dir=\"auto\">break</code> will exit the while with execution continuing on the following statement.</p>\n<h4 id=\"continue-3\">Continue</h4>\n<p><code dir=\"auto\">continue</code> will jump directly to the evaluation of the cond, as if the end of the statement had been reached.</p>\n<h3 id=\"var-statement\">Var statement</h3>\n<p>A var statement declares a variable with inferred type, or a compile time type variable. It can be used both\nfor runtime and compile time variables. The use for runtime variables is limited to macros.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">var_stmt           ::= \"var\" IDENTIFIER | CT_IDENT | CT_TYPE_IDENT (\"=\" expr)? \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"var_stmt           ::= &#x22;var&#x22; IDENTIFIER | CT_IDENT | CT_TYPE_IDENT (&#x22;=&#x22; expr)? &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"inferring-type\">Inferring type</h4>\n<p>In the case of a runtime variable, the type is inferred from the expression. Not providing an expression\nis a compile time error. The expression must resolve to a runtime type.</p>\n<p>For compile time variables, the expression is optional. The expression may resolve to a runtime or compile time type.</p>\n<h4 id=\"scope\">Scope</h4>\n<p>Runtime variables will follow the runtime scopes, identical to behaviour in a declaration statement. The compile\ntime variables will follow the compile time scopes which are delimited by scoping compile time\nstatements (<code dir=\"auto\">$if</code>, <code dir=\"auto\">$switch</code>,\n<code dir=\"auto\">$foreach</code> and <code dir=\"auto\">$for</code>).</p>\n<h2 id=\"attributes\">Attributes</h2>\n<p>Attributes are modifiers attached to modules, variables, type declarations etc.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>name</th><th>used with</th></tr></thead><tbody><tr><td><code dir=\"auto\">@align</code></td><td>fn, const, variables, user-defined types, struct member</td></tr><tr><td><code dir=\"auto\">@benchmark</code></td><td>module, fn</td></tr><tr><td><code dir=\"auto\">@bigendian</code></td><td>bitstruct only</td></tr><tr><td><code dir=\"auto\">@builtin</code></td><td>macro, fn, global, constant</td></tr><tr><td><code dir=\"auto\">@callconv</code></td><td>fn, call</td></tr><tr><td><code dir=\"auto\">@deprecated</code></td><td>fn, macro, interface, variables, constants, user-defined types, struct member</td></tr><tr><td><code dir=\"auto\">@dynamic</code></td><td>fn</td></tr><tr><td><code dir=\"auto\">@export</code></td><td>fn, globals, constants, struct, union, enum, fault</td></tr><tr><td><code dir=\"auto\">@extern</code></td><td>fn, globals, constants, user-defined types</td></tr><tr><td><code dir=\"auto\">@if</code></td><td>all except local variables and calls</td></tr><tr><td><code dir=\"auto\">@inline</code></td><td>fn, call</td></tr><tr><td><code dir=\"auto\">@interface</code></td><td>fn</td></tr><tr><td><code dir=\"auto\">@littleendian</code></td><td>bitstruct only</td></tr><tr><td><code dir=\"auto\">@local</code></td><td>module, fn, macro, globals, constants, user-defined types, attributes and aliases</td></tr><tr><td><code dir=\"auto\">@maydiscard</code></td><td>fn, macro</td></tr><tr><td><code dir=\"auto\">@naked</code></td><td>fn</td></tr><tr><td><code dir=\"auto\">@nodiscard</code></td><td>fn, macro</td></tr><tr><td><code dir=\"auto\">@noinit</code></td><td>variables</td></tr><tr><td><code dir=\"auto\">@noinline</code></td><td>fn, call</td></tr><tr><td><code dir=\"auto\">@noreturn</code></td><td>fn, macro</td></tr><tr><td><code dir=\"auto\">@nostrip</code></td><td>fn, globals, constants, struct, union, enum, fault</td></tr><tr><td><code dir=\"auto\">@obfuscate</code></td><td>enum, fault</td></tr><tr><td><code dir=\"auto\">@operator</code></td><td>fn, macro</td></tr><tr><td><code dir=\"auto\">@optional</code></td><td>interface methods</td></tr><tr><td><code dir=\"auto\">@overlap</code></td><td>bitstruct only</td></tr><tr><td><code dir=\"auto\">@packed</code></td><td>struct, union</td></tr><tr><td><code dir=\"auto\">@priority</code></td><td>initializer/finalizer</td></tr><tr><td><code dir=\"auto\">@private</code></td><td>module, fn, macro, globals, constants, user-defined types, attributes and aliases</td></tr><tr><td><code dir=\"auto\">@public</code></td><td>module, fn, macro, globals, constants, user-defined types, attributes and aliases</td></tr><tr><td><code dir=\"auto\">@pure</code></td><td>call</td></tr><tr><td><code dir=\"auto\">@reflect</code></td><td>fn, globals, constants, user-defined types</td></tr><tr><td><code dir=\"auto\">@section</code></td><td>fn, globals, constants</td></tr><tr><td><code dir=\"auto\">@test</code></td><td>module, fn</td></tr><tr><td><code dir=\"auto\">@unused</code></td><td>all except call and initializer/finalizers</td></tr><tr><td><code dir=\"auto\">@used</code></td><td>all except call and initializer/finalizers</td></tr><tr><td><code dir=\"auto\">@weak</code></td><td>fn, globals, constants</td></tr><tr><td><code dir=\"auto\">@winmain</code></td><td>fn</td></tr></tbody></table>\n<h4 id=\"deprecated\"><code dir=\"auto\">@deprecated</code></h4>\n<p>Takes an optional constant string.\nIf the node is in use, print the deprecation and add the optional string if present.</p>\n<h4 id=\"optional\"><code dir=\"auto\">@optional</code></h4>\n<p>Marks an <em>interface</em> method as optional, and so does not need to be implemented by\na conforming type.</p>\n<h4 id=\"winmain\"><code dir=\"auto\">@winmain</code></h4>\n<p>Marks a <code dir=\"auto\">main</code> function as a win32 winmain function, which is the entrypoint for a windowed\napplication on Windows. This allows the main function to take a different set of\narguments than usual.</p>\n<h4 id=\"callconv\"><code dir=\"auto\">@callconv</code></h4>\n<p><code dir=\"auto\">@callconv</code> can be used with a function or a call. It takes a constant string which is either “veccall”, “stdcall” or “cdecl”. If more than one <code dir=\"auto\">@callconv</code>\nis applied to a function or call, the last one takes precedence.</p>\n<h3 id=\"user-defined-attributes\">User defined attributes</h3>\n<p>User defined attributes group a list of attributes.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">attribute_decl     ::= \"def\" AT_TYPE_IDENT (\"(\" parameters \")\")? attribute* \"=\" \"{\" attribute* \"}\" \";\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"attribute_decl     ::= &#x22;def&#x22; AT_TYPE_IDENT (&#x22;(&#x22; parameters &#x22;)&#x22;)? attribute* &#x22;=&#x22; &#x22;{&#x22; attribute* &#x22;}&#x22; &#x22;;&#x22;\"><div></div></button></div></figure></div>\n<h4 id=\"empty-list-of-attributes\">Empty list of attributes</h4>\n<p>The list of attributes may be empty.</p>\n<h4 id=\"parameter-arguments\">Parameter arguments</h4>\n<p>Arguments given to user defined attributes will be passed on to the attributes in the list.</p>\n<h4 id=\"expansion\">Expansion</h4>\n<p>When a user defined attribute is encountered, its list of attributes is\ncopied and appended instead of the user defined attribute. Any argument passed to\nthe attribute is evaluated and passed as a constant by the name of the parameter\nto the evaluation of the attribute parameters in the list.</p>\n<h4 id=\"nesting\">Nesting</h4>\n<p>A user defined attribute can contain other user defined attributes. The definition\nmay not be cyclic.</p>\n<h2 id=\"methods\">Methods</h2>\n<h4 id=\"operator-overloading\">Operator overloading</h4>\n<p><code dir=\"auto\">@operator</code> overloads may only be added to user defined types (distinct, unions, struct, enum and fault).</p>\n<h5 id=\"indexing-operator\">Indexing operator (<code dir=\"auto\">[]</code>)</h5>\n<p>This requires a return type and a method parameter, which is the index.</p>\n<h5 id=\"reference-indexing-operator\">Reference indexing operator (<code dir=\"auto\">&#x26;[]</code>)</h5>\n<p>This requires a return type and a method parameter, which is the index. If <code dir=\"auto\">[]</code> is implemented,\nit should return a pointer to <code dir=\"auto\">[]</code>.</p>\n<h5 id=\"assigning-index-operator\">Assigning index operator (<code dir=\"auto\">=[]</code>)</h5>\n<p>This has a void return type, and index should match that of <code dir=\"auto\">[]</code> and <code dir=\"auto\">&#x26;[]</code>. Value should match that\nof <code dir=\"auto\">[]</code> and be the pointee of the result of <code dir=\"auto\">&#x26;[]</code>.</p>\n<h5 id=\"len-operator-len\">Len operator (<code dir=\"auto\">len</code>)</h5>\n<p>This must have an integer return type.</p>\n<h4 id=\"dynamic-methods\">Dynamic methods</h4>\n<p><code dir=\"auto\">@dynamic</code> may be used on methods for any type except <code dir=\"auto\">any</code> and interfaces.</p>\n<h2 id=\"modules\">Modules</h2>\n<p>Module paths are hierarchal, with each sub-path appended with ’::’ + the name:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">path               ::= PATH_SEGMENT (\"::\" PATH_SEGMENT)</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"path               ::= PATH_SEGMENT (&#x22;::&#x22; PATH_SEGMENT)\"><div></div></button></div></figure></div>\n<p>Each module declaration starts its own <strong>module section</strong>. All imports and all <code dir=\"auto\">@local</code> declarations\nare only visible in the current <strong>module section</strong>.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre data-language=\"plaintext\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">module_section     ::= \"module\" path opt_generic_params? attributes? \";\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">generic_param      ::= TYPE_IDENT | CONST_IDENT</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">opt_generic_params ::= \"(&#x3C;\" generic_param (\",\" generic_param)* \">)\"</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"module_section     ::= &#x22;module&#x22; path opt_generic_params? attributes? &#x22;;&#x22;generic_param      ::= TYPE_IDENT | CONST_IDENTopt_generic_params ::= &#x22;(<&#x22; generic_param (&#x22;,&#x22; generic_param)* &#x22;>)&#x22;\"><div></div></button></div></figure></div>\n<p>Any visibility attribute defined in a <strong>module section</strong> will be the default visibility in all\ndeclarations in the section.</p>\n<p>If the <code dir=\"auto\">@benchmark</code> attribute is applied to the <strong>module section</strong> then all function declarations\nwill implicitly have the <code dir=\"auto\">@benchmark</code> attribute.</p>\n<p>If the <code dir=\"auto\">@test</code> attribute is applied to the <strong>module section</strong> then all function declarations\nwill implicitly have the <code dir=\"auto\">@test</code> attribute.</p>";

				const frontmatter = {"title":"C3 Specification","description":"C3 Specification","sidebar":{"order":999}};
				const file = "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Previous Versions/v0_6_8/Implementation Details/specification.md";
				const url = undefined;
				function rawContent() {
					return "\n*THIS SPECIFICATION IS UNDER DEVELOPMENT*\n\n## Notation\n\nThe syntax is specified using Extended Backus-Naur Form (EBNF):\n\n```\nproduction  ::= PRODUCTION_NAME '::=' expression?\nexpression  ::= alternative (\"|\" alternative)* \nalternative ::= term term*\nterm        ::= PRODUCTION_NAME | TOKEN | set | group | option | repetition\nset         ::= '[' (range | CHAR) (rang | CHAR)* ']'\nrange       ::= CHAR '-' CHAR \ngroup       ::= '(' expression ')'\noption      ::= expression '?'\nrepetition  ::= expression '*'\n```\n\nProductions are expressions constructed from terms and the following operators, in increasing precedence:\n\n```\n|   alternation\n()  grouping\n?  option (0 or 1 times)\n*  repetition (0 to n times)\n```\n\nUppercase production names are used to identify lexical tokens. Non-terminals are in lower case. Lexical tokens are\nenclosed in single quotes ''.\n\nThe form `a..b` represents the set of characters from a through b as alternatives.\n\n## Source code representation\n\nA program consists of one or more _translation units_ stored in files written in the Unicode character set,\nstored as a sequence of bytes using the UTF-8 encoding. Except for comments and the contents of character and string\nliterals, all input elements are formed only from the ASCII subset (U+0000 to U+007F) of Unicode.\n\nA raw byte stream is translated into a sequence of tokens which white space and comments are discarded. Doc\ncomments may optionally be discarded as well. The resulting input elements form the tokens that are the terminal symbols\nof the syntactic grammar.\n\n### Lexical Translations\n\nA raw byte stream is translated into a sequence of tokens which white space and comments are discarded. Doc\ncomments may optionally be discarded as well. The resulting input elements form the tokens that are the terminal symbols\nof the syntactic grammar.\n\nThe longest possible translation is used at each step, even if the result does not ultimately make a correct program\nwhile another lexical translation would.\n\n> Example: `a--b` is translated as `a`, `--`, `b`, which does not form a grammatically correct expression, even though the tokenization `a`, `-`, `-`, `b` could form a grammatically correct expression.\n\n### Line Terminators\n\nThe C3 compiler divides the sequence of input bytes into lines by recognizing *line terminators*\n\nLines are terminated by the ASCII LF character (U+000A), also known as \"newline\". A line termination specifies the\ntermination of the // form of a comment.\n\n### Input Elements and Tokens\n\nAn input element may be:\n\n1. White space\n2. Comment\n3. Doc Contract\n4. Token\n\nA token may be:\n\n1. Identifier\n2. Keyword\n3. Literal\n4. Separator\n5. Operator\n\nA Doc Contract consists of:\n\n1. A stream of descriptive text\n2. A list of directive Tokens\n\nThose input elements that are not white space or comments are tokens. The tokens are the terminal symbols of the\nsyntactic grammar. Whitespace and comments can serve to separate tokens that might be tokenized in another manner. For\nexample the characters `+` and `=` may form the operator token `+=` only if there is no intervening white space or\ncomment.\n\n### White Space\n\nWhite space is defined as the ASCII horizontal tab character (U+0009), form feed character (U+000A), vertical tab (\nU+000B), carriage return (U+000D), space character (U+0020) and the line terminator character (U+000D).\n\n```\nWHITESPACE      ::= [ \\t\\f\\v\\r\\n]\n```\n\n### Letters and digits\n\n```\nUC_LETTER       ::= [A-Z]\nLC_LETTER       ::= [a-z]\nLETTER          ::= UC_LETTER | LC_LETTER\nDIGIT           ::= [0-9]\nHEX_DIGIT       ::= [0-9a-fA-F]\nBINARY_DIGIT    ::= [01]\nOCTAL_DIGIT     ::= [0-7]\nLC_LETTER_US    ::= LC_LETTER | \"_\"\nUC_LETTER_US    ::= UC_LETTER | \"_\"\nALPHANUM        ::= LETTER | DIGIT\nALPHANUM_US     ::= ALPHANUM | \"_\"\nUC_ALPHANUM_US  ::= UC_LETTER_US | DIGIT\nLC_ALPHANUM_US  ::= LC_LETTER_US | DIGIT\n```\n\n### Comments\n\nThere are three types of regular comments:\n\n1. `// text` a line comment. The text between `//` and line end is ignored.\n2. `/* text */` block comments. The text between `/*` and `*/` is ignored. It has nesting behaviour, so for every `/*`\n   discovered between the first `/*` and the last `*/` a corresponding `*/` must be found.\n\n### Doc contract\n\n1. `<* text *>` doc block comment. The text between `<*` and `*>` is optionally parsed using the doc comment\n   syntactic grammar. A compiler may choose to read `<* text *>` as a regular comment.\n\n### Identifiers\n\nIdentifiers name program entities such as variables and types. An identifier is a sequence of one or more letters and\ndigits.\nThe first character in an identifier must be a letter or underscore.\n\nC3 has three types of identifiers: const identifiers - containing only underscore and upper-case letters,\ntype identifiers - starting with an upper case letter followed by at least one underscore letter and regular\nidentifiers, starting with a lower case letter.\n\n```\nIDENTIFIER      ::=  \"_\"* LC_LETTER ALPHANUM_US*\nCONST_IDENT     ::=  \"_\"* UC_LETTER UC_ALPHANUM_US*\nTYPE_IDENT      ::=  \"_\"* UC_LETTER UC_ALPHANUM_US* LC_LETTER ALPHANUM_US*\nCT_IDENT        ::=  \"$\" IDENTIFIER\nCT_CONST_IDENT  ::=  \"$\" CONST_IDENT\nCT_TYPE_IDENT   ::=  \"$\" TYPE_IDENT\nAT_TYPE_IDENT   ::=  \"@\" TYPE_IDENT\nPATH_SEGMENT    ::= \"_\"* LC_LETTER LC_ALPHANUM_US*\n```\n\n### Keywords\n\nThe following keywords are reserved and may not be used as identifiers:\n\n```\nasm         any         anyfault\nassert      attribute   break\ncase        catch       const       \ncontinue    default     defer       \ndef         do          else        \nenum        extern      false\nfault       fn          if          \nimport      inline      macro\nmodule      nextcase    null\npublic      return      struct\nswitch      true        try\ntypeid      var         void        \nwhile\n\nbool        int128      double      \nfloat       long        ulong\nint         uint        byte\nshort       ushort      char\nisz         usz         float16\nfloat128    uint128     bfloat16\n\n$assert     $case       $default    \n$echo       $else       $error      \n$endfor     $endforeach $endif      \n$endswitch  $for        $foreach    \n$if         $switch     $typef      \n$vaarg      $vaconst    $vacount    \n$vaexpr     $vatype             \n                  \n```\n\n### Operators and punctuation\n\nThe following character sequences represent operators and punctuation.\n\n```\n&       @       ~       |       ^       :\n,       /       $       .       ;       )\n>       <       #       {       }       -\n(       )       *       [       ]       %\n>=      <=      +       +=      -=      !\n?       ?:      &&      ??      &=      |=\n^=      /=      ..      ==      ({      })\n[<      >]      (<      >)      ++      --      \n%=      !=      ||      ::      <<      >>      \n!!      ...     <<=     >>=\n```\n\n### Integer literals\n\nAn integer literal is a sequence of digits representing an integer constant.\nAn optional prefix sets a non-decimal base: 0b or 0B for binary,\n0o, or 0O for octal, and 0x or 0X for hexadecimal.\nA single 0 is considered a decimal zero.\nIn hexadecimal literals, letters a through f and A through F represent values 10 through 15.\n\nFor readability, an underscore character _ may appear after a base prefix\nor between successive digits; such underscores do not change the literal's value.\n\n```\nINTEGER         ::= DECIMAL_LIT | BINARY_LIT | OCTAL_LIT | HEX_LIT\nDECIMAL_LIT     ::= '0' | [1-9] ('_'* DECIMAL_DIGITS)?\nBINARY_LIT      ::= '0' [bB] '_'* BINARY_DIGITS\nOCTAL_LIT       ::= '0' [oO] '_'* OCTAL_DIGITS\nHEX_LIT         ::= '0' [xX] '_'* HEX_DIGITS\n\nBINARY_DIGIT    ::= [01]\nHEX_DIGIT       ::= [0-9a-fA-F]\n\nDECIMAL_DIGITS  ::= DIGIT ('_'* DIGIT)*\nBINARY_DIGITS   ::= BINARY_DIGIT ('_'* BINARY_DIGIT)*\nOCTAL_DIGITS    ::= OCTAL_DIGIT ('_'* OCTAL_DIGIT)*\nHEX_DIGITS      ::= HEX_DIGIT ('_'* HEX_DIGIT)*\n```\n\n```\n42\n4_2\n0_600\n0o600\n0O600           // second character is capital letter 'O'\n0xBadFace\n0xBad_Face\n0x_67_7a_2f_cc_40_c6\n170141183460469231731687303715884105727\n170_141183_460469_231731_687303_715884_105727\n\n0600            // Invalid, non zero decimal number may not start with 0 \n_42             // an identifier, not an integer literal\n42_             // invalid: _ must separate successive digits\n0_xBadFace      // invalid: _ must separate successive digits\n```\n\n### Floating point literals\n\nA floating-point literal is a decimal or hexadecimal representation of a floating-point constant.\n\nA decimal floating-point literal consists of an integer part (decimal digits), a decimal point,\na fractional part (decimal digits), and an exponent part (e or E followed by an optional\nsign and decimal digits). One of the integer part or the fractional part may be elided;\none of the decimal point or the exponent part may be elided. An exponent value exp scales\nthe mantissa (integer and fractional part) by powers of 10.\n\nA hexadecimal floating-point literal consists of a 0x or 0X prefix, an integer part\n(hexadecimal digits), a radix point, a fractional part (hexadecimal digits),\nand an exponent part (p or P followed by an optional sign and decimal digits).\nOne of the integer part or the fractional part may be elided; the radix point\nmay be elided as well, but the exponent part is required.\nAn exponent value exp scales the mantissa (integer and fractional part) by powers of 2.\n\nFor readability, an underscore character _ may appear after a base prefix or between successive digits;\nsuch underscores do not change the literal value.\n\n```\nFLOAT_LIT       ::= DEC_FLOAT_LIT | HEX_FLOAT_LIT\nDEC_FLOAT_LIT   ::= DECIMAL_DIGITS '.' DECIMAL_DIGITS? DEC_EXPONENT? \n                    | DECIMAL_DIGITS DEC_EXPONENT\n                    | '.' DECIMAL_DIGITS DEC_EXPONENT?\nDEC_EXPONENT    ::= [eE] [+-]? DECIMAL_DIGITS\nHEX_FLOAT_LIT   ::= '0' [xX] HEX_MANTISSA HEX_EXPONENT\nHEX_MANTISSA    ::= HEX_DIGITS '.' HEX_DIGITS?\n                    | HEX_DIGITS\n                    | '.' HEX_DIGITS \nHEX_EXPONENT    ::= [pP] [+-] DECIMAL_DIGITS                    \n```\n\n### Characters\n\nCharacters are the fundamental components of strings and character literals.\n\n```\nCHAR_ELEMENT    ::= [\\x20-\\x26] | [\\x28-\\x5B] | [\\x5D-\\x7F]\nCHAR_LIT_BYTE   ::= CHAR_ELEMENT | \\x5C CHAR_ESCAPE\nCHAR_ESCAPE     ::= [abefnrtv\\'\\\"\\\\] \n                    | 'x' HEX_DIGIT HEX_DIGIT\nUNICODE_CHAR    ::= unicode_char                    \n                    | 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT\n                    | 'U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT \n                          HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT\n```\n\n### Backslash escapes\n\nThe following backslash escapes are available for characters and string literals:\n\n```text\n\\0      0x00 zero value\n\\a      0x07 alert/bell\n\\b      0x08 backspace\n\\e      0x1B escape\n\\f      0x0C form feed\n\\n      0x0A newline\n\\r      0x0D carriage return\n\\t      0x09 horizontal tab\n\\v      0x0B vertical tab\n\\\\      0x5C backslash\n\\'      0x27 single quote '\n\\\"      0x22 double quote \"\n\\x      Escapes a single byte hex value\n\\u      Escapes a two byte unicode hex value \n\\U      Escapes a four byte unicode hex value\n```\n\n### String literals\n\nA string literal represents a string constant obtained from concatenating a sequence of characters.\nString literals are character sequences between double quotes, as in \"bar\". Within the quotes,\nany character may appear except newline and unescaped double quote. The text between the\nquotes forms the value of the literal, with backslash escapes interpreted as they are in\nrune literals, with the same restrictions. The two-digit hexadecimal (\\xnn) escapes represent\nindividual bytes of the resulting string; all other escapes represent the (possibly multibyte)\nUTF-8 encoding of individual characters. Thus inside a string literal `\\xFF` represent a single\nbyte of value `0xFF` = 255, while `ÿ`, `\\u00FF`, `\\U000000FF` and `\\xc3\\xbf` represent the two bytes\n`0xc3 0xbf` of the UTF-8 encoding of character `U+00FF`.\n\n```\nSTRING_LIT      ::= \\x22 (CHAR_LIT_BYTE | UNICODE_CHAR)* \\x22\n```\n\n#### Compile time string concatenation\n\nStrings will concatenate if declared in sequence.\n\nExample:\n\n```c\nString s = \"abc\" \"def\" \"ghi\";\n// This is equivalent to:\nString s = \"abcdefghi\";\n```\n\n### Raw string literals\n\nRaw string literals are enclosed between \\`\\` and consist of the raw UTF8 in the source\ncode between the \"\\`\". A sequence of two \"\\`\" will be interpreted as a single escaped \"\\`\" that does\nnot terminate the literal.\n\n#### Compile time concatenation\n\nRaw strings will concatenate with other regular strings and raw strings (\nsee [string literal compile time concatenation](#compile-time-string-concatenation)).\n\n#### Source code pre-filtering\n\nThe source code will pre-filter `\\r` (`0x0D`) from the source code. This means that it is also implicitly\nfiltered out of raw strings.\n\n### Character literals\n\nA character literal is enclosed in `'` and may either consist of 1, 2, 4, 8, 16 bytes.\n\n```\nCHARACTER_LIT   ::= \"'\" (CHAR_LIT_BYTE+) | UNICODE_CHAR \"'\"\n```\n\n## Types\n\nTypes consist of built-in types and user-defined types (enums, structs, unions, bitstructs, fault and distinct).\n\n### Boolean types\n\n`bool` may have the two values `true` and `false`. It holds a single bit of information but is\nstored in a `char` type.\n\n### Integer types\n\nThe built-in integer types:\n\n```text\nchar      unsigned 8-bit\nichar     signed 8-bit\nushort    unsigned 16-bit\nshort     signed 16-bit\nuint      unsigned 32-bit\nint       signed 32-bit\nulong     unsigned 64-bit\nlong      signed 64-bit\nuint128   unsigned 128-bit\nint128    singed 128-bit\n```\n\nIn addition, the following type aliases exist:\n\n```text\nuptr      unsigned pointer size\niptr      signed pointer size\nusz       unsigned pointer offset / object size\nisz       signed pointer offset  / object size\n```\n\n### Floating point types\n\nBuilt-in floating point types:\n\n```\nfloat16   IEEE 16-bit*\nbfloat16  Brainfloat*\nfloat     IEEE 32-bit\ndouble    IEEE 64-bit\nfloat128  IEEE 128-bit*\n```\n\n(* optionally supported)\n\n### Vector types\n\nA vector lowers to the platform's vector types where available. A vector has a base type and a width.\n\n```\nvector_type        ::= type \"[<\" length \">]\"\n```\n\n#### Vector base type\n\nThe base type of a vector must be boolean, an integer or a floating point type.\n\n#### Min width\n\nThe vector width must be at least 1.\n\n#### Element access\n\nVector elements are accessed using `[]`. It is possible to take the address of a single element.\n\n#### Alignment\n\nAlignment of vectors are platform dependent, but is at least the alignment of its element type.\n\n#### Vector operations\n\nVectors support the same arithmetics as its underlying type, and will perform the operation\nelement-wise.\n\nExample:\n\n```c\nint[<2>] a = { 1, 3 };\nint[<2>] b = { 2, 7 };\n\nint[<2>] c = a * b;\n// Equivalent to\nint[<2>] c = { a[0] * b[0], a[1] * b[1] };\n```\n\n### Array types\n\nAn array has the alignment of its elements. An array must have at least one element.\n\n### Slice types\n\nThe slice consist of a pointer, followed by an usz length, having the alignment of pointers.\n\n### Pointer types\n\nA pointer is the address to memory.\n\n```text\npointer_type       ::= type \"*\"\n```\n\n#### Pointee type\n\nThe type of the memory pointed to is the **pointee type**. It may be any runtime type.\n\n#### `iptr` and `uptr`\n\nA pointer may be losslessly cast to an `iptr` or `uptr`. An `iptr` or `uptr` may be cast to a pointer of any type.\n\n#### The wildcard pointer `void*`\n\nThe `void*` may implicitly cast into any other pointer type. The `void*`\n[implicitly casts into any other pointer.\n\nA void* pointer may never be dereferenced.\n\n#### Pointer arithmetic on `void*`\n\nPerforming pointer arithmetics on void* will assume that the element size is 1. This includes\npointer arithmetics using subscripting.\n\n#### Subscripting\n\nSubscripting a pointer is equal to performing pointer arithmetics using the index, followed by a deref.\nSubscripts on pointers may be negative and will never do bounds checks.\n\n#### Deref\n\nDereferencing a pointer will return the value in the memory location interpreted as the **pointee type**.\n\n####\n\n### Struct types\n\nA struct may not have zero members.\n\n#### Alignment\n\nA non-packed struct has the alignment of the member that has the highest alignment. A packed struct\nhas alignment 1. See [align attribute](#attributes) for details on changing the alignment.\n\n### Union types\n\nA union may not have zero members.\n\n#### Alignment\n\nA union has the alignment of the member that has the highest alignment. See [align attribute](#attributes) for\ndetails on changing the alignment.\n\n### Fault types\n\nA fault is an extensible enum which can be used to create an Excuse for an empty [optional](/language-common/optionals-essential/#what-is-an-optional).\n\n#### Alignment\n\nA fault type has the same alignment as a pointer. See [align attribute](#attributes) for details on changing the\nalignment.\n\n### Enum types\n\n### Function types\n\n### Typeid type\n\nThe typeid is a pointer sized value which uniquely identifies a type.\n\n### Any type\n\nThe `any` is a fat pointer (2 pointers wide) holding a pointer to a value and its corresponding [typeid](#typeid-type).\nIt cannot be dereferenced.\n\n#### Fields\n\n`.ptr` returns a `void*` pointer to the underlying value `.type` returns the [typeid](#typeid-type)\nof the underlying value.\n\n#### Switching over `any`\n\nSwitching over an `any` value creates an [any switch](#any-switch).\n\n### Anyfault type\n\n## Declarations and scope\n\n## Expressions\n\n### Assignment expression\n\n```\nassignment_expr    ::= ct_type_assign | unary_expr assignment_op expr\nct_type_assign     ::= ct_type_ident \"=\" type\nassignment_op      ::= \"=\" | \"+=\" | \"-=\" | \"*=\" | \"/=\" | \"%=\" | \"<<=\" | \">>=\" | \"&=\" | \"^=\" | \"|=\"\n```\n\n#### Type assign\n\nThis assigns a new type to a compile time type variable. The value of the expression is the type assigned.\n\n#### Combined assign\n\nAll assignment operations except for `=` are combined assign operation. They first perform the operation indicated\nby the leftmost character(s) in the operator (e.g `+` for `+=`, `<<` for `<<=` etc) with the lhs and the rhs.\nThe result is then assigned to the left hand side. The result of the operation is the new value of the left\nhand side.\n\n#### Implicit conversion\n\nIf the left hand side is a pointer and the operation is `+=` or `-=` an attempt to implicitly convert to\n`isz`/`usz` will be tried.\n\nFor all other types and operations, **an implicit conversion** of rhs to the type of lhs will be tried.\n\n### Ternary, elvis and or-else expressions\n\n```\nternary_group_expr ::= suffix_group_expr | ternary_expr | elvis_expr | orelse_expr\nternary_expr       ::= or_expr \"?\" expr \":\" ternary_group_expr\nelvis_expr         ::= suffix_expr \"?:\" ternary_group_expr\norelse_expr        ::= suffix_expr \"??\" ternary_group_expr\n```\n\n#### Ternary evaluation\n\nThe most left-hand expression is evaluated to a boolean. If it is true, the value of the middle\nexpression is returned, otherwise the last expression is returned.\n\nOnly the most left-hand expression and the returned expressions are evaluated.\n\nThe middle and last expression are implicitly converted to their **unified type**.\n\nThe resulting type is the **unified type**.\n\n#### Elvis evaluation\n\nLhs and rhs are implicitly converted to their **unified type**.\n\nThe lhs is evaluated, it is then converted to a boolean, if the result it true, return the lhs value\nbefore its boolean conversion. Otherwise return the right hand side.\n\nThe right hand side is only evaluated if the lhs evaluates to false.\n\nThe resulting type is the **unified type**.\n\n#### Orelse evaluation\n\nThe lhs must be optional. The non-optional type for lhs and rhs are calculated.\nThe **unified type** of the result is calculated. Lhs are converted to the unified type\npreserving their optionality.\n\nAt runtime, lhs is evaluated. If it evaluates to an optional, rhs is returned instead.\n\nRhs is only evaluated if lhs evaluates to an optional.\n\nThe resulting type of the orelse is the post conversion type of the rhs.\n\n### Suffix expression\n\nSuffix expressions convert a fault to an optional.\n\n```\nsuffix_group_exp   ::= or_group_expr | suffix_expr\nsuffix_expr        ::= or_group_expr \"?\" \"!\"?\n```\n\n#### Effect of `?`\n\nThe `?` will convert the expression into an optional. The left hand side must be a fault type.\nIf an optional `!` follows, this optional is immediately returned, as if by a `return <expr>?` statement.\n\n#### Type of the expression\n\nThe type is a **wildcard optional**. If `!` is added, it is a **wildcard** type.\n\n### Rethrow expression\n\nIf the expression is optional, implicitly return with the optional value.\n\n```\nrethrow_expr       ::= expr \"!\"\n```\n\n#### The expression to rethrow\n\nThe expression must have an optional type, otherwise this is a compile time error.\n\n#### Type\n\nThe type of \"rethrow\" is the inner expr type without optional.\n\n### Relational expression\n\n```\nrel_group_expr     ::= add_group_expr | relational_expr\nrelational_expr    ::= rel_group_expr relational_op add_group_expr\nrelational_op      ::= \"<\" | \">\" | \"<=\" | \">=\" \n```\n\nTODO\n\n### And expression\n\nThis binary expression evaluates the lhs, and if the result is `true` evaluates the rhs. The\nresult is true if both lhs and rhs are true.\n\n```\nand_group_expr     ::= rel_group_expr | and_expr\nand_expr           ::= and_group_expr \"&&\" rel_group_expr\n```\n\n#### Type\n\nThe type of the and-expression is `bool`.\n\n### Or expression\n\nThis binary expression evaluates the lhs, and if the result is `false` evaluates the rhs. The\nresult is true if lhs or rhs is true.\n\n```\nor_group_expr      ::= and_group_expr | or_expr\nor_expr            ::= or_group_expr \"||\" and_group_expr\n```\n\n#### Constant folded arithmetics\n\nConstant folding will happen for constant integers and floating. Vectors operations will\nnot be constant-folded.\n\nConstant folded operations are: multiplication, division, addition, subtraction,\nbit shifts, bit negation, bitwise and, or and xor, comparison, logical and/or,\nand negation.\n\n#### Type\n\nThe type of the or-expression is `bool`.\n\n### Casts\n\n### Pointer casts\n\n#### Integer to pointer cast\n\nAny integer of pointer size or larger may be explicitly cast to a pointer. An integer to pointer cast is considered\nnon-constant, except in the special case where the integer == 0. In that case, the result is constant `null`.\n\nExample:\n\n```\nbyte a = 1;\nint* b = (int*)a; // Invalid, pointer type is > 8 bits.\nint* c = (int*)1; // Valid, but runtime value.\nint* d = (int*)0; // Valid and constant value.\n```\n\n#### Pointer to integer cast\n\nA pointer may be cast to any integer, truncating the pointer value if the size of the pointer is larger than the pointer\nsize. A pointer to integer cast is considered non-constant, except in the special case of a null pointer, where it is\nequal to the integer value 0.\n\nExample:\n\n```\nfn void test() { ... }\ndef VoidFunc = fn void test();\n\nVoidFunc a = &test;\nint b = (int)null;\nint c = (int)a; // Invalid, not constant\nint d = (int)((int*)1); // Invalid, not constant\n```\n\n### Subscript operator\n\nThe subscript operator may take as its left side a pointer, array or slice. The index may be of any integer\ntype. TODO\n*NOTE* The subscript operator is not symmetrical as in C. For example in C3 `array[n] = 33` is allowed, but\nnot `n[array] = 33`. This is a change from C.\n\n### Operands\n\n### Compound Literals\n\nCompound literals have the format\n\n```\ncompound_literal   ::= (type) initializer_list\ninitializer_list   ::= '{' (initializer_param (',' initializer_param)* ','?)? '}'\ninitializer_param  ::= expression | designator '=' expression\ndesignator         ::= array_designator | range_designator | field_designator\narray_designator   ::= '[' expression ']'\nrange_designator   ::= '[' range_expression ']'\nfield_designator   ::= IDENTIFIER\nrange_expression   ::= (range_index)? '..' (range_index)?\nrange_index        ::= expression | '^' expression\n```\n\nTaking the address of a compound literal will yield a pointer to stack allocated temporary.\n\n### Function calls\n\n#### Function argument resolution\n\nCall slots are in order: regular slots, vaarg slot, name-only slots.\n\nNo regular slots may appear after the vaarg slot, however there may be named parameters with default values \nafter the vaarg slot if it's not a raw vaarg.\n\nThese \"name-only\" slots need to have a parameter name and a default value, and may only be called as named \narguments.\n\nNamed arguments may never be *splat* expressions.\n\n1. Step through all the arguments, resolve the named arguments and determine if there are any regular arguments.\n2. If there are regular arguments, then named arguments may only be in name-only slots, otherwise it is an error.\n3. If there are named arguments in the regular slots, all slots not provided arguments must have default values.\n4. Proceed with evaluation of arguments from left to right in call invocation order.\n6. Regular arguments are placed in the regular slots from left to right.\n7. If a regular argument is a *splat* expression, evaluate it *without inference* and determine if it is an array, vector, untyped list or slice with a known size, otherwise it is an error.\n8. A regular argument *splat* will be expanded into as many slots as its length, this may expand into vaarg arguments.\n9. In the vaarg slot, *splatting* a slice will *forward* it.\n10. In the vaarg slot, *splatting* an array, vector or untyped list will expand its elements as if they were provided as arguments.\n11. A named argument may never appear more than once.\n12. The vaarg slot may never be accessed using named arguments.\n\n#### Varargs\n\nFor varargs, a `bool` or *any integer* smaller than what the C ABI specifies for the c `int` type is cast to `int`. Any\nfloat smaller than a double is cast to `double`. Compile time floats will be cast to double. Compile time integers will\nbe cast to c `int` type.\n\n## Statements\n\n```\nstmt               ::= compound_stmt | non_compound_stmt\nnon_compound_stmt  ::= assert_stmt | if_stmt | while_stmt | do_stmt | foreach_stmt | foreach_r_stmt \n                       | for_stmt | return_stmt | break_stmt | continue_stmt | var_stmt \n                       | declaration_stmt | defer_stmt | nextcase_stmt | asm_block_stmt\n                       | ct_echo_stmt | ct_error_stmt | ct_assert_stmt | ct_if_stmt | ct_switch_stmt \n                       | ct_for_stmt | ct_foreach_stmt | expr_stmt \n```\n\n### Asm block statement\n\nAn asm block is either a string expression or a brace enclosed list of asm statements.\n\n```\nasm_block_stmt      ::= \"asm\" (\"(\" constant_expr \")\" | \"{\" asm_stmt* \"}\")\nasm_stmt            ::= asm_instr asm_exprs? \";\"\nasm_instr           ::= (\"int\" | IDENTIFIER) (\".\" IDENTIFIER)\nasm_expr            ::= CT_IDENT | CT_CONST_IDENT | \"&\"? IDENTIFIER | CONST_IDENT | FLOAT_LITERAL\n                        | INTEGER | \"(\" expr \")\" | \"[\" asm_addr \"]\"\nasm_addr            ::= asm_expr (additive_op asm_expr asm_addr_trail?)?\nasm_addr_trail      ::= \"*\" INTEGER (additive_op INTEGER)? | (shift_op | additive_op) INTEGER                         \n```\n\nTODO\n\n### Assert statement\n\nThe assert statement will evaluate the expression and call the panic function if it evaluates\nto false.\n\n```\nassert_stmt        ::= \"assert\" \"(\" expr (\",\" assert_message)? \")\" \";\"\nassert_message     ::= constant_expr (\",\" expr)*\n```\n\n#### Conditional inclusion\n\n`assert` statements are only included in \"safe\" builds. They may turn into **assume directives** for\nthe compiler on \"fast\" builds.\n\n#### Assert message\n\nThe assert message is optional. It can be followed by an arbitrary number of expressions, in which case\nthe message is understood to be a format string, and the following arguments are passed as values to the\nformat function.\n\nThe assert message must be a compile time constant. There are no restriction on the format argument expressions.\n\n#### Panic function\n\nIf the assert message has no format arguments or no assert message is included,\nthen the regular panic function is called. If it has format arguments then `panicf` is called instead.\n\nIn the case the `panicf` function does not exist (for example, compiling without the standard library),\nthen the format and the format arguments will be ignored and the `assert` will be treated\nas if no assert message was available.\n\n### Break statement\n\nA break statement exits a `while`, `for`, `do`, `foreach` or `switch` scope. A labelled break\nmay also exit a labelled `if`.\n\n```\nbreak_stmt         ::= \"break\" label? \";\"\n```\n\n#### Break labels\n\nIf a break has a label, then it will instead exit an outer scope with the label.\n\n#### Unreachable code\n\nAny statement following break in the same scope is considered unreachable.\n\n### Compile time echo statement\n\nDuring parsing, the compiler will output the text in the statement when it is semantically checked.\nThe statement will be turned into a NOP statement after checking.\n\n```\nct_echo_stmt       ::= \"$echo\" constant_expr \";\"\n```\n\n#### The message\n\nThe message must be a compile time constant string.\n\n### Compile time assert statement\n\nDuring parsing, the compiler will check the compile time expression\nand create a compile time error with the optional message. After\nevaluation, the `$assert` becomes a **NOP** statement.\n\n```\nct_assert_stmt     ::= \"$assert\" constant_expr (\":\" constant_expr) \";\"\n```\n\n#### Evaluated expression\n\nThe checked expression must evaluate to a boolean compile time constant.\n\n#### Error message\n\nThe second parameter, which is optional, must evaluate to a constant string.\n\n### Compile time error statement\n\nDuring parsing, when semantically checked this statement will output\na compile time error with the message given.\n\n```\nct_error_stmt      ::= \"$error\" constant_expr \";\"\n```\n\n#### Error message\n\nThe parameter must evaluate to a constant string.\n\n### Compile time if statement\n\nIf the cond expression is true, the then-branch is processed by the compiler. If it\nevaluates to false, the else-branch is processed if it exists.\n\n```\nct_if_stmt         ::= \"$if\" constant_expr \":\" stmt* (\"$else\" stmt*)? \"$endif\"\n```\n\n#### Cond expression\n\nThe cond expression must be possible to evaluate to true or false at compile time.\n\n#### Scopes\n\nThe \"then\" and \"else\" branches will add a compile time scope that is exited when reaching `$endif`.\nIt adds no runtime scope.\n\n#### Evaluation\n\nStatements in the branch not picked will not be semantically checked.\n\n### Compile time switch statement\n\n```\nct_switch_stmt     ::= \"$switch\" (\"(\" ct_expr_or_type \")\")? ct_case_stmt+ \"$endswitch\"\nct_case_stmt       ::= (\"$default\" | \"$case\" ct_expr_or_type) \":\" stmt* \n```\n\n#### No cond expression switch\n\nIf the cond expression is missing, evaluation will go through each case until one case expression\nevaluates to true.\n\n#### Type expressions\n\nIf a cond expression is a type, then all case statement expressions must be types as well.\n\n#### Ranged cases\n\nCompile time switch does not support ranged cases.\n\n#### Fallthrough\n\nIf a case clause has no statements, then when executing the case, rather than exiting the switch,\nthe next case clause immediately following it will be used. If that one should also be missing statements,\nthe procedure will be repeated until a case clause with statements is encountered,\nor the end of the switch is reached.\n\n#### Break and nextcase\n\nCompile time switches do not support `break` nor `nextcase`.\n\n#### Evaluation of statements\n\nOnly the case which is first matched has its statements processed by the compiler. All other statements\nare ignored and will not be semantically checked.\n\n### Continue statement\n\nA continue statement jumps to the cond expression of a `while`, `for`, `do` or `foreach`\n\n```\ncontinue_stmt      ::= \"continue\" label? \";\"\n```\n\n#### Continue labels\n\nIf a `continue` has a label, then it will jump to the cond of the while/for/do in the outer scope\nwith the corresponding label.\n\n#### Unreachable code\n\nAny statement following `continue` in the same scope is considered unreachable.\n\n### Declaration statement\n\nA declaration statement adds a new runtime or compile time variable to the current scope. It is available after the\ndeclaration statement.\n\n```\ndeclaration_stmt   ::= const_declaration | local_decl_storage? optional_type decls_after_type \";\"\nlocal_decl_storage ::= \"tlocal\" | \"static\"\ndecls_after_type   ::= local_decl_after_type (\",\" local_decl_after_type)*\ndecl_after_type    ::= CT_IDENT (\"=\" constant_expr)? | IDENTIFIER opt_attributes (\"=\" expr)?\n```\n\n#### Thread local storage\n\nUsing `tlocal` allocates the runtime variable as a **thread local** variable. In effect this is the same as declaring\nthe variable as a global `tlocal` variable, but the visibility is limited to the function. `tlocal` may not be\ncombined with `static`.\n\nThe initializer for a `tlocal` variable must be a valid global init expression.\n\n#### Static storage\n\nUsing `static` allocates the runtime variable as a function **global** variable. In effect this is the same as declaring\na global, but visibility is limited to the function. `static` may not be combined with `tlocal`.\n\nThe initializer for a `static` variable must be a valid global init expression.\n\n#### Scopes\n\nRuntime variables are added to the runtime scope, compile time variables to the compile time scope. See **var statements\n**.\n\n#### Multiple declarations\n\nIf more than one variable is declared, no init expressions are allowed for any of the variables.\n\n#### No init expression\n\nIf no init expression is provided, the variable is **zero initialized**.\n\n#### Opt-out of zero initialization\n\nUsing the @noinit attribute opts out of **zero initialization**.\n\n#### Self referencing initialization\n\nAn init expression may refer to the **address** of the same variable that is declared, but not the **value** of the\nvariable.\n\nExample:\n\n```c\nvoid* a = &a;  // Valid\nint a = a + 1; // Invalid\n```\n\n### Defer statement\n\nThe defer statements are executed at (runtime) scope exit, whether through `return`, `break`, `continue` or rethrow.\n\n```\ndefer_stmt         ::= \"defer\" (\"try\" | \"catch\")? stmt\n```\n\n#### Defer in defer\n\nThe defer body (statement) may not be a defer statement. However, if the body is a compound statement then\nthis may have any number of defer statements.\n\n#### Static and tlocal variables in defer\n\nStatic and tlocal variables are allowed in a defer statement. Only a single variable is instantiated regardless of\nthe number of inlining locations.\n\n#### Defer and return\n\nIf the `return` has an expression, then it is evaluated before the defer statements (due to exit from the current\nfunction scope),\nare executed.\n\nExample:\n\n```c\nint a = 0;\ndefer a++;\nreturn a;\n// This is equivalent to\nint a = 0;\nint temp = a;\na++;\nreturn temp;\n```\n\n#### Defer and jump statements\n\nA defer body may not contain a `break`, `continue`, `return` or rethrow that would exit the statement.\n\n#### Defer execution\n\nDefer statements are executed in the reverse order of their declaration, starting from the last declared\ndefer statement.\n\n#### `defer try`\n\nA `defer try` type of defer will only execute if the scope is left through normal fallthrough, `break`,\n`continue` or a `return` with a result.\n\nIt will not execute if the exit is through a rethrow or a `return` with an optional value.\n\n#### `defer catch`\n\nA `defer catch` type of defer will only execute if the scope is left through a rethrow or a `return` with an optional\nvalue\n\nIt will not execute if the exit is a normal fallthrough, `break`, `continue` or a `return` with a result.\n\n#### Non-regular returns - longjmp, panic and other errors\n\nDefers will not execute when doing `longjmp` terminating through a `panic` or other error. They\nare only invoked on regular scope exits.\n\n### Expr statement\n\nAn expression statement evaluates an expression.\n\n```\nexpr_stmt          ::= expr \";\"\n```\n\n#### No discard\n\nIf the expression is a function or macro call either returning an optional *or* annotated `@nodiscard`, then\nthe expression is a compile time error. A function or macro returning an optional can use the `@maydiscard`\nattribute to suppress this error.\n\n### If statement\n\nAn if statement will evaluate the cond expression, then execute the first statement (the \"then clause\") in the if-body\nif it evaluates to \"true\", otherwise execute the else clause. If no else clause exists, then the\nnext statement is executed.\n\n```\nif_stmt            ::= \"if\" (label \":\")? \"(\" cond_expr \")\" if_body\nif_body            ::= non_compound_stmt | compound_stmt else_clause? | \"{\" switch_body \"}\"\nelse_clause        ::= \"else\" (if_stmt | compound_stmt)\n\n```\n\n#### Scopes\n\nBoth the \"then\" clause and the else clause open new scopes, even if they are non-compound statements.\nThe cond expression scope is valid until the exit of the entire statement, so any declarations in the\ncond expression are available both in then and else clauses. Declarations in the \"then\" clause is not available\nin the else clause and vice versa.\n\n#### Special parsing of the \"then\" clause\n\nIf the then-clause isn't a compound statement, then it must follow on the same row as the cond expression.\nIt may not appear on a consecutive row.\n\n#### Break\n\nIt is possible to use labelled break to break out of an if statement. Note that an unlabelled `break` may not\nbe used.\n\n#### If-try\n\nThe cond expression may be a try-unwrap chain. In this case, the unwrapped variables are\nscoped to the \"then\" clause only.\n\n#### If-catch\n\nThe cond expression may be a catch-unwrap. The unwrap is scoped to the \"then\" clause only.\nIf one or more variables are in the catch, then the \"else\" clause have these variables\nimplicitly unwrapped.\n\nExample:\n\n```\nint! a = foo();\nint! b = foo();\nif (catch a, b)\n{\n    // Do something\n}\nelse\n{\n    int x = a + b; // Valid, a and b are implicitly unwrapped.\n}  \n```\n\n#### If-catch implicit unwrap\n\nIf an if-catch's \"then\"-clause will jump out of the outer scope in all code paths and\nthe catch is on one or more variables, then this variable(s) will be implicitly unwrapped in the outer scope\nafter the if-statement.\n\nExample:\n\n```\nint! a = foo();\nif (catch a)\n{\n  return;\n}  \nint x = a; // Valid, a is implicitly unwrapped.\n```\n\n### Nextcase statement\n\nNextcase will jump to another `switch` case.\n\n```\nnextcase_stmt      ::= \"nextcase\" ((label \":\")? (expr | \"default\"))? \";\" \n```\n\n#### Labels\n\nWhen a nextcase has a label, the jump is to the switch in an outer scope with the corresponding label.\n\n#### No expression jumps\n\nA `nextcase` without any expression jumps to the next case clause in the current switch. It is not possible\nto use no expression `nextcase` with labels.\n\n#### Jumps to default\n\nUsing `default` jumps to the default clause of a switch.\n\n#### Missing case\n\nIf the switch has constant case values, and the nextcase expression is constant, then the value of\nthe expression must match a case clause. Not matching a case is a compile time error.\n\nIf one or more cases are non-constant and/or the nextcase expression is non-constant, then no compile time check is\nmade.\n\n#### Variable expression\n\nIf the nextcase has a non-constant expression, or the cases are not all constant, then first the nextcase expression\nis evaluated. Next, execution will proceed *as if* the switch was invoked again, but with the nextcase expression as the\nswitch cond expression. See **switch statement**.\n\nIf the switch does not have a cond expression, nextcase with an expression is not allowed.\n\n#### Unreachable code\n\nAny statement in the same scope after a `nextcase` are considered **unreachable**.\n\n### Switch statement\n\n```\nswitch_stmt        ::= \"switch\" (label \":\")? (\"(\" cond_expr \")\")? switch body\nswitch_body        ::= \"{\" case_clause* \"}\"\ncase_clause        ::= default_stmt | case_stmt\ndefault_stmt       ::= \"default\" \":\" stmt*\ncase_stmt          ::= \"case\" label? expr (\"..\" expr)? \":\" stmt*\n```\n\n#### Regular switch\n\nIf the cond expression exists and all case statements have constant expression, then first the\ncond expression is evaluated, next the case corresponding to the expression's value will be jumped to\nand the statement will be executed. After reaching the end of the statements and a new case clause *or* the\nend of the switch body, the execution will jump to the first statement after the switch.\n\n#### If-switch\n\nIf the cond expression is missing or the case statements are non-constant expressions, then each case clause will\nbe evaluated in order after the cond expression has been evaluated (if it exists):\n\n1. If a cond expression exists, calculate the case expression and execute the case if it is matching the\n   cond expression. A default statement has no expression and will always be considered matching the cond expression\n   reached.\n2. If no con expression exists, calculate the case expression and execute the case if the expression evaluates to\n   \"true\" when implicitly converted to boolean. A default statement will always be considered having the \"true\" result.\n\n#### Any-switch\n\nIf the cond expression is an `any` type, the switch is handled as if switching was done over the `type`\nfield of the `any`. This field has the type of [typeid](#typeid-type), and the cases follows the rules\nfor [switching over typeid](#switching-over-typeid).\n\nIf the cond expression is a variable, then this variable is implicitly converted to a pointer with\nthe pointee type given by the case statement.\n\nExample:\n\n```c\nany a = abc();\nswitch (a)\n{\n    case int:\n        int b = *a;   // a is int*\n    case float:\n        float z = *a; // a is float*\n    case Bar:\n        Bar f = *a;   // a is Bar*\n    default:\n        // a is not unwrapped\n}              \n```\n\n#### Ranged cases\n\nCases may be ranged. The start and end of the range must both be constant integer values. The start must\nbe less or equal to the end value. Using non-integers or non-constant values is a compile time error.\n\n#### Fallthrough\n\nIf a case clause has no statements, then when executing the case, rather than exiting the switch, the next case clause\nimmediately following it will be executed. If that one should also be missing statement, the procedure\nwill be repeated until a case clause with statements is encountered (and executed), or the end of the switch is reached.\n\n#### Exhaustive switch\n\nIf a switch case has a default clause *or* it is switching over an enum and there exists a case for each enum value\nthen the switch is exhaustive.\n\n#### Break\n\nIf an unlabelled break, or a break with the switch's label is encountered,\nthen the execution will jump out of the switch and proceed directly after the end of the switch body.\n\n#### Unreachable code\n\nIf a switch is exhaustive and all case clauses end with a jump instruction, containing no break statement out\nof the current switch, then the code directly following the switch will be considered **unreachable**.\n\n#### Switching over typeid\n\nIf the switch cond expression is a typeid, then case declarations may use only the type name after the case,\nwhich will be interpreted as having an implicit `.typeid`. Example: `case int:` will be interpreted as if\nwritten `case int.typeid`.\n\n#### Nextcase without expression\n\nWithout a value `nextcase` will jump to the beginning of the next case clause. It is not allowed to\nput `nextcase` without an expression if there are no following case clauses.\n\n#### Nextcase with expression\n\nNextcase with an expression will evaluate the expression and then jump *as if* the switch was entered with\nthe cond expression corresponding to the value of the nextcase expression. Nextcase with an expression cannot\nbe used on a switch without a cond expression.\n\n#### Do statement\n\nThe do statement first evaluates its body (inner statement), then evaluates the cond expression.\nIf the cond expression evaluates to true, jumps back into the body and repeats the process.\n\n```\ndo_stmt            ::= \"do\" label? compound_stmt (\"while\" \"(\" cond_expr \")\")? \";\" \n```\n\n#### Unreachable code\n\nThe statement after a `do` is considered unreachable if the cond expression cannot ever be false\nand there is no `break` out of the do.\n\n#### Break\n\n`break` will exit the do with execution continuing on the following statement.\n\n#### Continue\n\n`continue` will jump directly to the evaluation of the cond, as if the end of the statement had been reached.\n\n#### Do block\n\nIf no `while` part exists, it will only execute the block once, as if it ended with `while (false)`, this is\ncalled a \"do block\"\n\n### For statement\n\nThe `for` statement will perform the (optional) init expression. The cond expression will then be tested. If\nit evaluates to `true` then the body will execute, followed by the incr expression. After execution will\njump back to the cond expression and execution will repeat until the cond expression evaluates to `false`.\n\n```\nfor_stmt           ::= \"for\" label? \"(\" init_expr \";\" cond_expr? \";\" incr_expr \")\" stmt\ninit_expr          ::= decl_expr_list?\nincr_expr          ::= expr_list? \n```\n\n#### Init expression\n\nThe init expression is only executed once before the rest of the for loop is executed.\nAny declarations in the init expression will be in scope until the for loop exits.\n\nThe init expression may optionally be omitted.\n\n#### Incr expression\n\nThe incr expression is evaluated before evaluating the cond expr every time except for the first one.\n\nThe incr expression may optionally be omitted.\n\n#### Cond expression\n\nThe cond expression is evaluated every loop. Any declaration in the cond expression is scoped to the\ncurrent loop, i.e. it will be reinitialized at the start of every loop.\n\nThe cond expression may optionally be omitted. This is equivalent to setting the cond expression to\nalways return `true`.\n\n#### Unreachable code\n\nThe statement after a `for` is considered unreachable if the cond expression cannot ever be false, or is\nomitted and there is no `break` out of the loop.\n\n#### Break\n\n`break` will exit the `for` with execution continuing on the following statement after the `for`.\n\n#### Continue\n\n`continue` will jump directly to the evaluation of the cond, as if the end of the statement had been reached.\n\n#### Equivalence of `while` and `for`\n\nA `while` loop is functionally equivalent to a `for` loop without init and incr expressions.\n\n### `foreach` and `foreach_r` statements\n\nThe `foreach` statement will loop over a sequence of values. The `foreach_r` is equivalent to\n`foreach` but the order of traversal is reversed.\n`foreach` starts with element `0` and proceeds step by step to element `len - 1`.\n`foreach_r` starts starts with element `len - 1` and proceeds step by step to element `0`.\n\n```\nforeach_stmt       ::= \"foreach\" label? \"(\" foreach_vars \":\" expr \")\" stmt\nforeach_r_stmt     ::= \"foreach_r\" label? \"(\" foreach_vars \":\" expr \")\" stmt\nforeach_vars       ::= (foreach_index \",\")? foreach_var\nforeach_var        ::= type? \"&\"? IDENTIFIER\n```\n\n#### Break\n\n`break` will exit the foreach statement with execution continuing on the following statement after.\n\n#### Continue\n\n`continue` will cause the next iteration to commence, as if the end of the statement had been reached.\n\n#### Iteration by value or reference\n\nNormally iteration are by value. Each element is copied into the foreach variable. If `&`\nis added before the variable name, the elements will be retrieved by reference instead, and consequently\nthe type of the variable will be a pointer to the element type instead.\n\n#### Foreach variable\n\nThe foreach variable may omit the type. In this case the type is inferred. If the type differs from the element\ntype, then an implicit conversion will be attempted. Failing this is a compile time error.\n\n#### Foreach index\n\nIf a variable name is added before the foreach variable, then this variable will receive the index of the element.\nFor `foreach_r` this mean that the first value of the index will be `len - 1`.\n\nThe index type defaults to `usz`.\n\nIf an optional type is added to the index, the index will be converted to this type. The type must be an\ninteger type. The conversion happens as if the conversion was a direct cast. If the actual index value\nwould exceed the maximum representable value of the type, this does not affect the actual iteration, but\nmay cause the index value to take on an incorrect value due to the cast.\n\nFor example, if the optional index type is `char` and the actual index is `256`, then the index value would show `0`\nas `(char)256` evaluates to zero.\n\nModifying the index variable will not affect the foreach iteration.\n\n#### Foreach support\n\nForeach is natively supported for any slice, array, pointer to an array, vector and pointer to a vector.\nThese types support both iteration by value and reference.\n\nIn addition, a type with **operator overload** for `len` and `[]` will support iteration by value,\nand a type with **operator overload** for `len` and `&[]` will support iteration by reference.\n\n### Return statement\n\nThe return statement evaluates its expression (if present) and returns the result.\n\n```\nreturn_stmt        ::= \"return\" expr? \";\"\n```\n\n#### Jumps in return statements\n\nIf the expression should in itself cause an implicit return, for example due to the rethrow operator `!`, then this\njump will happen before the return.\n\nAn example:\n\n    return foo()!;\n    // is equivalent to:\n    int temp = foo()!;\n    return temp;\n\n#### Empty returns\n\nAn empty return is equivalent to a return with a void type. Consequently constructs like `foo(); return;`\nand `return (void)foo();`\nare equivalent.\n\n#### Unreachable code\n\nAny statement directly following a return in the same scope are considered unreachable.\n\n### While statement\n\nThe while statement evaluates the cond expression and executes the statement if it evaluates to true.\nAfter this the cond expression is evaluated again and the process is repeated until cond expression returns false.\n\n```\nwhile_stmt         ::= \"while\" label? \"(\" cond_expr \")\" stmt\n```\n\n#### Unreachable code\n\nThe statement after a while is considered unreachable if the cond expression cannot ever be false\nand there is no `break` out of the while.\n\n#### Break\n\n`break` will exit the while with execution continuing on the following statement.\n\n#### Continue\n\n`continue` will jump directly to the evaluation of the cond, as if the end of the statement had been reached.\n\n### Var statement\n\nA var statement declares a variable with inferred type, or a compile time type variable. It can be used both\nfor runtime and compile time variables. The use for runtime variables is limited to macros.\n\n```\nvar_stmt           ::= \"var\" IDENTIFIER | CT_IDENT | CT_TYPE_IDENT (\"=\" expr)? \";\" \n```\n\n#### Inferring type\n\nIn the case of a runtime variable, the type is inferred from the expression. Not providing an expression\nis a compile time error. The expression must resolve to a runtime type.\n\nFor compile time variables, the expression is optional. The expression may resolve to a runtime or compile time type.\n\n#### Scope\n\nRuntime variables will follow the runtime scopes, identical to behaviour in a declaration statement. The compile\ntime variables will follow the compile time scopes which are delimited by scoping compile time\nstatements (`$if`, `$switch`,\n`$foreach` and `$for`).\n\n## Attributes\n\nAttributes are modifiers attached to modules, variables, type declarations etc.\n\n| name            | used with                                                                         |\n|-----------------|-----------------------------------------------------------------------------------|\n| `@align`        | fn, const, variables, user-defined types, struct member                           |\n| `@benchmark`    | module, fn                                                                        |\n| `@bigendian`    | bitstruct only                                                                    |\n| `@builtin`      | macro, fn, global, constant                                                       |\n| `@callconv`     | fn, call                                                                          |\n| `@deprecated`   | fn, macro, interface, variables, constants, user-defined types, struct member     |\n| `@dynamic`      | fn                                                                                |\n| `@export`       | fn, globals, constants, struct, union, enum, fault                                |\n| `@extern`       | fn, globals, constants, user-defined types                                        |\n| `@if`           | all except local variables and calls                                              |\n| `@inline`       | fn, call                                                                          |\n| `@interface`    | fn                                                                                |\n| `@littleendian` | bitstruct only                                                                    |\n| `@local`        | module, fn, macro, globals, constants, user-defined types, attributes and aliases |\n| `@maydiscard`   | fn, macro                                                                         |\n| `@naked`        | fn                                                                                |\n| `@nodiscard`    | fn, macro                                                                         |\n| `@noinit`       | variables                                                                         |\n| `@noinline`     | fn, call                                                                          |\n| `@noreturn`     | fn, macro                                                                         |\n| `@nostrip`      | fn, globals, constants, struct, union, enum, fault                                |\n| `@obfuscate`    | enum, fault                                                                       |\n| `@operator`     | fn, macro                                                                         |\n| `@optional`     | interface methods                                                                 |\n| `@overlap`      | bitstruct only                                                                    |\n| `@packed`       | struct, union                                                                     |\n| `@priority`     | initializer/finalizer                                                             |\n| `@private`      | module, fn, macro, globals, constants, user-defined types, attributes and aliases |\n| `@public`       | module, fn, macro, globals, constants, user-defined types, attributes and aliases |\n| `@pure`         | call                                                                              |\n| `@reflect`      | fn, globals, constants, user-defined types                                        |\n| `@section`      | fn, globals, constants                                                            |\n| `@test`         | module, fn                                                                        |\n| `@unused`       | all except call and initializer/finalizers                                        |\n| `@used`         | all except call and initializer/finalizers                                        |\n| `@weak`         | fn, globals, constants                                                            |\n| `@winmain`      | fn                                                                                |\n\n#### `@deprecated`\n\nTakes an optional constant string. \nIf the node is in use, print the deprecation and add the optional string if present.\n\n#### `@optional`\n\nMarks an *interface* method as optional, and so does not need to be implemented by\na conforming type.\n\n#### `@winmain`\n\nMarks a `main` function as a win32 winmain function, which is the entrypoint for a windowed \napplication on Windows. This allows the main function to take a different set of \narguments than usual.\n\n#### `@callconv`\n\n`@callconv` can be used with a function or a call. It takes a constant string which is either \"veccall\", \"stdcall\" or \"cdecl\". If more than one `@callconv` \nis applied to a function or call, the last one takes precedence.\n\n### User defined attributes\n\nUser defined attributes group a list of attributes.\n\n```\nattribute_decl     ::= \"def\" AT_TYPE_IDENT (\"(\" parameters \")\")? attribute* \"=\" \"{\" attribute* \"}\" \";\" \n```\n\n#### Empty list of attributes\n\nThe list of attributes may be empty.\n\n#### Parameter arguments\n\nArguments given to user defined attributes will be passed on to the attributes in the list.\n\n#### Expansion\n\nWhen a user defined attribute is encountered, its list of attributes is\ncopied and appended instead of the user defined attribute. Any argument passed to \nthe attribute is evaluated and passed as a constant by the name of the parameter\nto the evaluation of the attribute parameters in the list.\n\n#### Nesting\n\nA user defined attribute can contain other user defined attributes. The definition\nmay not be cyclic.\n\n## Methods\n\n#### Operator overloading\n\n`@operator` overloads may only be added to user defined types (distinct, unions, struct, enum and fault).\n\n##### Indexing operator (`[]`)\n\nThis requires a return type and a method parameter, which is the index.\n\n##### Reference indexing operator (`&[]`)\n\nThis requires a return type and a method parameter, which is the index. If `[]` is implemented,\nit should return a pointer to `[]`.\n\n##### Assigning index operator (`=[]`)\n\nThis has a void return type, and index should match that of `[]` and `&[]`. Value should match that \nof `[]` and be the pointee of the result of `&[]`.\n\n##### Len operator (`len`)\n\nThis must have an integer return type.\n\n#### Dynamic methods\n\n`@dynamic` may be used on methods for any type except `any` and interfaces.\n\n\n## Modules\n\nModule paths are hierarchal, with each sub-path appended with '::' + the name:\n\n```\npath               ::= PATH_SEGMENT (\"::\" PATH_SEGMENT)\n```\n\nEach module declaration starts its own **module section**. All imports and all `@local` declarations\nare only visible in the current **module section**.\n\n```\nmodule_section     ::= \"module\" path opt_generic_params? attributes? \";\"\ngeneric_param      ::= TYPE_IDENT | CONST_IDENT\nopt_generic_params ::= \"(<\" generic_param (\",\" generic_param)* \">)\"\n```\n\nAny visibility attribute defined in a **module section** will be the default visibility in all\ndeclarations in the section.\n\nIf the `@benchmark` attribute is applied to the **module section** then all function declarations\nwill implicitly have the `@benchmark` attribute.\n\nIf the `@test` attribute is applied to the **module section** then all function declarations\nwill implicitly have the `@test` attribute.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"notation","text":"Notation"},{"depth":2,"slug":"source-code-representation","text":"Source code representation"},{"depth":3,"slug":"lexical-translations","text":"Lexical Translations"},{"depth":3,"slug":"line-terminators","text":"Line Terminators"},{"depth":3,"slug":"input-elements-and-tokens","text":"Input Elements and Tokens"},{"depth":3,"slug":"white-space","text":"White Space"},{"depth":3,"slug":"letters-and-digits","text":"Letters and digits"},{"depth":3,"slug":"comments","text":"Comments"},{"depth":3,"slug":"doc-contract","text":"Doc contract"},{"depth":3,"slug":"identifiers","text":"Identifiers"},{"depth":3,"slug":"keywords","text":"Keywords"},{"depth":3,"slug":"operators-and-punctuation","text":"Operators and punctuation"},{"depth":3,"slug":"integer-literals","text":"Integer literals"},{"depth":3,"slug":"floating-point-literals","text":"Floating point literals"},{"depth":3,"slug":"characters","text":"Characters"},{"depth":3,"slug":"backslash-escapes","text":"Backslash escapes"},{"depth":3,"slug":"string-literals","text":"String literals"},{"depth":4,"slug":"compile-time-string-concatenation","text":"Compile time string concatenation"},{"depth":3,"slug":"raw-string-literals","text":"Raw string literals"},{"depth":4,"slug":"compile-time-concatenation","text":"Compile time concatenation"},{"depth":4,"slug":"source-code-pre-filtering","text":"Source code pre-filtering"},{"depth":3,"slug":"character-literals","text":"Character literals"},{"depth":2,"slug":"types","text":"Types"},{"depth":3,"slug":"boolean-types","text":"Boolean types"},{"depth":3,"slug":"integer-types","text":"Integer types"},{"depth":3,"slug":"floating-point-types","text":"Floating point types"},{"depth":3,"slug":"vector-types","text":"Vector types"},{"depth":4,"slug":"vector-base-type","text":"Vector base type"},{"depth":4,"slug":"min-width","text":"Min width"},{"depth":4,"slug":"element-access","text":"Element access"},{"depth":4,"slug":"alignment","text":"Alignment"},{"depth":4,"slug":"vector-operations","text":"Vector operations"},{"depth":3,"slug":"array-types","text":"Array types"},{"depth":3,"slug":"slice-types","text":"Slice types"},{"depth":3,"slug":"pointer-types","text":"Pointer types"},{"depth":4,"slug":"pointee-type","text":"Pointee type"},{"depth":4,"slug":"iptr-and-uptr","text":"iptr and uptr"},{"depth":4,"slug":"the-wildcard-pointer-void","text":"The wildcard pointer void*"},{"depth":4,"slug":"pointer-arithmetic-on-void","text":"Pointer arithmetic on void*"},{"depth":4,"slug":"subscripting","text":"Subscripting"},{"depth":4,"slug":"deref","text":"Deref"},{"depth":4,"slug":"","text":""},{"depth":3,"slug":"struct-types","text":"Struct types"},{"depth":4,"slug":"alignment-1","text":"Alignment"},{"depth":3,"slug":"union-types","text":"Union types"},{"depth":4,"slug":"alignment-2","text":"Alignment"},{"depth":3,"slug":"fault-types","text":"Fault types"},{"depth":4,"slug":"alignment-3","text":"Alignment"},{"depth":3,"slug":"enum-types","text":"Enum types"},{"depth":3,"slug":"function-types","text":"Function types"},{"depth":3,"slug":"typeid-type","text":"Typeid type"},{"depth":3,"slug":"any-type","text":"Any type"},{"depth":4,"slug":"fields","text":"Fields"},{"depth":4,"slug":"switching-over-any","text":"Switching over any"},{"depth":3,"slug":"anyfault-type","text":"Anyfault type"},{"depth":2,"slug":"declarations-and-scope","text":"Declarations and scope"},{"depth":2,"slug":"expressions","text":"Expressions"},{"depth":3,"slug":"assignment-expression","text":"Assignment expression"},{"depth":4,"slug":"type-assign","text":"Type assign"},{"depth":4,"slug":"combined-assign","text":"Combined assign"},{"depth":4,"slug":"implicit-conversion","text":"Implicit conversion"},{"depth":3,"slug":"ternary-elvis-and-or-else-expressions","text":"Ternary, elvis and or-else expressions"},{"depth":4,"slug":"ternary-evaluation","text":"Ternary evaluation"},{"depth":4,"slug":"elvis-evaluation","text":"Elvis evaluation"},{"depth":4,"slug":"orelse-evaluation","text":"Orelse evaluation"},{"depth":3,"slug":"suffix-expression","text":"Suffix expression"},{"depth":4,"slug":"effect-of","text":"Effect of ?"},{"depth":4,"slug":"type-of-the-expression","text":"Type of the expression"},{"depth":3,"slug":"rethrow-expression","text":"Rethrow expression"},{"depth":4,"slug":"the-expression-to-rethrow","text":"The expression to rethrow"},{"depth":4,"slug":"type","text":"Type"},{"depth":3,"slug":"relational-expression","text":"Relational expression"},{"depth":3,"slug":"and-expression","text":"And expression"},{"depth":4,"slug":"type-1","text":"Type"},{"depth":3,"slug":"or-expression","text":"Or expression"},{"depth":4,"slug":"constant-folded-arithmetics","text":"Constant folded arithmetics"},{"depth":4,"slug":"type-2","text":"Type"},{"depth":3,"slug":"casts","text":"Casts"},{"depth":3,"slug":"pointer-casts","text":"Pointer casts"},{"depth":4,"slug":"integer-to-pointer-cast","text":"Integer to pointer cast"},{"depth":4,"slug":"pointer-to-integer-cast","text":"Pointer to integer cast"},{"depth":3,"slug":"subscript-operator","text":"Subscript operator"},{"depth":3,"slug":"operands","text":"Operands"},{"depth":3,"slug":"compound-literals","text":"Compound Literals"},{"depth":3,"slug":"function-calls","text":"Function calls"},{"depth":4,"slug":"function-argument-resolution","text":"Function argument resolution"},{"depth":4,"slug":"varargs","text":"Varargs"},{"depth":2,"slug":"statements","text":"Statements"},{"depth":3,"slug":"asm-block-statement","text":"Asm block statement"},{"depth":3,"slug":"assert-statement","text":"Assert statement"},{"depth":4,"slug":"conditional-inclusion","text":"Conditional inclusion"},{"depth":4,"slug":"assert-message","text":"Assert message"},{"depth":4,"slug":"panic-function","text":"Panic function"},{"depth":3,"slug":"break-statement","text":"Break statement"},{"depth":4,"slug":"break-labels","text":"Break labels"},{"depth":4,"slug":"unreachable-code","text":"Unreachable code"},{"depth":3,"slug":"compile-time-echo-statement","text":"Compile time echo statement"},{"depth":4,"slug":"the-message","text":"The message"},{"depth":3,"slug":"compile-time-assert-statement","text":"Compile time assert statement"},{"depth":4,"slug":"evaluated-expression","text":"Evaluated expression"},{"depth":4,"slug":"error-message","text":"Error message"},{"depth":3,"slug":"compile-time-error-statement","text":"Compile time error statement"},{"depth":4,"slug":"error-message-1","text":"Error message"},{"depth":3,"slug":"compile-time-if-statement","text":"Compile time if statement"},{"depth":4,"slug":"cond-expression","text":"Cond expression"},{"depth":4,"slug":"scopes","text":"Scopes"},{"depth":4,"slug":"evaluation","text":"Evaluation"},{"depth":3,"slug":"compile-time-switch-statement","text":"Compile time switch statement"},{"depth":4,"slug":"no-cond-expression-switch","text":"No cond expression switch"},{"depth":4,"slug":"type-expressions","text":"Type expressions"},{"depth":4,"slug":"ranged-cases","text":"Ranged cases"},{"depth":4,"slug":"fallthrough","text":"Fallthrough"},{"depth":4,"slug":"break-and-nextcase","text":"Break and nextcase"},{"depth":4,"slug":"evaluation-of-statements","text":"Evaluation of statements"},{"depth":3,"slug":"continue-statement","text":"Continue statement"},{"depth":4,"slug":"continue-labels","text":"Continue labels"},{"depth":4,"slug":"unreachable-code-1","text":"Unreachable code"},{"depth":3,"slug":"declaration-statement","text":"Declaration statement"},{"depth":4,"slug":"thread-local-storage","text":"Thread local storage"},{"depth":4,"slug":"static-storage","text":"Static storage"},{"depth":4,"slug":"scopes-1","text":"Scopes"},{"depth":4,"slug":"multiple-declarations","text":"Multiple declarations"},{"depth":4,"slug":"no-init-expression","text":"No init expression"},{"depth":4,"slug":"opt-out-of-zero-initialization","text":"Opt-out of zero initialization"},{"depth":4,"slug":"self-referencing-initialization","text":"Self referencing initialization"},{"depth":3,"slug":"defer-statement","text":"Defer statement"},{"depth":4,"slug":"defer-in-defer","text":"Defer in defer"},{"depth":4,"slug":"static-and-tlocal-variables-in-defer","text":"Static and tlocal variables in defer"},{"depth":4,"slug":"defer-and-return","text":"Defer and return"},{"depth":4,"slug":"defer-and-jump-statements","text":"Defer and jump statements"},{"depth":4,"slug":"defer-execution","text":"Defer execution"},{"depth":4,"slug":"defer-try","text":"defer try"},{"depth":4,"slug":"defer-catch","text":"defer catch"},{"depth":4,"slug":"non-regular-returns---longjmp-panic-and-other-errors","text":"Non-regular returns - longjmp, panic and other errors"},{"depth":3,"slug":"expr-statement","text":"Expr statement"},{"depth":4,"slug":"no-discard","text":"No discard"},{"depth":3,"slug":"if-statement","text":"If statement"},{"depth":4,"slug":"scopes-2","text":"Scopes"},{"depth":4,"slug":"special-parsing-of-the-then-clause","text":"Special parsing of the “then” clause"},{"depth":4,"slug":"break","text":"Break"},{"depth":4,"slug":"if-try","text":"If-try"},{"depth":4,"slug":"if-catch","text":"If-catch"},{"depth":4,"slug":"if-catch-implicit-unwrap","text":"If-catch implicit unwrap"},{"depth":3,"slug":"nextcase-statement","text":"Nextcase statement"},{"depth":4,"slug":"labels","text":"Labels"},{"depth":4,"slug":"no-expression-jumps","text":"No expression jumps"},{"depth":4,"slug":"jumps-to-default","text":"Jumps to default"},{"depth":4,"slug":"missing-case","text":"Missing case"},{"depth":4,"slug":"variable-expression","text":"Variable expression"},{"depth":4,"slug":"unreachable-code-2","text":"Unreachable code"},{"depth":3,"slug":"switch-statement","text":"Switch statement"},{"depth":4,"slug":"regular-switch","text":"Regular switch"},{"depth":4,"slug":"if-switch","text":"If-switch"},{"depth":4,"slug":"any-switch","text":"Any-switch"},{"depth":4,"slug":"ranged-cases-1","text":"Ranged cases"},{"depth":4,"slug":"fallthrough-1","text":"Fallthrough"},{"depth":4,"slug":"exhaustive-switch","text":"Exhaustive switch"},{"depth":4,"slug":"break-1","text":"Break"},{"depth":4,"slug":"unreachable-code-3","text":"Unreachable code"},{"depth":4,"slug":"switching-over-typeid","text":"Switching over typeid"},{"depth":4,"slug":"nextcase-without-expression","text":"Nextcase without expression"},{"depth":4,"slug":"nextcase-with-expression","text":"Nextcase with expression"},{"depth":4,"slug":"do-statement","text":"Do statement"},{"depth":4,"slug":"unreachable-code-4","text":"Unreachable code"},{"depth":4,"slug":"break-2","text":"Break"},{"depth":4,"slug":"continue","text":"Continue"},{"depth":4,"slug":"do-block","text":"Do block"},{"depth":3,"slug":"for-statement","text":"For statement"},{"depth":4,"slug":"init-expression","text":"Init expression"},{"depth":4,"slug":"incr-expression","text":"Incr expression"},{"depth":4,"slug":"cond-expression-1","text":"Cond expression"},{"depth":4,"slug":"unreachable-code-5","text":"Unreachable code"},{"depth":4,"slug":"break-3","text":"Break"},{"depth":4,"slug":"continue-1","text":"Continue"},{"depth":4,"slug":"equivalence-of-while-and-for","text":"Equivalence of while and for"},{"depth":3,"slug":"foreach-and-foreach_r-statements","text":"foreach and foreach_r statements"},{"depth":4,"slug":"break-4","text":"Break"},{"depth":4,"slug":"continue-2","text":"Continue"},{"depth":4,"slug":"iteration-by-value-or-reference","text":"Iteration by value or reference"},{"depth":4,"slug":"foreach-variable","text":"Foreach variable"},{"depth":4,"slug":"foreach-index","text":"Foreach index"},{"depth":4,"slug":"foreach-support","text":"Foreach support"},{"depth":3,"slug":"return-statement","text":"Return statement"},{"depth":4,"slug":"jumps-in-return-statements","text":"Jumps in return statements"},{"depth":4,"slug":"empty-returns","text":"Empty returns"},{"depth":4,"slug":"unreachable-code-6","text":"Unreachable code"},{"depth":3,"slug":"while-statement","text":"While statement"},{"depth":4,"slug":"unreachable-code-7","text":"Unreachable code"},{"depth":4,"slug":"break-5","text":"Break"},{"depth":4,"slug":"continue-3","text":"Continue"},{"depth":3,"slug":"var-statement","text":"Var statement"},{"depth":4,"slug":"inferring-type","text":"Inferring type"},{"depth":4,"slug":"scope","text":"Scope"},{"depth":2,"slug":"attributes","text":"Attributes"},{"depth":4,"slug":"deprecated","text":"@deprecated"},{"depth":4,"slug":"optional","text":"@optional"},{"depth":4,"slug":"winmain","text":"@winmain"},{"depth":4,"slug":"callconv","text":"@callconv"},{"depth":3,"slug":"user-defined-attributes","text":"User defined attributes"},{"depth":4,"slug":"empty-list-of-attributes","text":"Empty list of attributes"},{"depth":4,"slug":"parameter-arguments","text":"Parameter arguments"},{"depth":4,"slug":"expansion","text":"Expansion"},{"depth":4,"slug":"nesting","text":"Nesting"},{"depth":2,"slug":"methods","text":"Methods"},{"depth":4,"slug":"operator-overloading","text":"Operator overloading"},{"depth":5,"slug":"indexing-operator","text":"Indexing operator ([])"},{"depth":5,"slug":"reference-indexing-operator","text":"Reference indexing operator (&[])"},{"depth":5,"slug":"assigning-index-operator","text":"Assigning index operator (=[])"},{"depth":5,"slug":"len-operator-len","text":"Len operator (len)"},{"depth":4,"slug":"dynamic-methods","text":"Dynamic methods"},{"depth":2,"slug":"modules","text":"Modules"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
