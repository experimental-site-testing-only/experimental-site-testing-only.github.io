const id = "Build Your Project/build-commands.mdx";
						const collection = "docs";
						const slug = "build-your-project/build-commands";
						const body = "import { FileTree } from '@astrojs/starlight/components';\n\n\n\nBuilding a project is done by invoking the C3 compiler with the `build` or `run` command inside of the project structure. The compiler will search upwards in the file hierarchy until a `project.json` file is found.\n\nYou can also [customise the project build config](/build-your-project/project-config/).\n\n## Compile Individual Files\n\nBy default the compiler is compiling stand-alone files to output an executable binary.\n\n```bash\nc3c compile <file1> <file2> <file3>\n```\n\n## Run\n\nWhen starting out, with C3 it's natural to use `compile-run` to try things out. For larger projects, the built-in build system is recommended instead. \n\nThe `compile-run` command works same as compilation, but also immediately runs the resulting executable.\n\n```bash\nc3c compile-run <file1> <file2> <file3>\n```\n\n## Common additional parameters\n\nAdditional parameters:\n- `--lib <path>` add a library to search.\n- `--output <path>` override the output directory.\n- `--path <path>` execute as if standing at `<path>`\n    \n## Init a new project\n\n```bash\nc3c init <project_name> [optional path]\n```\n\nCreate a new project structure in the current directory.\n\nUse the `--template` to select a template. The following are built in:\n\n- `exe` - the default template, produces an executable.\n- `static-lib` - template for producing a static library.\n- `dynamic-lib` - template for producing a dynamic library.\n\nIt is also possible to give the path to a custom template.\n\nAdditional parameters:\n- `--template <path>` indicate an alternative template to use.\n\nFor example `c3c init hello_world` creates the following structure:\n\n<FileTree>\n- build/\n- docs/\n- lib/\n- resources/\n- scripts/\n- src/\n  - main.c3\n- test/\n- LICENSE\n- project.json\n- README.md\n</FileTree>\n\nCheck the [project configuration docs](/build-your-project/project-config/) to learn more about configuring your project.\n\n## Test\n```bash\nc3c test\n```\nWill run any tests in the project in the `\"sources\"` directory defined in your `project.json` for example:\n```json5\n...\n\"sources\": [ \"src/**\" ],\n...\n```\n\nTests are defined with a `@test` attribute, for example:\n\n```c3\nfn void test_fn() @test\n{\n    assert(true == true, \"true is definitely true\");\n}\n```\n\n\n## Build\n\n```bash\nc3c build [target]\n```\n\nBuild the project in the current path. It doesn't matter where in the project structure you are. \n\nThe built-in templates define two targets: `debug` (which is the default) and `release`.\n\n## Clean\n\n```bash\nc3c clean\n```\n\n## Build and Run\n\n```bash\nc3c run [target]\n```\n\nBuild the target (if needed) and run the executable.\n\n## Clean and Run\n\n```bash\nc3c clean-run [target]\n```\n\nClean, build and run the target.\n\n## Dist\n\n```bash\nc3c dist [target]\n```\n\n*Not properly added yet*\n\nClean, build and package the target for distribution.\nWill also run the target if it is a executable.\n\n## Docs\n\n\n```bash\nc3c docs [target]\n```\n\n*Not added yet* \n\nRebuilds the documentation. \n\n\n## Bench\n\n```bash\nc3c bench [target]\n```\n\nRuns benchmarks on a target.\n";
						const data = {title:"Build Commands",description:"Build Commands",editUrl:true,head:[],template:"doc",sidebar:{order:240,hidden:false,attrs:{}},pagefind:true,draft:false};
						const _internal = {
							type: 'content',
							filePath: "/home/josh/git/c3_tests/experimental-site-testing-only__local_changes/src/content/docs/Build Your Project/build-commands.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
